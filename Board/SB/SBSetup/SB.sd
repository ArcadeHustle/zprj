//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2011, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************

//*************************************************************************
// $Header: /Alaska/BIN/Chipset/Intel/SouthBridge/LynxPoint/Intel Pch SB Board/SBSetup/SB.sd 56    5/14/14 1:05p Barretlin $
//
// $Revision: 56 $
//
// $Date: 5/14/14 1:05p $
//*************************************************************************
// Revision History
// ----------------
// $Log: /Alaska/BIN/Chipset/Intel/SouthBridge/LynxPoint/Intel Pch SB Board/SBSetup/SB.sd $
// 
// 56    5/14/14 1:05p Barretlin
// [TAG]  		EIP167028
// [Category]  	Improvement
// [Description]  	Variable attribute improvement
// [Files]  		SB.sd SBDxe.c WdtAppDxe.c
// 
// 55    3/24/14 9:04a Barretlin
// [TAG]  		EIP N/A
// [Category]  	Improvement
// [Description]  	fix build error with old label thunderbolt module
// [Files]  		Sb.sd
// 
// 54    3/13/14 10:59a Barretlin
// [TAG]  		EIP153695
// [Category]  	Improvement
// [Description]  	USB Per port control is not reasonable when
// OEM_USBPREPORT_DISABLE_SUPPORT token is Enabled and USB devices are
// behind hubs
// [Files]  		Sb.sdl Sb.sd Sb.uni GetSetupData.c SbDxe.c PchUsbCommon.c
// PchRegsUsb.h
// 
// 53    12/30/13 5:21a Barretlin
// [TAG]  		EIP N/A
// [Category]  	Improvement
// [Description]  	Follow Intel BIOS rev.135 to change I2C device default
// value
// [Files]  		SB.sd SB.uni
// 
// 52    12/30/13 3:23a Barretlin
// [TAG]  		EIP N/A
// [Category]  	Improvement
// [Description]  	Support Thunderbolt new feature - Change Thunderbolt AIC
// location in run time
// [Files]  		SB.sd
// 
// 51    8/08/13 2:26a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Remove setup item which already has.
// [Files]  		SB.sd
// 
// 50    8/01/13 4:35a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add PCIE LTR setup items.
// [Files]  		SB.sd, SB.uni, SBDxe.c, GetSetupData.c, SbSetupData.h
// 
// 49    8/01/13 2:21a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Hidden and disable "SLP_LAN# low on DC power" for DT or
// sever platform.
// [Files]  		SB.sd
// 
// 48    7/09/13 5:21a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Create "PCH Cross Throttling" setup item.(Only ULT
// support)
// [Files]  		SBDxe.c, SB.sd, SB.uni, GetSetupData.c, SB.sd 
// 
// 47    7/03/13 8:04a Scottyang
// [TAG]  		EIP124410
// [Category]  	Improvement
// [Description]  	Implement SMBIOS type 88h for CRID.
// [Files]  		SBDxe.c, SB.sdl, SB.sd, SBSetup.c, SBSetup.sdl
// 
// 46    6/24/13 6:31a Scottyang
// [TAG]  		EIP127297
// [Category]  	Improvement
// [Description]  	Update PCH RC 1.6.0.
// [Files]  		SB.sd, SBDxe.c, ..\ReferenceCode\Chipset\LynxPoint\*.*
// 
// 45    6/19/13 3:48a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Support Lava Canyon CRB
// [Files]  		SB.sd
// 
// 44    6/13/13 11:55p Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Update RC 150 GNVS.
// [Files]  		SBDxe.c, SB.uni, SB.sd
// 
// 43    6/03/13 3:47a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Remove some code that move to Thunder Bolt module.
// [Files]  		SB.sd
// 
// 42    5/30/13 9:14a Scottyang
// [TAG]  		EIP122981
// [Category]  	Improvement
// [Description]  	Support HarrisBeach CRB.
// [Files]  		SB.sd, ACPI.sd, CRB.sdl
// 
// 41    5/13/13 9:27a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Set LpssIntMode default to ACPI.
// [Files]  		SB.sd
// 
// 40    5/13/13 8:59a Scottyang
// [TAG]  		EIP123496
// [Category]  	Improvement
// [Description]  	Update PCH RC 1.5.0.
// [Files]  		..\ReferenceCode\Chipset\LynxPoint\*.* , SBDxe.C, SBPEI.c,
// SB.sd, SB.uni, SbSetupData.h, GetSetupData.c
// 
// 39    4/24/13 6:49a Scottyang
// [TAG]  		EIP82149
// [Category]  	Improvement
// [Description]  	 Intel(R) 8 Series Chipset Family Deep Sx and CPU
// Soft-Strap BIOS Override Co-Existence Issue. If the soft-strap override
// feature is required and enabled, BIOS must disable Deep Sx
// functionality.
// [Files]  		SBDxe.c, SB.sd, SBPlatformData.h
// 
// 38    3/26/13 5:56a Wesleychen
// [TAG]          None
// [Category]     Improvement
// [Description]  To Hide HPET setup option.
// [Files]        SB.sd
// 
// 37    3/21/13 1:43a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Fixed remove wrong setup item.
// [Files]  		SB.sd
// 
// 36    3/15/13 3:42a Scottyang
// [TAG]  		EIP118121
// [Category]  	Improvement
// [Description]  	Update PCH RC 1.3.0.
// [Files]  		..\ReferenceCode\Chipset\LynxPoint\*.*, SBDxe.c, SBPEI.c,
// SB.sd, SB.uni, GetSetupData.c, SbSetupData.h
// 
// 35    3/14/13 4:19a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Remove unuse item.
// [Files]  		SB.sd
// 
// 34    3/06/13 2:26a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Remove one BIOS lock marco.
// [Files]  		SB.sd
// 
// 33    3/04/13 10:08p Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add Solid State Drive item to port 6.
// [Files]  		GetSetupData.c, SbSetupData.h, SB.sd
// 
// 32    2/18/13 2:52a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Set PCIE root port function swapping default is
// disable.
// [Files]  		SB.sd, SB.uni, SB.sdl
// 
// 31    2/09/13 12:16a Scottyang
// [TAG]  		EIP114922
// [Category]  	Improvement
// [Description]  	Update PCH RC 1.1.0.
// [Files]  		..\ReferenceCode\Chipset\LynxPoint\*.*, SBDxe.c, SBPEI.c,
// SB.sd, SB.uni, GetSetupData.c, SbSetupDara.h
// 
// 30    1/31/13 10:55a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add Serial IO GNVS setup option. 
// [Files]  		SBDxe.c, SB.sd, SB.uni, SbSetupData.h, GetSetupData.c
// 
// 29    1/30/13 12:55a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Update for 4.6.5.3_TBT_002.
// [Files]  		SB.sd, SB.sdl
// 
// 28    1/25/13 7:47a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Use token to set "BIOS Lock", "SMI Lock", BIOS
// Interface Lock", "GPIO Lock" and "RTC RAM Lock".
// [Files]  		SB.sd, SB.sdl
// 
// 27    1/10/13 4:45a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Create DTIO value and DM value option
// [Files]  		SB.sd, SB.uni, SbSetupData.h, GetSetupData.c, SBDxe.c
// 
// 26    1/03/13 10:59p Scottyang
// [TAG]  		None
// [Category]  	Bug Fix
// [Severity]  	Minor
// [Symptom]  	Azalia option not show at setup menu at 2 chip
// [RootCause]  	Azalia option will hide when Audio DSP enable at ULT but
// 2 chip do no need.
// [Solution]  	Hide Azalia only when is ULT platform.
// [Files]  		SB.sd
// 
// 25    1/03/13 4:54a Scottyang
// [TAG]  		None
// [Category]  	Bug Fix
// [Severity]  	Normal
// [Symptom]  	Build error when set IDE mode as default.
// [RootCause]  	The ULT did not support IDE mode that made the value
// redefine.
// [Solution]  	Separate Sata inter face for 2 Chip and ULT.
// [Files]  		SB.sd, GetSetupData.c, SbSetupData.h
// 
// 24    12/26/12 7:43a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Show EHCI option when XHCI is disable.
// [Files]  		SB.sd
// 
// 23    12/24/12 5:49a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add option for XHCI Idel L1 workaroung.
// [Files]  		GetSetupData.c, SbSetupData.h, SB.sd, SB.uni, SBDxe.c,
// SBPEI.c
// 
// 22    12/22/12 2:06a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add PCIE "L1 Substates"setup option.
// [Files]  		GetSetupData.c, SbSetupData.h, SB.sd, SB.uni, SBDxe.c
// 
// 21    12/18/12 6:12a Scottyang
// [TAG] EIP109697
// [Category] Improvement
// [Description] Update PCH RC 0.8.1
// [Files] ReferenceCode\Chipset\LynxPoint\*.*, SBDxe.c, SBPEI.c, SB.sd,
// SbSetupData.c, GetSetupDate.c
// 
// 20    12/17/12 6:42a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add setup menu for LPSS and ECTG.
// [Files]  		GetSetupData.c
// SbSetupData.h
// SB.sd
// SB.uni
// SBDxe.c
// 
// 19    12/13/12 10:35a Scottyang
// [TAG]  		EIP106687
// [Category]  	Improvement
// [Description]  	Add option for delay to detect PCIE card.
// [Files]  		SBPEI.c, SB.sd, SB.uni, GetSetupData.c, SbSetupData.h,
// PciBus.c
// 
// 18    12/10/12 10:42p Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Follow IBIOS remove EHCI1 and EHCI2 setup menu.
// 
// 17    11/21/12 12:50a Scottyang
// [TAG] None
// 
// [Category] Improvement
// 
// [Description] Add String at help for USB
// 
// [Files] SB.sd, SB.uni
// 
// 16    11/20/12 9:43a Scottyang
// [TAG]  		EIP107014
// [Category]  	Improvement
// [Description]  	Update RC 0.8.0
// [Files]  		ReferenceCode\Chipset\LynxPoint\*.*, SBDxe.c, SBPEI.c,
// SB.sd, SbSetupData.c, GetSetupDate.c
// 
// 15    11/08/12 8:37a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Add device item that connect LPSS.
// [Files]  		GetSetupData.c, SbSetupData.h, SBDxe.c, SB.sd, SB.uni
// 
// 14    11/07/12 6:04a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Remove HDMI item.
// [Files]  		SB.sd, SB.uni, GetSetupData.c, SbSetupData.h
// 
// 13    10/25/12 7:17a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Create NFC item at setup
// [Files]  		SB.sd, SB.uni, SbSetupData.h
// 
// 12    10/23/12 8:25a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	Create Device Sleep at setup menu
// [Files]  		SB.sd, SB.uni, SBDxe.c, GetSetupData.c, SbSetupData.h
// 
// 11    10/16/12 2:18a Scottyang
// [TAG]  		EIP103924
// [Category]  	Improvement
// [Description]  	Update RC 0.7.1
// [Files]  		ReferenceCode\Chipset\LynxPoint\*.*, SBDxe.c, SB.sd,
// SbSetupData.c, GetSetupDate.c
// 
// 10    10/14/12 8:27a Scottyang
// [TAG]  		None
// [Category]  	Improvement
// [Description]  	One rom for two chip and one chip. 
// [Files]  		SPPEIBoard.c, SB.sd, SBDxe.c, SBPEI.c, PCH.asl
// 
// 9     9/26/12 3:51a Victortu
// [TAG]           None
// [Category]      Improvement
// [Description]   Update for Intel PCH LPT RC070.
// [Files]         SB.sdl, SBDXE.c, SBPEI.c, Pch.sdl, SB.sd, SB.uni
// 
// [TAG]           None
// [Category]      Improvement
// [Description]   Update for generic Thunderbolt support.
// [Files]         SB.sd
// 
// [TAG]           None
// [Category]      Improvement
// [Description]   Implement ULT platform LPSS and ADSP setup option.
// [Files]         GetSetupData.c, SB.sd, SB.uni, SbSetupData.h, SBDxe.c,
// SB.sdl
// 
// 8     9/12/12 5:06a Victortu
// [TAG]           None
// [Category]      Improvement
// [Description]   Modify for Thunderbolt support.
// [Files]         GetSetupData.c, SB.sdl, SB.sd, SB.uni, SbSetupData.h,
// PciHotPlug.c
// 
// [TAG]           None
// [Category]      Improvement
// [Description]   Force HPET enabled for MRC initialization.
// [Files]         SB.sd, SBPEI.c
// 
// 7     8/24/12 6:47a Victortu
// [TAG]           None
// [Category]      Improvement
// [Description]   Update RC_PORT_x for PCIe.
// [Files]         SB.sdl, SB.sd, SBDxe.c
// 
// 6     8/13/12 10:09a Victortu
// [TAG]           None
// [Category]      Improvement
// [Description]   Remove useless Dppm items.
// [Files]         GetSetupData.c, SB.sd, SbSetupData.h, SBDxe.c
// 
// [TAG]           None
// [Category]      Improvement
// [Description]   Implement USB Precondition option for policy
// "UsbPrecondition".
// [Files]         GetSetupData.c, SB.sd, SB.uni, SbSetupData.h, SBDxe.c,
// SBPEI.c
// 
// 5     7/27/12 6:07a Victortu
// [TAG]           None
// [Category]      Improvement
// [Description]   Update setup items and policies.
// [Files]         GetSetupData.c, SB.sdl, SB.sd, SB.uni, SbSetupData.h,
// SBPEI.c, SBDXE.c
// 
// [TAG]           None
// [Category]      Improvement
// [Description]   Update to support ULT Platform.
// [Files]         SB.H, SB.mak, SB.sdl, SB.sd, SBSetup.c,
// AcpiModeEnable.c, SBDxe.c, SBPEI.c, SBSMI.c, SleepSmi.c,
// SmiHandlerPorting.c, SmiHandlerPorting2.c, SBPPI.h, Pch.sdl
// 
// 4     7/02/12 10:20a Victortu
// [TAG]           None
// [Category]      Improvement
// [Description]   Implement the setup option S3_S4_S5/Battery of DeepSx.
// [Files]         SB.sd, SB.uni
// 
// [TAG]		None
// [Category]	Improvement
// [Description]	Change default setup of USB 3.0 mode and Pre-Boot
// Support.
// [Files]		GetSetupData.c, SB.sd
// 
// 3     5/03/12 6:31a Victortu
// [TAG]           None 
// [Category]      Improvement 
// [Description]   Modify to support Thunderbolt. 
// [Files]         SB.sd; SB.uni; SB.sdl; SbSetupData.h; PciHotPlug.c 
// 
// 2     4/25/12 9:08a Victortu
// [TAG]         None
// [Category]    Improvement
// [Description] Relayout PCH USB Setup.
// [Files]       GetSetupData.c; SB.sd; SB.uni; SbSetupData.h; SBDxe.c
// 
// 1     2/08/12 8:23a Yurenlai
// Intel Lynx Point/SB eChipset initially releases.
// 
//*************************************************************************
//*************************************************************************
//<AMI_FHDR_START>
//
// Name:    SB.sd
//
// Description: South Bridge setup form
//
//<AMI_FHDR_END>
//*************************************************************************

#ifndef SATA_MODE_IDE
#define SATA_MODE_IDE         0
#endif

#ifndef SATA_MODE_AHCI
#define SATA_MODE_AHCI        1
#endif

#ifndef SATA_MODE_RAID
#define SATA_MODE_RAID        2
#endif

#ifdef SETUP_DATA_DEFINITION
//----------------------------------------------------------------------------
// Put NVRAM data definitions here.
// For example: UINT8 Data1;
// These definitions will be converted by the build process
// to a definitions of SETUP_DATA fields.
//----------------------------------------------------------------------------
    UINT8   ECTG;
    UINT8   PchLan;
    UINT8   PchWakeOnLan;
    UINT8   SlpLanLow;
    UINT8   BoardCapability;
    UINT8   DeepSxBattMode;
    UINT8   DeepSxMode;
    UINT8   Gp27Wake;
    UINT8   PcieWake;
    UINT8   PchAzalia;
    UINT8   AzaliaDs;
    UINT8   AzaliaPme;
    UINT8   PchPciClockRun;
    UINT8   SirqMode;
    UINT8   PchDisplay;
    UINT8   PchEnableCrid;
    UINT8   SmiLock;
    UINT8   BiosLock;
    UINT8   GpioLock;
    UINT8   BiosInterfaceLock;
    UINT8   RtcLock;
    // PCH DMI
    UINT8   PchDmiAspm;
    UINT8   PchDmiExtSync;
    // PCI_EXPRESS_CONFIG, 8 ROOT PORTS
    UINT8   PcieUsbWa;
    UINT8   PcieClockGating;
    UINT8   RootPortFunctionSwapping;
    UINT8   PcieRootPortSBDE;
    UINT8   PcieSBDEPort;
    UINT8   PcieRootPortEn[8];
    UINT8   PcieRootPortAspm[8]; 
    UINT8   PcieRootPortURE[8];  
    UINT8   PcieRootPortFEE[8];  
    UINT8   PcieRootPortNFE[8];  
    UINT8   PcieRootPortCEE[8];  
    UINT8   PcieRootPortCTD[8];  
    UINT8   PcieRootPortPIE[8];  
    UINT8   PcieRootPortSFE[8];  
    UINT8   PcieRootPortSNE[8];  
    UINT8   PcieRootPortSCE[8];  
    UINT8   PcieRootPortL1S[8]; 
    UINT8   PcieRootPortPMCE[8]; 
    UINT8   PcieRootPortHPE[8];
    UINT8   PcieRootPortSpeed[8];
    UINT8   PcieRPDetectNonComplaint[8];

    UINT8   PcieLtrEnable[8];
    UINT8   PcieLtrConfigLock[8];
    UINT8   PcieSnoopLatencyOverrideMode[8];
    UINT8   PcieSnoopLatencyOverrideMultiplier[8];
    UINT8   PcieSnoopLatencyOverrideValue[8];
    UINT8   PcieNonSnoopLatencyOverrideMode[8];
    UINT8   PcieNonSnoopLatencyOverrideMultiplier[8];
    UINT8   PcieNonSnoopLatencyOverrideValue[8];


    // PCI Bridge Resources
    UINT8   ExtraBusRsvd[8];
    UINT16  PcieMemRsvd[8];
    UINT8   PcieMemRsvdalig[8];
    UINT16  PciePFMemRsvd[8];
    UINT8   PciePFMemRsvdalig[8];
    UINT8   PcieIoRsvd[8];
//    UINT8   ExtraBusRsv2[8];

#if HPET_SUPPORT
    UINT8   Hpet;
#endif
    UINT8   SlpS4AssW;
    UINT8   LastState;
    UINT8   Port80Route;
    // Usb Config
    UINT8   UsbPrecondition;
    UINT8   PchUsb30Mode;
//    UINT8   PchUsb30HsPortSwitchable[4];
    UINT8   PchEnableRmh1;
    UINT8   PchUsb20[2];
    UINT8   PchUsbPerPortCtl;
    UINT8   EhciConDisConWakeUp;
    UINT8   PchUsbPort[14];
    UINT8   PchUsb30Port[6];
    UINT8   PchUsb30PreBootSupport;
    UINT8   PchUsb30IdleL1;
    UINT8   PchUsb30Btcg;
    UINT8   PchUsb20PinRoute;
    UINT8   ManualModeUsb20PerPinRoute[14];
    UINT8   PchUsb30PinEnable;
    UINT8   ManualModeUsb30PerPinEnable[6];
//    UINT8   XhciStreams;
    // Sata CONFIG
    UINT8   PchSata;
    UINT8   SataInterfaceMode;
    UINT8   ULTSataInterfaceMode;
    UINT8   SataTestMode;
#if SataDriver_SUPPORT
    UINT8   SataRaidRom;
#endif
    UINT8   SalpSupport;
    UINT8   SataControllerSpeed;
    UINT8   SataPort[6];
    UINT8   SataHotPlug[6];
    UINT8   ExternalSata[6];
    UINT8   SataMechanicalSw[6];
    UINT8   SolidStateDrive[6];
    UINT8   SataSpinUp[6];
    UINT8   SataDevSlp[4];
    UINT8   SataEnableDitoConfig[4];
    UINT8   SataDmVal[4];
    UINT16  SataDitoVal[4];
    UINT8   SataRaidR0;
    UINT8   SataRaidR1;
    UINT8   SataRaidR10;
    UINT8   SataRaidR5;
    UINT8   SataRaidIrrt;
    UINT8   SataRaidOub;
    UINT8   SataHddlk;
    UINT8   SataLedl;
    UINT8   SataRaidIooe;
    UINT8   SmartStorage;
    UINT8   OromUiDelay;
    UINT8   SataAlternateId;

    // PCH Thermal
    UINT8   AutoThermalReport;
    UINT8   Ac1TripPoint;
    UINT8   Ac0TripPoint;
    UINT8   Ac0FanSpeed;
    UINT8   Ac1FanSpeed;
    UINT8   PassiveThermalTripPoint;
    UINT8   CriticalThermalTripPoint;
    UINT8   PassiveTc1Value;
    UINT8   PassiveTc2Value;
    UINT8   PassiveTspValue;

    UINT8   CPUTempReadEnable;
    UINT8   CPUEnergyReadEnable;
    UINT8   ThermalDeviceEnable;
    UINT8   PchCrossThrottling;
    UINT8   PCHTempReadEnable;
    UINT8   AlertEnableLock;
    UINT8   PchAlert;
    UINT8   DimmAlert;

    UINT8   PchHotLevel;
    UINT8   TPV_Restrict_Enable;

    UINT8   TrEnabled;
    UINT8   TsOnDimm1;
    UINT8   TsOnDimm2;
    UINT8   TsOnDimm3;
    UINT8   TsOnDimm4;
    UINT8   SMBusECMsgLen;
    UINT8   SMBusECMsgPEC;
    // EC turbo control test mode 
    UINT8   ECTurboControlMode;
    UINT8   ACBrickCapacity;
    UINT8   ECPollingPeriod;
    UINT8   ECGuardBandValue;
    UINT8   ECAlgorithmSel;
    UINT8   ECHybridPowerBoost;
    UINT16  ECHybridCurrent;
    // PchLp LPSS
    UINT8   LpssDmaEnable;
    UINT8   LpssI2c0Enable;
    UINT8   LpssI2c1Enable;
    UINT8   LpssSpi0Enable;
    UINT8   LpssSpi1Enable;
    UINT8   LpssUart0Enable;
    UINT8   LpssUart1Enable;
    UINT8   LpssSdioEnable;
    UINT8   LpssMode;
    UINT8   LpssIntMode;
    UINT8   I2C0VoltageSelect;
    UINT8   I2C1VoltageSelect;
    UINT8   SensorHub;
    UINT8   TPD4;
    UINT8   AtmelTPL;
    UINT8   ElanTPL;
    UINT8   ElanTPD;
    UINT8   SynaTPD;
    UINT8   NtriTPL;
    UINT8   EetiTPL;
    UINT8   AlpsTPD;
    UINT8   CyprTPD;
    UINT8   Bluetooth0;
    UINT8   Bluetooth1;

    UINT16  I2C0SSH;
    UINT16  I2C0SSL;
    UINT16  I2C0SSD;
    UINT16  I2C0FMH;
    UINT16  I2C0FML;
    UINT16  I2C0FMD;
    UINT16  I2C0FPH;
    UINT16  I2C0FPL;
    UINT16  I2C0FPD;
    UINT16  I2C0M0C0;
    UINT16  I2C0M1C0;
    UINT16  I2C0M2C0;

    UINT16  I2C1SSH;
    UINT16  I2C1SSL;
    UINT16  I2C1SSD;
    UINT16  I2C1FMH;
    UINT16  I2C1FML;
    UINT16  I2C1FMD;
    UINT16  I2C1FPH;
    UINT16  I2C1FPL;
    UINT16  I2C1FPD;
    UINT16  I2C1M0C1;
    UINT16  I2C1M1C1;
    UINT16  I2C1M2C1;

    UINT16  SPI0M0C2;
    UINT16  SPI0M1C2;

    UINT16  SPI1M0C3;
    UINT16  SPI1M1C3;

    UINT16  UAR0M0C4;
    UINT16  UAR0M1C4;

    UINT16  UAR1M0C5;
    UINT16  UAR1M1C5;
    // PchLp Audio DSP
    UINT8   ADspEnable;
    UINT8   ADspD3PG;
    UINT8   ADspCodecSelect;
    UINT8   ADspBluetooth;
    UINT8   ADspMode;

    UINT8   NFCE;

    UINT8 AaeonWakeOnRtc;			//AAEON_RTC_001_Elflo+
//  UINT8 FixedWakeOnRTCS5;		//AAEON_RTC_001_Elflo-
//  UINT8 DynamicWakeOnRTCS5;		//AAEON_RTC_001_Elflo-
    UINT8 AaeonRTCWakeupTimeDay;
    UINT8 AaeonRTCWakeupTimeHour;
    UINT8 AaeonRTCWakeupTimeMinute;
    UINT8 AaeonRTCWakeupTimeSecond;
    UINT8 AaeonRTCWakeupTimeMinuteIncrease;
#endif

#ifdef FORM_SET_TYPEDEF
 #include "Board\EM\Platform\PlatformSetup.h"
 #include "Protocol\SBPlatformData.h"
#endif



//---------------------------------------------------------------------------
#if defined(VFRCOMPILE) && !defined(CONTROLS_ARE_DEFINED)
#define CONTROL_DEFINITION
#endif
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
#ifdef CONTROL_DEFINITION

  #define AAEON_WAKEONRTC_DIS\
      text \
          help   = STRING_TOKEN(STR_WAKE_ON_RTC_PROMPT_HELP), \
          text   = STRING_TOKEN(STR_WAKE_ON_RTC_PROMPT), \
          text   = STRING_TOKEN(STR_DISABLED), \
          flags  = 0, \
          key    = 0;

  #define AAEON_WAKEONRTC\
	oneof	varid	= SETUP_DATA.AaeonWakeOnRtc,\
			prompt		= STRING_TOKEN(STR_WAKE_ON_RTC_PROMPT),\
			help		= STRING_TOKEN(STR_WAKE_ON_RTC_PROMPT_HELP),\
			option text = STRING_TOKEN(STR_DISABLED), value=0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			option text = STRING_TOKEN(STR_WOR_FIXED), value=1, flags= RESET_REQUIRED;\
			option text = STRING_TOKEN(STR_WOR_DYNAMIC), value=2, flags= RESET_REQUIRED;\
	endoneof;

//AAEON_RTC_001_Elflo- >>
//  #define AAEON_ONEOF_FIXED_WAKEONRTCS5\
//	oneof	varid	= SETUP_DATA.FixedWakeOnRTCS5,\
//			prompt		= STRING_TOKEN(STR_FIXED_WAKE_ON_RTCS5_PROMPT),\
//			help		= STRING_TOKEN(STR_FIXED_WAKE_ON_RTCS5_HELP),\
//			option text = STRING_TOKEN(STR_DISABLED), value=0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;\
//			option text = STRING_TOKEN(STR_ENABLED), value=1, flags= RESET_REQUIRED;\
//	endoneof;
//AAEON_RTC_001_Elflo- <<	

  #define AAEON_NUM_RTCWAKEUP_TIMEDAY\
	numeric varid  = SETUP_DATA.AaeonRTCWakeupTimeDay,\
		  prompt	  = STRING_TOKEN(STR_RTC_WAKEUP_DAY_PROMPT),\
		  help		  = STRING_TOKEN(STR_RTC_DAY_HELP),\
		  flags 	  = RESET_REQUIRED,\
		  minimum		= 0,\
		  maximum		= 31,\
		  step			= 1,\
		  default		= 0,\
	endnumeric;

  #define AAEON_NUM_RTCWAKEUP_TIMEHOUR\
	numeric varid  = SETUP_DATA.AaeonRTCWakeupTimeHour,\
		  prompt	  = STRING_TOKEN(STR_RTC_WAKEUP_HOUR_PROMPT),\
		  help		  = STRING_TOKEN(STR_RTC_HOUR_HELP),\
		  flags 	  = RESET_REQUIRED,\
		  minimum	  = 0,\
		  maximum	  = 23,\
		  step		  = 1,\
		  default	  = 0,\
	endnumeric;
	
  #define AAEON_NUM_RTCWAKEUP_TIMEMINUTE\
	numeric varid  = SETUP_DATA.AaeonRTCWakeupTimeMinute,\
		  prompt	  = STRING_TOKEN(STR_RTC_WAKEUP_MINUTE_PROMPT),\
		  help		  = STRING_TOKEN(STR_TIME_MINUTE_HELP),\
		  flags 	  = RESET_REQUIRED,\
		  minimum		= 0,\
		  maximum		= 59,\
		  step			= 1,\
		  default		= 0,\
	endnumeric;
	
  #define AAEON_NUM_RTCWAKEUP_TIMESECOND\
	numeric varid  = SETUP_DATA.AaeonRTCWakeupTimeSecond,\
		  prompt	  = STRING_TOKEN(STR_RTC_WAKEUP_SECOND_PROMPT),\
		  help		  = STRING_TOKEN(STR_TIME_SECOND_HELP),\
		  flags 	  = RESET_REQUIRED,\
		  minimum		= 0,\
		  maximum		= 59,\
		  step			= 1,\
		  default		= 0,\
	endnumeric;

//AAEON_RTC_001_Elflo- >>
//  #define AAEON_ONEOF_DYNAMIC_WAKEONRTCS5\
//	oneof	varid	= SETUP_DATA.DynamicWakeOnRTCS5,\
//			prompt		= STRING_TOKEN(STR_DYNAMIC_WAKE_ON_RTCS5_PROMPT),\
//			help		= STRING_TOKEN(STR_DYNAMIC_WAKE_ON_RTCS5_HELP),\
//			option text = STRING_TOKEN(STR_DISABLED), value=0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;\
//			option text = STRING_TOKEN(STR_ENABLED), value=1, flags= RESET_REQUIRED;\
//	endoneof;
//AAEON_RTC_001_Elflo- <<
	
  #define AAEON_NUM_RTCWAKEUP_TIMEMINUTEINCREASE\
	numeric varid  = SETUP_DATA.AaeonRTCWakeupTimeMinuteIncrease,\
		prompt		= STRING_TOKEN(STR_RTC_WAKEUP_MINUTE_INCREASE_PROMPT),\
		help		= STRING_TOKEN(STR_TIME_MINUTE_INCREASE_HELP),\
		flags		= RESET_REQUIRED,\
		minimum 	  = 1,\
		maximum 	  = 5,\
		step		  = 1,\
		default 	  = 1,\
	endnumeric;

#define SB_ONEOF_ECTG\
  oneof varid    = SETUP_DATA.ECTG,\
    prompt       = STRING_TOKEN (STR_ECTG),\
    help         = STRING_TOKEN (STR_ECTG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHLAN\
  oneof varid    = SETUP_DATA.PchLan,\
    prompt       = STRING_TOKEN (STR_PCH_LAN_CONTROLLER),\
    help         = STRING_TOKEN (STR_PCH_LAN_CONTROLLER_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHWAKEONLAN\
  oneof varid    = SETUP_DATA.PchWakeOnLan,\
    prompt       = STRING_TOKEN (STR_PCH_LAN_WOL_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_LAN_WOL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags =  RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#if defined (PCH_SKU) && (PCH_SKU == 1)
#define SB_ONEOF_PCHSLPLANLOW\
  oneof varid    = SETUP_DATA.SlpLanLow,\
    prompt       = STRING_TOKEN (STR_PCH_SLP_LAN_LOW_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_SLP_LAN_LOW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
#else
#define SB_ONEOF_PCHSLPLANLOW\
  oneof varid    = SETUP_DATA.SlpLanLow,\
    prompt       = STRING_TOKEN (STR_PCH_SLP_LAN_LOW_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_SLP_LAN_LOW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags =  RESET_REQUIRED, key = 0;\
  endoneof;
#endif

#define SB_ONEOF_BOARDCAPABILITY\
  oneof varid    = SETUP_DATA.BoardCapability,\
    prompt       = STRING_TOKEN (STR_BOARD_CAPABILITY),\
    help         = STRING_TOKEN (STR_BOARD_CAPABILITY_HELP),\
    option text  = STRING_TOKEN (STR_SUS_PWR_DN_ACK_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_DEEP_SX_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_DEEPSXBATTMODE\
  oneof varid    = SETUP_DATA.DeepSxBattMode,\
    prompt       = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_PROMPT),\
    help         = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_DEEPSX_S5_BATT_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_DEEPSX_S4_S5_BATT_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_DEEPSX_S3_S4_S5_BATT_STRING), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_DEEPSXMODE\
  oneof varid    = SETUP_DATA.DeepSxMode,\
    prompt       = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_PROMPT),\
    help         = STRING_TOKEN (STR_DEEP_SX_POWER_POLICIES_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_DEEPSX_S5_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_DEEPSX_S4_S5_STRING), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_GP27WAKE\
  oneof varid    = SETUP_DATA.Gp27Wake,\
    prompt       = STRING_TOKEN (STR_DEEP_SX_GP27_WAKE_PROMPT),\
    help         = STRING_TOKEN (STR_DEEP_SX_GP27_WAKE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags =  RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEWAKE\
  oneof varid    = SETUP_DATA.PcieWake,\
    prompt       = STRING_TOKEN (STR_DEEP_SX_PCIE_WAKE_PROMPT),\
    help         = STRING_TOKEN (STR_DEEP_SX_PCIE_WAKE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags =  RESET_REQUIRED, key = 0;\
  endoneof;
        // EC turbo control test mode 
#define SB_ONEOF_ECTURBOCONTROLMODE\
  oneof varid    = SETUP_DATA.ECTurboControlMode,\
    prompt       = STRING_TOKEN (STR_EC_TURBO_CONTROL_MODE),\
    help         = STRING_TOKEN (STR_EC_TURBO_CONTROL_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ACBRICKCAPACITY\
  oneof varid    = SETUP_DATA.ACBrickCapacity,\
    prompt       = STRING_TOKEN (STR_AC_BRICK_CAPACITY),\
    help         = STRING_TOKEN (STR_AC_BRICK_CAPACITY_HELP),\
    option text  = STRING_TOKEN (STR_90W_AC_BRICK), value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_65W_AC_BRICK), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_75W_AC_BRICK), value = 3, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ECPOLLINGPERIOD\
  numeric varid  = SETUP_DATA.ECPollingPeriod,\
    prompt       = STRING_TOKEN (STR_EC_POLLING_PERIOD),\
    help         = STRING_TOKEN (STR_EC_POLLING_PERIOD_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 255,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_EC_POLLING_PERIOD), value = 1, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_ECGUARDBANDVALUE\
  numeric varid  = SETUP_DATA.ECGuardBandValue,\
    prompt       = STRING_TOKEN (STR_EC_GUARD_BAND),\
    help         = STRING_TOKEN (STR_EC_GUARD_BAND_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 20,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_EC_GUARD_BAND), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_ECALGORITHMSEL\
  numeric varid  = SETUP_DATA.ECAlgorithmSel,\
    prompt       = STRING_TOKEN (STR_EC_ALGORITHM_SEL),\
    help         = STRING_TOKEN (STR_EC_ALGORITHM_SEL_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 10,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_EC_ALGORITHM_SEL), value = 1, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_ECHYBRIDPOWERBOOST\
  oneof varid    = SETUP_DATA.ECHybridPowerBoost,\
    prompt       = STRING_TOKEN(STR_HYBRID_POWER_BOOST_PROMPT),\
    help         = STRING_TOKEN(STR_HYBRID_POWER_BOOST_HELP),\
    option text  = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ECHYBRIDCURRENT\
  numeric varid  = SETUP_DATA.ECHybridCurrent,\
    prompt       = STRING_TOKEN(STR_HYBRID_CURRENT_PROMPT),\
    help         = STRING_TOKEN(STR_HYBRID_CURRENT_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 0xffff,\
    step         = 1,\
    default      = 0x1284,\
    option text  = STRING_TOKEN (STR_HYBRID_CURRENT_PROMPT), value = 0x1284, flags = MANUFACTURING; \
  endnumeric;

// EC turbo control test mode *** end

#define SB_ONEOF_PCHAZALIA\
  oneof varid    = SETUP_DATA.PchAzalia,\
    prompt       = STRING_TOKEN (STR_PCH_AZALIA_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_AZALIA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;


#define SB_ONEOF_AZALIADS\
  oneof varid    = SETUP_DATA.AzaliaDs,\
    prompt       = STRING_TOKEN (STR_AZALIA_DS_PROMPT),\
    help         = STRING_TOKEN (STR_AZALIA_DS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_AZALIAPME\
  oneof varid    = SETUP_DATA.AzaliaPme,\
    prompt       = STRING_TOKEN (STR_AZALIA_PME_PROMPT),\
    help         = STRING_TOKEN (STR_AZALIA_PME_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHDISPLAY\
  oneof varid    = SETUP_DATA.PchDisplay,\
    prompt       = STRING_TOKEN (STR_PCH_DISPLAY_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_DISPLAY_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHPCICLOCKRUN\
  oneof varid    = SETUP_DATA.PchPciClockRun,\
    prompt       = STRING_TOKEN (STR_PCH_PCICLOCKRUN_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCICLOCKRUN_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#if defined (LVC_BOARD) && (LVC_BOARD == 1)
#define SB_ONEOF_IRQMODE\
  oneof varid    = SETUP_DATA.SirqMode,\
    prompt       = STRING_TOKEN (STR_PCH_IRQMODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_IRQMODE_HELP),\
    option text  = STRING_TOKEN (STR_IRQ_QUIET), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_IRQ_CONTINUOUS), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
#else
#define SB_ONEOF_IRQMODE\
  oneof varid    = SETUP_DATA.SirqMode,\
    prompt       = STRING_TOKEN (STR_PCH_IRQMODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_IRQMODE_HELP),\
    option text  = STRING_TOKEN (STR_IRQ_QUIET), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_IRQ_CONTINUOUS), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
#endif
									//(EIP124410)>>
#define SB_ONEOF_PCHENABLECRID\
  oneof varid    = SETUP_DATA.PchEnableCrid,\
    questionid   = AUTO_ID(SB_CRID_KEY),\
    prompt       = STRING_TOKEN (STR_SB_CRID_ENABLE),\
    help         = STRING_TOKEN (STR_SB_CRID_ENABLE_HELP),\
    default      = DEFAULT_CRID_ENABLE,\
    option text  = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED | INTERACTIVE;\
    option text  = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;\
  endoneof;
									//(EIP124410)>>
#define SB_ONEOF_SMILOCK\
  oneof varid    = SETUP_DATA.SmiLock,\
    prompt       = STRING_TOKEN (STR_SB_SMI_LOCK_ENABLE),\
    help         = STRING_TOKEN (STR_SB_SMI_LOCK_ENABLE_HELP),\
    default = SMI_LOCK_ENABLE,\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_BIOSINTERFACELOCK\
  oneof varid    = SETUP_DATA.BiosInterfaceLock,\
    prompt       = STRING_TOKEN (STR_SB_BIOS_INTERFACE_LOCK_ENABLE),\
    help         = STRING_TOKEN (STR_SB_BIOS_INTERFACE_LOCK_ENABLE_HELP),\
    default = BIOS_INTERFACE_LOCKDOWN,\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_GPIOLOCK\
  oneof varid    = SETUP_DATA.GpioLock,\
    prompt       = STRING_TOKEN (STR_SB_GPIO_LOCK_ENABLE),\
    help         = STRING_TOKEN (STR_SB_GPIO_LOCK_ENABLE_HELP),\
    default = GPIO_LOCKDOWN_ENABLE,\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_BIOSLOCK\
  oneof varid    = SETUP_DATA.BiosLock,\
    prompt       = STRING_TOKEN (STR_SB_BIOS_LOCK_ENABLE),\
    help         = STRING_TOKEN (STR_SB_BIOS_LOCK_ENABLE_HELP),\
    default = BIOS_LOCK_ENABLE,\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_RTCLOCK\
  oneof varid    = SETUP_DATA.RtcLock,\
    prompt       = STRING_TOKEN (STR_SB_RTC_LOCK_ENABLE),\
    help         = STRING_TOKEN (STR_SB_RTC_LOCK_ENABLE_HELP),\
    default = RTC_LOCK_ENABLE,\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#if HPET_SUPPORT
#define SB_ONEOF_HPET\
  oneof varid    = SETUP_DATA.Hpet,\
    prompt       = STRING_TOKEN (STR_HPET_PROMPT),\
    help         = STRING_TOKEN (STR_HPET_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
#endif

#define SB_ONEOF_SLPS4ASSW\
  oneof varid    = SETUP_DATA.SlpS4AssW,\
    prompt       = STRING_TOKEN (STR_SLP_S4_ASSW_PROMPT),\
    help         = STRING_TOKEN (STR_SLP_S4_ASSW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ONE_SECOND), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_TWO_SECOND), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_THREE_SECOND), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_FOUR_SECOND), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

//ray_override / [FormalRelease_VersionRevert_DW01VR16] Last State as Default / Modified STR_POWER_ON -> STR_LAST_STATE
#define SB_ONEOF_LASTSTATE\
  oneof varid    = SETUP_DATA.LastState,\
    prompt       = STRING_TOKEN (STR_LAST_STATE_PROMPT),\
    help         = STRING_TOKEN (STR_LAST_STATE_HELP),\
    option text  = STRING_TOKEN (STR_POWER_OFF), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_POWER_ON), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_LAST_STATE), value = 2, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
  endoneof;

#define SB_ONEOF_PORT80\
  oneof varid    = SETUP_DATA.Port80Route,\
    prompt       = STRING_TOKEN (STR_PORT_80_PROMPT),\
    help         = STRING_TOKEN (STR_PORT_80_HELP),\
    option text  = STRING_TOKEN (STR_LPC_BUS), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
    option text  = STRING_TOKEN (STR_PCI_BUS), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPRECONDITION\
  oneof varid    = SETUP_DATA.UsbPrecondition,\
    prompt       = STRING_TOKEN (STR_PCH_USB_PRECONDITION_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PRECONDITION_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30MODE\
  oneof varid    = SETUP_DATA.PchUsb30Mode,\
    prompt       = STRING_TOKEN (STR_PCH_USB30_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_SMART_AUTO), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHENABLERMH1\
  oneof varid    = SETUP_DATA.PchEnableRmh1,\
    prompt       = STRING_TOKEN (STR_PCH_USB_RMH1_EN_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_RMH1_EN_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PREBOOTSUPPORT\
  oneof varid    = SETUP_DATA.PchUsb30PreBootSupport,\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PBOOT_SUPPORT_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PBOOT_SUPPORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30IDLEL1\
  oneof varid    = SETUP_DATA.PchUsb30IdleL1,\
    prompt       = STRING_TOKEN (STR_PCH_USB30_IDLEL1_SUPPORT_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_IDLEL1_SUPPORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30BTCG\
  oneof varid    = SETUP_DATA.PchUsb30Btcg,\
    prompt       = STRING_TOKEN (STR_PCH_USB30_BTCG_SUPPORT_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_BTCG_SUPPORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB20PINROUTE\
  oneof varid    = SETUP_DATA.PchUsb20PinRoute,\
    prompt       = STRING_TOKEN (STR_PCH_ROUTE_USB20_PIN_TO_HC),\
    help         = STRING_TOKEN (STR_PCH_ROUTE_USB20_PIN_TO_HC_HELP),\
    option text  = STRING_TOKEN (STR_ROUTE_PER_PIN), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_ALL_PIN_EHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_ALL_PIN_XHCI), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PINENABLE\
  oneof varid    = SETUP_DATA.PchUsb30PinEnable,\
    prompt       = STRING_TOKEN (STR_PCH_ENABLE_USB30_PIN),\
    help         = STRING_TOKEN (STR_PCH_ENABLE_USB30_PIN_HELP),\
    option text  = STRING_TOKEN (STR_SELECT_PER_PIN), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SELECT_ALL_PIN_DISABLE), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SELECT_ALL_PIN_ENABLE), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE00\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN0),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE01\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN1),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE02\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN2),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE03\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN3),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE04\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN4),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE05\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN5),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE06\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN6),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE07\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN7),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE08\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_8],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN8),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE09\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_9],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN9),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE10\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_10],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN10),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE11\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_11],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN11),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE12\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_12],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN12),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB20PERPINROUTE13\
  oneof varid    = SETUP_DATA.ManualModeUsb20PerPinRoute[OFFSET_13],\
    prompt       = STRING_TOKEN (STR_PCH_USB_20_PIN13),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_ROUTE_TO_EHCI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ROUTE_TO_XHCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB30PERPINENABLE1\
  oneof varid    = SETUP_DATA.ManualModeUsb30PerPinEnable[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_USB_30_PIN1),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB30PERPINENABLE2\
  oneof varid    = SETUP_DATA.ManualModeUsb30PerPinEnable[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_USB_30_PIN2),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB30PERPINENABLE3\
  oneof varid    = SETUP_DATA.ManualModeUsb30PerPinEnable[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_USB_30_PIN3),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB30PERPINENABLE4\
  oneof varid    = SETUP_DATA.ManualModeUsb30PerPinEnable[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_USB_30_PIN4),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB30PERPINENABLE5\
  oneof varid    = SETUP_DATA.ManualModeUsb30PerPinEnable[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_USB_30_PIN5),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_USB30PERPINENABLE6\
  oneof varid    = SETUP_DATA.ManualModeUsb30PerPinEnable[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_USB_30_PIN6),\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

//#define SB_ONEOF_XHCISTREAMS\
//  oneof varid    = SETUP_DATA.XhciStreams,\
//    prompt       = STRING_TOKEN (STR_PCH_USB_XHCISTREAMS_PROMPT),\
//    help         = STRING_TOKEN (STR_PCH_USB_XHCISTREAMS_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//  endoneof;

//#define SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_00\
//  oneof varid    = SETUP_DATA.PchUsb30HsPortSwitchable[OFFSET_0],\
//    prompt       = STRING_TOKEN (STR_PCH_USB30_HSPORT0_PROMPT),\
//    help         = STRING_TOKEN (STR_PCH_USB30_PER_HSPORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//  endoneof;

//#define SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_01\
//  oneof varid    = SETUP_DATA.PchUsb30HsPortSwitchable[OFFSET_1],\
//    prompt       = STRING_TOKEN (STR_PCH_USB30_HSPORT1_PROMPT),\
//    help         = STRING_TOKEN (STR_PCH_USB30_PER_HSPORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//  endoneof;

//#define SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_02\
//  oneof varid    = SETUP_DATA.PchUsb30HsPortSwitchable[OFFSET_2],\
//    prompt       = STRING_TOKEN (STR_PCH_USB30_HSPORT2_PROMPT),\
//    help         = STRING_TOKEN (STR_PCH_USB30_PER_HSPORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//  endoneof;

//#define SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_03\
//  oneof varid    = SETUP_DATA.PchUsb30HsPortSwitchable[OFFSET_3],\
//    prompt       = STRING_TOKEN (STR_PCH_USB30_HSPORT3_PROMPT),\
//    help         = STRING_TOKEN (STR_PCH_USB30_PER_HSPORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//  endoneof;

#define SB_ONEOF_PCHUSB20OFF0\
  oneof varid    = SETUP_DATA.PchUsb20[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_USB21_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB2_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCHUSB20OFF1\
  oneof varid    = SETUP_DATA.PchUsb20[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_USB22_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB2_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPERPORTCTL\
  oneof varid    = SETUP_DATA.PchUsbPerPortCtl,\
    prompt       = STRING_TOKEN (STR_PCH_USB_PER_PORT_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PER_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#if EHCI_CON_DISCON_WAKE_UP_SUPPORT
#define SB_ONEOF_EHCICONDISCONWAKEUP\
  oneof varid    = SETUP_DATA.EhciConDisConWakeUp,\
    prompt       = STRING_TOKEN (STR_PCH_USB_CON_DISCON_WAKEUP_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_CON_DISCON_WAKEUP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
#endif
    
#define SB_ONEOF_PCHUSBPORT00\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT0_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT01\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT1_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT02\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT2_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT03\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT3_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT04\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT4_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT05\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT5_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT06\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT6_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT07\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT7_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT08\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_8],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT8_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT09\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_9],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT9_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 

#define SB_ONEOF_PCHUSBPORT10\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_10],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT10_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT11\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_11],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT11_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT12\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_12],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT12_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSBPORT13\
  oneof varid    = SETUP_DATA.PchUsbPort[OFFSET_13],\
    prompt       = STRING_TOKEN (STR_PCH_USB_PORT13_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PORT00\
  oneof varid    = SETUP_DATA.PchUsb30Port[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PORT0_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PORT01\
  oneof varid    = SETUP_DATA.PchUsb30Port[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PORT1_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PORT02\
  oneof varid    = SETUP_DATA.PchUsb30Port[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PORT2_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PORT03\
  oneof varid    = SETUP_DATA.PchUsb30Port[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PORT3_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PORT04\
  oneof varid    = SETUP_DATA.PchUsb30Port[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PORT4_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHUSB30PORT05\
  oneof varid    = SETUP_DATA.PchUsb30Port[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_USB30_PORT5_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_USB30_PORT_DIS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIECLOCKGATING\
  oneof varid    = SETUP_DATA.PcieClockGating,\
    prompt       = STRING_TOKEN (STR_PCIE_CKG_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_CKG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ROOTPORTFUNCTIONSWAPPING\
  oneof varid    = SETUP_DATA.RootPortFunctionSwapping,\
    prompt       = STRING_TOKEN (STR_PCIE_PORT_SWAP_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_PORT_SWAP_HELP),\
    default = ROOT_PORT_FUN_SWAP_ENABLE,\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHDMIASPM\
  oneof varid    = SETUP_DATA.PchDmiAspm,\
    prompt       = STRING_TOKEN (STR_PCH_DMI_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_DMI_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHDMIEXTSYNC\
  oneof varid    = SETUP_DATA.PchDmiExtSync,\
    prompt       = STRING_TOKEN (STR_PCH_DMI_ES_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_DMI_ES_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key=0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEUSBWA\
  oneof varid    = SETUP_DATA.PcieUsbWa,\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_USB_WA_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_USB_WA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key=0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTSBDE\
  oneof varid    = SETUP_DATA.PcieRootPortSBDE,\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SBDE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SBDE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESBDEPORT\
  numeric varid  = SETUP_DATA.PcieSBDEPort,\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SBDE_PORT_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SBDE_PORT_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 7,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SBDE_PORT_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_LANRP1\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP1_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_LANRP2\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP2_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_LANRP3\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP3_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_LANRP4\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP4_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_LANRP5\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP5_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_LANRP6\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP6_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;
         
#define SB_ONEOF_LANRP7\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP7_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_LANRP8\
  text\
    help         = STRING_TOKEN (STR_EMPTY_STRING),\
    text         = STRING_TOKEN (STR_PCIE_LANRP8_PROMPT),\
    text         = STRING_TOKEN (STR_EMPTY_STRING),\
    flags        = 0,\
    key          = 0;

#define SB_ONEOF_PCIEROOTPORTEN00\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP1_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM00\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      

#define SB_ONEOF_PCIEROOTPORTL1S00\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
    
#define SB_ONEOF_PCIEROOTPORTURE00\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE00\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE00\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE00\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD00\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE00\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE00\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE00\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE00\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTHPE00\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTSPEED00\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTDNCD00\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD00\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVD00\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG00\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD00\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG00\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD00\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 4,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 4, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE00\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK00\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE00\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER00\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE00\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE00\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER00\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE00\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN01\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP2_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM01\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S01\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE01\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE01\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE01\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE01\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD01\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE01\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE01\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE01\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE01\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTHPE01\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSPEED01\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTDNCD01\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD01\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEMEMRSVD01\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG01\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD01\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG01\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD01\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 4,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 4, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE01\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK01\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE01\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER01\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE01\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE01\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER01\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE01\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN02\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP3_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM02\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S02\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE02\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE02\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE02\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE02\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD02\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE02\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE02\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE02\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE02\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTHPE02\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSPEED02\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTDNCD02\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD02\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEMEMRSVD02\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG02\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD02\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG02\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEIORSVD02\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 4,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 4, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE02\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK02\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE02\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER02\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE02\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE02\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER02\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE02\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN03\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP4_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM03\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S03\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE03\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE03\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE03\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE03\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD03\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE03\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE03\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE03\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE03\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTHPE03\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSPEED03\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTDNCD03\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD03\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEMEMRSVD03\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG03\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD03\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG03\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD03\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 4,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 4, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE03\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK03\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE03\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER03\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE03\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE03\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER03\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE03\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN04\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP5_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM04\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S04\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE04\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE04\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE04\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE04\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD04\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE04\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE04\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE04\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE04\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTHPE04\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTSPEED04\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTDNCD04\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD04\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVD04\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG04\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD04\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG04\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD04\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 4,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 4, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE04\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK04\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE04\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER04\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE04\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE04\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER04\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE04\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN05\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP6_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM05\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S05\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE05\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE05\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE05\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE05\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD05\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE05\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE05\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE05\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE05\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTHPE05\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSPEED05\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTDNCD05\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD05\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEMEMRSVD05\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG05\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD05\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG05\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD05\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 4,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 4, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE05\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK05\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE05\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER05\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE05\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE05\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER05\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE05\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN06\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP7_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM06\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S06\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE06\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE06\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE06\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE06\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD06\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE06\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE06\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE06\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE06\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTHPE06\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSPEED06\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTDNCD06\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD06\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 7,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 7, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEMEMRSVD06\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG06\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEPFMEMRSVD06\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG06\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD06\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 8,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 8, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE06\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK06\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE06\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER06\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE06\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE06\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER06\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE06\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_6],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//------------------------------------------------------------------------------------      

#define SB_ONEOF_PCIEROOTPORTEN07\
  oneof varid    = SETUP_DATA.PcieRootPortEn[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIERP8_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIERP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTASPM07\
  oneof varid    = SETUP_DATA.PcieRootPortAspm[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCIE_ASPM_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_ASPM_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 4, flags = RESET_REQUIRED, key = 0;\
  endoneof;      
    
#define SB_ONEOF_PCIEROOTPORTL1S07\
  oneof varid    = SETUP_DATA.PcieRootPortL1S[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCIE_L1S_PROMPT),\
    help         = STRING_TOKEN (STR_PCIE_L1S_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L12_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCIE_L1S_L11_L12_STRING), value = 3, flags =DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof; 
 
#define SB_ONEOF_PCIEROOTPORTURE07\
  oneof varid    = SETUP_DATA.PcieRootPortURE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_URE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_URE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTFEE07\
  oneof varid    = SETUP_DATA.PcieRootPortFEE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_FEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_FEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTNFE07\
  oneof varid    = SETUP_DATA.PcieRootPortNFE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCEE07\
  oneof varid    = SETUP_DATA.PcieRootPortCEE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CEE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CEE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTCTD07\
  oneof varid    = SETUP_DATA.PcieRootPortCTD[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_CTD_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_CTD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSFE07\
  oneof varid    = SETUP_DATA.PcieRootPortSFE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SFE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SFE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSNE07\
  oneof varid    = SETUP_DATA.PcieRootPortSNE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSCE07\
  oneof varid    = SETUP_DATA.PcieRootPortSCE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTPMCE07\
  oneof varid    = SETUP_DATA.PcieRootPortPMCE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PMCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PMCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTHPE07\
  oneof varid    = SETUP_DATA.PcieRootPortHPE[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_HPE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_HPE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    
#define SB_ONEOF_PCIEROOTPORTSPEED07\
  oneof varid    = SETUP_DATA.PcieRootPortSpeed[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SPEED_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_PCH_PCIE_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIEROOTPORTDNCD07\
  oneof varid    = SETUP_DATA.PcieRPDetectNonComplaint[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_COMPLIANCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTRABUSRSVD07\
  numeric varid  = SETUP_DATA.ExtraBusRsvd[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_EXTRA_BUS_RESERVED,\
    step         = 1,\
    default      = 0,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;
      
#define SB_ONEOF_PCIEMEMRSVD07\
  numeric varid  = SETUP_DATA.PcieMemRsvd[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEMEMRSVDALIG07\
  numeric varid  = SETUP_DATA.PcieMemRsvdalig[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVD07\
  numeric varid  = SETUP_DATA.PciePFMemRsvd[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = MAX_PCIE_PF_MEM_RESERVED,\
    step         = 1,\
    default      = 10,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_PROMPT), value = 10, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEPFMEMRSVDALIG07\
  numeric varid  = SETUP_DATA.PciePFMemRsvdalig[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 1,\
    maximum      = 31,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_PF_RMEM_ALIG_PROMPT), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIEIORSVD07\
  numeric varid  = SETUP_DATA.PcieIoRsvd[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = MAX_PCIE_IO_RESERVED,\
    step         = 4,\
    default      = 8,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT), value = 8, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIELTRENABLE07\
  oneof varid    = SETUP_DATA.PcieLtrEnable[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIELTRCONFIGLOCK07\
  oneof varid    = SETUP_DATA.PcieLtrConfigLock[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_LTR_CONFIGLOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE07\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER07\
  oneof varid    = SETUP_DATA.PcieSnoopLatencyOverrideMultiplier[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE07\
  numeric varid  = SETUP_DATA.PcieSnoopLatencyOverrideValue[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1020,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE07\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_MANUAL), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER07\
  oneof varid    = SETUP_DATA.PcieNonSnoopLatencyOverrideMultiplier[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_MULITIPLIER_HELP),\
    option text  = STRING_TOKEN (STR_1_NS), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32_NS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1024_NS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_32768_NS), value = 3, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_1048576_NS), value = 4, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_33554432_NS), value = 5, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE07\
  numeric varid  = SETUP_DATA.PcieNonSnoopLatencyOverrideValue[OFFSET_7],\
    prompt       = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_HELP),\
    flags        = RESET_REQUIRED,\
    minimum      = 0,\
    maximum      = 1023,\
    step         = 1,\
    default      = 60,\
    option text  = STRING_TOKEN (STR_PCH_PCIE_NON_SNOOP_LATENCY_OVERRIDE_VALUE_PROMPT), value = 60, flags = MANUFACTURING; \
  endnumeric;
//----------------------------------------------------------------------------
//                ADVANCED - Atapi Configuration Form
//----------------------------------------------------------------------------

#define SB_ONEOF_AUTOTHERMALREPORT\
  checkbox varid = SETUP_DATA.AutoThermalReport,\
    prompt       = STRING_TOKEN (STR_THERMAL_REPORTING_PROMPT),\
    help         = STRING_TOKEN (STR_THERMAL_REPORTING_HELP),\
    flags        = 1 | RESET_REQUIRED | MANUFACTURING,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_CRITICALTHERMALTRIPPOINT\
  oneof varid    = SETUP_DATA.CriticalThermalTripPoint,\
    prompt       = STRING_TOKEN (STR_ACPI_CRITICAL_THERMAL_TRIP_POINT),\
    help         = STRING_TOKEN (STR_ACPI_CRITICAL_THERMAL_TRIP_POINT_HELP),\
    option text  = STRING_TOKEN (STR_POR), value = 105, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
    option text  = STRING_TOKEN (STR_15_C), value = 15, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_23_C), value = 23, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_31_C), value = 31, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_39_C), value = 39, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_47_C), value = 47, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_55_C), value = 55, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_63_C), value = 63, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_71_C), value = 71, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_79_C), value = 79, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_87_C), value = 87, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_95_C), value = 95, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_103_C), value = 103, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_111_C), value = 111, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_119_C), value = 119, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_127_C), value = 127, flags = RESET_REQUIRED, key = 0;\
  endoneof; 

#define SB_ONEOF_AC0TRIPPOINT\
  oneof varid    = SETUP_DATA.Ac0TripPoint,\
    prompt       = STRING_TOKEN (STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_HIGH),\
    help         = STRING_TOKEN (STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_HELP_HIGH),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 127, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_15_C), value = 15, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_23_C), value = 23, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_31_C), value = 31, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_39_C), value = 39, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_47_C), value = 47, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_55_C), value = 55, flags = RESET_REQUIRED ,key = 0;\
    option text  = STRING_TOKEN (STR_63_C), value = 63, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_71_C), value = 71, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
    option text  = STRING_TOKEN (STR_79_C), value = 79, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_87_C), value = 87, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_95_C), value = 95, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_103_C), value = 103, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_111_C), value = 111, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_119_C), value = 119, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_AC0FANSPEED\
  numeric varid  = SETUP_DATA.Ac0FanSpeed,\
    prompt       = STRING_TOKEN (STR_AC0_FAN_SPEED),\
    help         = STRING_TOKEN (STR_AC0_FAN_SPEED_HELP),\
    minimum      = 0,\
    maximum      = 100,\
    step         = 1,\
    default      = 100,\
    option text  = STRING_TOKEN (STR_AC0_FAN_SPEED), value = 100, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_AC1TRIPPOINT\
  oneof varid    = SETUP_DATA.Ac1TripPoint,\
    prompt       = STRING_TOKEN (STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_LOW),\
    help         = STRING_TOKEN (STR_ACPI_ACTIVE_THERMAL_TRIP_POINT_HELP_LOW),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 127, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_15_C), value = 15, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_23_C), value = 23, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_31_C), value = 31, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_39_C), value = 39, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_47_C), value = 47, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_55_C), value = 55, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
    option text  = STRING_TOKEN (STR_63_C), value = 63, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_71_C), value = 71, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_79_C), value = 79, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_87_C), value = 87, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_95_C), value = 95, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_103_C), value = 103, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_111_C), value = 111, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_119_C), value = 119, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_AC1FANSPEED\
  numeric varid  = SETUP_DATA.Ac1FanSpeed,\
    prompt       = STRING_TOKEN (STR_AC1_FAN_SPEED),\
    help         = STRING_TOKEN (STR_AC1_FAN_SPEED_HELP),\
    minimum      = 0,\
    maximum      = 100,\
    step         = 1,\
    default      = 75,\
    option text  = STRING_TOKEN (STR_AC1_FAN_SPEED), value = 75, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PASSIVETHERMALTRIPPOINT\
  oneof varid    = SETUP_DATA.PassiveThermalTripPoint,\
    prompt       = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT),\
    help         = STRING_TOKEN (STR_ACPI_PASSIVE_THERMAL_TRIP_POINT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 127, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_15_C), value = 15, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_23_C), value = 23, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_31_C), value = 31, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_39_C), value = 39, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_47_C), value = 47, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_55_C), value = 55, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_63_C), value = 63, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_71_C), value = 71, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_79_C), value = 79, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_87_C), value = 87, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_95_C), value = 95, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
    option text  = STRING_TOKEN (STR_103_C), value = 103, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_111_C), value = 111, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_119_C), value = 119, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PASSIVETC1VALUE\
  numeric varid  = SETUP_DATA.PassiveTc1Value,\
    prompt       = STRING_TOKEN (STR_ACPI_PASSIVE_TC1_VALUE),\
    help         = STRING_TOKEN (STR_ACPI_PASSIVE_TC1_VALUE_HELP),\
    minimum      = 1,\
    maximum      = 16,\
    step         = 1,\
    default      = 1,\
    option text  = STRING_TOKEN (STR_ACPI_PASSIVE_TC1_VALUE), value = 1, flags = MANUFACTURING; \
  endnumeric;
    
#define SB_ONEOF_PASSIVETC2VALUE\
  numeric varid  = SETUP_DATA.PassiveTc2Value,\
    prompt       = STRING_TOKEN (STR_ACPI_PASSIVE_TC2_VALUE),\
    help         = STRING_TOKEN (STR_ACPI_PASSIVE_TC2_VALUE_HELP),\
    minimum      = 1,\
    maximum      = 16,\
    step         = 1,\
    default      = 5,\
    option text  = STRING_TOKEN (STR_ACPI_PASSIVE_TC2_VALUE), value = 5, flags = MANUFACTURING; \
  endnumeric;
    
#define SB_ONEOF_PASSIVETSPVALUE\
  numeric varid  = SETUP_DATA.PassiveTspValue,\
    prompt       = STRING_TOKEN (STR_ACPI_PASSIVE_TSP_VALUE),\
    help         = STRING_TOKEN (STR_ACPI_PASSIVE_TSP_VALUE_HELP),\
     minimum     = 2,\
     maximum     = 32,\
     step        = 2,\
     default     = 10,\
     option text  = STRING_TOKEN (STR_ACPI_PASSIVE_TSP_VALUE), value = 10, flags = MANUFACTURING; \
  endnumeric;

#if defined   iME_SUPPORT && iME_SUPPORT
#define SB_ONEOF_TRENABLED\
  checkbox varid = SETUP_DATA.TrEnabled,\
    prompt       = STRING_TOKEN (STR_ME_TR_ENABLED_PROMPT),\
    help         = STRING_TOKEN (STR_ME_TR_ENABLED_HELP),\
    flags        = 0 | MANUFACTURING,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_SMBUSECMSGLEN\
  oneof varid    = SETUP_DATA.SMBusECMsgLen,\
    prompt       = STRING_TOKEN (STR_TR_SMBUS_EC_LEN_PROMPT),\
    help         = STRING_TOKEN (STR_TR_SMBUS_EC_LEN_HELP),\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_1_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_2_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_5_STRING), value = 5, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_9_STRING), value = 9, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_10_STRING), value = 10, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_14_STRING), value = 14, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SMBUS_EC_MSG_LEN_20_STRING), value = 20, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SMBUSECMSGPEC\
  checkbox varid = SETUP_DATA.SMBusECMsgPEC,\
    prompt       = STRING_TOKEN (STR_TR_SMBUS_EC_PEC_PROMPT),\
    help         = STRING_TOKEN (STR_TR_SMBUS_EC_PEC_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_TSONDIMM1\
  checkbox varid = SETUP_DATA.TsOnDimm1,\
    prompt       = STRING_TOKEN (STR_DIMM1_TS_READ),\
    help         = STRING_TOKEN (STR_DIMM1_TS_READ_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_TSONDIMM2\
  checkbox varid = SETUP_DATA.TsOnDimm2,\
    prompt       = STRING_TOKEN (STR_DIMM2_TS_READ),\
    help         = STRING_TOKEN (STR_DIMM2_TS_READ_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_TSONDIMM3\
  checkbox varid = SETUP_DATA.TsOnDimm3,\
    prompt       = STRING_TOKEN (STR_DIMM3_TS_READ),\
    help         = STRING_TOKEN (STR_DIMM3_TS_READ_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_TSONDIMM4\
  checkbox varid = SETUP_DATA.TsOnDimm4,\
    prompt       = STRING_TOKEN (STR_DIMM4_TS_READ),\
    help         = STRING_TOKEN (STR_DIMM4_TS_READ_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#endif


#define SB_ONEOF_THERMALDEVICEENABLE\
  checkbox varid = SETUP_DATA.ThermalDeviceEnable,\
    prompt       = STRING_TOKEN (STR_THERMAL_DEVICE_ENABLE),\
    help         = STRING_TOKEN (STR_THERMAL_DEVICE_ENABLE_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_PCHCROSSTHROTTLING\
  checkbox varid = SETUP_DATA.PchCrossThrottling,\
    prompt       = STRING_TOKEN (STR_PCH_CROSS_THROTTLING_ENABLE),\
    help         = STRING_TOKEN (STR_PCH_CROSS_THROTTLING_ENABLE_HELP),\
    flags        = 0 | RESET_REQUIRED,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_PCHTEMPREADENABLE\
  checkbox varid = SETUP_DATA.PCHTempReadEnable,\
    prompt       = STRING_TOKEN (STR_PCH_TEMP_READ),\
    help         = STRING_TOKEN (STR_PCH_TEMP_READ_HELP),\
    flags        = 1 | RESET_REQUIRED | MANUFACTURING,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_CPUENERGYREADENABLE\
  checkbox varid = SETUP_DATA.CPUEnergyReadEnable,\
    prompt       = STRING_TOKEN (STR_CPU_ENERGY_READ),\
    help         = STRING_TOKEN (STR_CPU_ENERGY_READ_HELP),\
    flags        = 1 | RESET_REQUIRED | MANUFACTURING,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_CPUTEMPREADENABLE\
  checkbox varid = SETUP_DATA.CPUTempReadEnable,\
    prompt       = STRING_TOKEN (STR_CPU_TEMP_READ),\
    help         = STRING_TOKEN (STR_CPU_TEMP_READ_HELP),\
    flags        = 1 | RESET_REQUIRED | MANUFACTURING,\
    key          = 0,\
  endcheckbox;

#define SB_ONEOF_ALERTENABLELOCK\
  oneof varid    = SETUP_DATA.AlertEnableLock,\
    prompt       = STRING_TOKEN (STR_ALERT_ENABLE_LOCK),\
    help         = STRING_TOKEN (STR_ALERT_ENABLE_LOCK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHALERT\
  oneof varid    = SETUP_DATA.PchAlert,\
    prompt       = STRING_TOKEN (STR_PCH_ALERT),\
    help         = STRING_TOKEN (STR_PCH_ALERT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
  
#define SB_ONEOF_DIMMALERT\
  oneof varid    = SETUP_DATA.DimmAlert,\
    prompt       = STRING_TOKEN (STR_DIMM_ALERT),\
    help         = STRING_TOKEN (STR_DIMM_ALERT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_PCHHOTLEVEL\
  numeric varid  = SETUP_DATA.PchHotLevel,\
    prompt       = STRING_TOKEN (STR_PCH_HOT_LEVEL),\
    help         = STRING_TOKEN (STR_STR_PCH_HOT_LVL_HELP),\
    minimum      = 0,\
    maximum      = 127,\
    step         = 1,\
    default      = 0, \
    option text  = STRING_TOKEN (STR_PCH_HOT_LEVEL), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_PCHSATA\
  oneof varid    = SETUP_DATA.PchSata,\
    prompt       = STRING_TOKEN (STR_PCH_SATA_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAINTERFACEMODE\
  oneof varid    = SETUP_DATA.SataInterfaceMode,\
    prompt       = STRING_TOKEN (STR_SATA_MODE_SELECTION_PROMPT),\
    help         = STRING_TOKEN (STR_SATA_MODE_SELECTION_HELP),\
    option text  = STRING_TOKEN (STR_SATA_IDE), value = SATA_MODE_IDE, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_AHCI), value = SATA_MODE_AHCI, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_RAID), value = SATA_MODE_RAID, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ULTSATAINTERFACEMODE\
  oneof varid    = SETUP_DATA.ULTSataInterfaceMode,\
    prompt       = STRING_TOKEN (STR_SATA_MODE_SELECTION_PROMPT),\
    help         = STRING_TOKEN (STR_SATA_MODE_SELECTION_HELP),\
    option text  = STRING_TOKEN (STR_SATA_AHCI), value = SATA_MODE_AHCI, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_RAID), value = SATA_MODE_RAID, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATATESTMODE\
  oneof varid    = SETUP_DATA.SataTestMode,\
    prompt       = STRING_TOKEN (STR_SATA_TEST_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_SATA_TEST_MODE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#if SataDriver_SUPPORT
#define SB_ONEOF_SATARAIDROM\
  oneof varid    = SETUP_DATA.SataRaidRom,\
    prompt       = STRING_TOKEN (STR_SATA_ROM_PROMPT),\
    help         = STRING_TOKEN (STR_SATA_ROM_HELP),\
    option text  = STRING_TOKEN (STR_SATA_LEGACYROM), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_UEFIRAID), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_BOTH), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;
#endif

#define SB_ONEOF_SALPSUPPORT\
  oneof varid    = SETUP_DATA.SalpSupport,\
    prompt       = STRING_TOKEN (STR_SATA_AHCI_SALP),\
    help         = STRING_TOKEN (STR_SATA_AHCI_SALP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATACONTROLLERSPEED\
  oneof varid    = SETUP_DATA.SataControllerSpeed,\
    prompt       = STRING_TOKEN (STR_SATA_SPEED),\
    help         = STRING_TOKEN (STR_SATA_SPEED_HELP),\
    option text  = STRING_TOKEN (STR_SATA_SPEED_DEFAULT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_SPEED_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_SPEED_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_SPEED_GEN3), value = 3, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAALTERNATEID\
  oneof varid    = SETUP_DATA.SataAlternateId,\
    prompt       = STRING_TOKEN (STR_SATA_ALTERNATE_ID_PROMPT),\
    help         = STRING_TOKEN (STR_SATA_ALTERNATE_ID_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAPORT0\
  oneof varid    = SETUP_DATA.SataPort[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_PORT_0),\
    help         = STRING_TOKEN (STR_SATA_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHOTPLUG0\
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG),\
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAMECHANICALSW0\
  oneof varid    = SETUP_DATA.SataMechanicalSw[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_MECHANICAL_SW),\
    help         = STRING_TOKEN (STR_SATA_MECHANICAL_SW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTERNALSATA0\
  oneof varid    = SETUP_DATA.ExternalSata[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_EXTERNAL_SATA),\
    help         = STRING_TOKEN (STR_EXTERNAL_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SOLIDSTATEDRIVE0\
  oneof varid    = SETUP_DATA.SolidStateDrive[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_DEVICE_TYPE),\
    help         = STRING_TOKEN (STR_SATA_DEVICE_TYPE_HELP),\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_HDD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_SSD), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATASPINUP0\
  oneof varid    = SETUP_DATA.SataSpinUp[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_SPIN_UP),\
    help         = STRING_TOKEN (STR_SATA_SPIN_UP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADEVSLP0\
  oneof varid    = SETUP_DATA.SataDevSlp[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_DEV_SLP),\
    help         = STRING_TOKEN (STR_SATA_DEV_SLP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAENABLEDITOCONFIGP0\
  oneof varid    = SETUP_DATA.SataEnableDitoConfig[OFFSET_0],\
    prompt       = STRING_TOKEN (STR_SATA_DITO_CONF),\
    help         = STRING_TOKEN (STR_SATA_DITO_CONF_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADITOVALP0\
  numeric varid = SETUP_DATA.SataDitoVal[OFFSET_0],\
    prompt      = STRING_TOKEN (STR_SATA_DITOVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DITOVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 1000,\
    step        = 1,\
    default     = 625,\
    option text = STRING_TOKEN (STR_SATA_DITOVAL_CONF), value = 625, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATADMVALP0\
  numeric varid = SETUP_DATA.SataDmVal[OFFSET_0],\
    prompt      = STRING_TOKEN (STR_SATA_DMVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DMVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 15,\
    step        = 1,\
    default     = 15,\
    option text = STRING_TOKEN (STR_SATA_DMVAL_CONF), value = 15, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATAPORT1\
  oneof varid    = SETUP_DATA.SataPort[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_PORT_1),\
    help         = STRING_TOKEN (STR_SATA_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHOTPLUG1\
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG),\
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAMECHANICALSW1\
  oneof varid    = SETUP_DATA.SataMechanicalSw[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_MECHANICAL_SW),\
    help         = STRING_TOKEN (STR_SATA_MECHANICAL_SW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTERNALSATA1\
  oneof varid    = SETUP_DATA.ExternalSata[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_EXTERNAL_SATA),\
    help         = STRING_TOKEN (STR_EXTERNAL_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SOLIDSTATEDRIVE1\
  oneof varid    = SETUP_DATA.SolidStateDrive[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_DEVICE_TYPE),\
    help         = STRING_TOKEN (STR_SATA_DEVICE_TYPE_HELP),\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_HDD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_SSD), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATASPINUP1\
  oneof varid    = SETUP_DATA.SataSpinUp[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_SPIN_UP),\
    help         = STRING_TOKEN (STR_SATA_SPIN_UP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADEVSLP1\
  oneof varid    = SETUP_DATA.SataDevSlp[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_DEV_SLP),\
    help         = STRING_TOKEN (STR_SATA_DEV_SLP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAENABLEDITOCONFIGP1\
  oneof varid    = SETUP_DATA.SataEnableDitoConfig[OFFSET_1],\
    prompt       = STRING_TOKEN (STR_SATA_DITO_CONF),\
    help         = STRING_TOKEN (STR_SATA_DITO_CONF_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADITOVALP1\
  numeric varid = SETUP_DATA.SataDitoVal[OFFSET_1],\
    prompt      = STRING_TOKEN (STR_SATA_DITOVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DITOVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 1000,\
    step        = 1,\
    default     = 625,\
    option text = STRING_TOKEN (STR_SATA_DITOVAL_CONF), value = 625, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATADMVALP1\
  numeric varid = SETUP_DATA.SataDmVal[OFFSET_1],\
    prompt      = STRING_TOKEN (STR_SATA_DMVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DMVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 15,\
    step        = 1,\
    default     = 15,\
    option text = STRING_TOKEN (STR_SATA_DMVAL_CONF), value = 15, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATAPORT2\
  oneof varid    = SETUP_DATA.SataPort[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_PORT_2),\
    help         = STRING_TOKEN (STR_SATA_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHOTPLUG2\
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG),\
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAMECHANICALSW2\
  oneof varid    = SETUP_DATA.SataMechanicalSw[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_MECHANICAL_SW),\
    help         = STRING_TOKEN (STR_SATA_MECHANICAL_SW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTERNALSATA2\
  oneof varid    = SETUP_DATA.ExternalSata[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_EXTERNAL_SATA),\
    help         = STRING_TOKEN (STR_EXTERNAL_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SOLIDSTATEDRIVE2\
  oneof varid    = SETUP_DATA.SolidStateDrive[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_DEVICE_TYPE),\
    help         = STRING_TOKEN (STR_SATA_DEVICE_TYPE_HELP),\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_HDD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_SSD), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATASPINUP2\
  oneof varid    = SETUP_DATA.SataSpinUp[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_SPIN_UP),\
    help         = STRING_TOKEN (STR_SATA_SPIN_UP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADEVSLP2\
  oneof varid    = SETUP_DATA.SataDevSlp[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_DEV_SLP),\
    help         = STRING_TOKEN (STR_SATA_DEV_SLP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAENABLEDITOCONFIGP2\
  oneof varid    = SETUP_DATA.SataEnableDitoConfig[OFFSET_2],\
    prompt       = STRING_TOKEN (STR_SATA_DITO_CONF),\
    help         = STRING_TOKEN (STR_SATA_DITO_CONF_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADITOVALP2\
  numeric varid = SETUP_DATA.SataDitoVal[OFFSET_2],\
    prompt      = STRING_TOKEN (STR_SATA_DITOVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DITOVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 1000,\
    step        = 1,\
    default     = 625,\
    option text = STRING_TOKEN (STR_SATA_DITOVAL_CONF), value = 625, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATADMVALP2\
  numeric varid = SETUP_DATA.SataDmVal[OFFSET_2],\
    prompt      = STRING_TOKEN (STR_SATA_DMVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DMVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 15,\
    step        = 1,\
    default     = 15,\
    option text = STRING_TOKEN (STR_SATA_DMVAL_CONF), value = 15, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATAPORT3\
  oneof varid    = SETUP_DATA.SataPort[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_PORT_3),\
    help         = STRING_TOKEN (STR_SATA_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHOTPLUG3\
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG),\
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAMECHANICALSW3\
  oneof varid    = SETUP_DATA.SataMechanicalSw[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_MECHANICAL_SW),\
    help         = STRING_TOKEN (STR_SATA_MECHANICAL_SW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTERNALSATA3\
  oneof varid    = SETUP_DATA.ExternalSata[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_EXTERNAL_SATA),\
    help         = STRING_TOKEN (STR_EXTERNAL_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SOLIDSTATEDRIVE3\
  oneof varid    = SETUP_DATA.SolidStateDrive[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_DEVICE_TYPE),\
    help         = STRING_TOKEN (STR_SATA_DEVICE_TYPE_HELP),\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_HDD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_SSD), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATASPINUP3\
  oneof varid    = SETUP_DATA.SataSpinUp[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_SPIN_UP),\
    help         = STRING_TOKEN (STR_SATA_SPIN_UP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADEVSLP3\
  oneof varid    = SETUP_DATA.SataDevSlp[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_DEV_SLP),\
    help         = STRING_TOKEN (STR_SATA_DEV_SLP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAENABLEDITOCONFIGP3\
  oneof varid    = SETUP_DATA.SataEnableDitoConfig[OFFSET_3],\
    prompt       = STRING_TOKEN (STR_SATA_DITO_CONF),\
    help         = STRING_TOKEN (STR_SATA_DITO_CONF_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATADITOVALP3\
  numeric varid = SETUP_DATA.SataDitoVal[OFFSET_3],\
    prompt      = STRING_TOKEN (STR_SATA_DITOVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DITOVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 1000,\
    step        = 1,\
    default     = 625,\
    option text = STRING_TOKEN (STR_SATA_DITOVAL_CONF), value = 625, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATADMVALP3\
  numeric varid = SETUP_DATA.SataDmVal[OFFSET_3],\
    prompt      = STRING_TOKEN (STR_SATA_DMVAL_CONF),\
    help        = STRING_TOKEN (STR_SATA_DMVAL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 15,\
    step        = 1,\
    default     = 15,\
    option text = STRING_TOKEN (STR_SATA_DMVAL_CONF), value = 15, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SATAPORT4\
  oneof varid    = SETUP_DATA.SataPort[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_SATA_PORT_4),\
    help         = STRING_TOKEN (STR_SATA_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHOTPLUG4\
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG),\
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAMECHANICALSW4\
  oneof varid    = SETUP_DATA.SataMechanicalSw[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_SATA_MECHANICAL_SW),\
    help         = STRING_TOKEN (STR_SATA_MECHANICAL_SW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTERNALSATA4\
  oneof varid    = SETUP_DATA.ExternalSata[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_EXTERNAL_SATA),\
    help         = STRING_TOKEN (STR_EXTERNAL_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
      
#define SB_ONEOF_SOLIDSTATEDRIVE4\
  oneof varid    = SETUP_DATA.SolidStateDrive[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_SATA_DEVICE_TYPE),\
    help         = STRING_TOKEN (STR_SATA_DEVICE_TYPE_HELP),\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_HDD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_SSD), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATASPINUP4\
  oneof varid    = SETUP_DATA.SataSpinUp[OFFSET_4],\
    prompt       = STRING_TOKEN (STR_SATA_SPIN_UP),\
    help         = STRING_TOKEN (STR_SATA_SPIN_UP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAPORT5\
  oneof varid    = SETUP_DATA.SataPort[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_SATA_PORT_5),\
    help         = STRING_TOKEN (STR_SATA_PORT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHOTPLUG5\
  oneof varid    = SETUP_DATA.SataHotPlug[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_SATA_HOTPLUG),\
    help         = STRING_TOKEN (STR_SATA_PORT_HOTPLUG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAMECHANICALSW5\
  oneof varid    = SETUP_DATA.SataMechanicalSw[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_SATA_MECHANICAL_SW),\
    help         = STRING_TOKEN (STR_SATA_MECHANICAL_SW_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EXTERNALSATA5\
  oneof varid    = SETUP_DATA.ExternalSata[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_EXTERNAL_SATA),\
    help         = STRING_TOKEN (STR_EXTERNAL_SATA_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SOLIDSTATEDRIVE5\
  oneof varid    = SETUP_DATA.SolidStateDrive[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_SATA_DEVICE_TYPE),\
    help         = STRING_TOKEN (STR_SATA_DEVICE_TYPE_HELP),\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_HDD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_SATA_DEVICE_SSD), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATASPINUP5\
  oneof varid    = SETUP_DATA.SataSpinUp[OFFSET_5],\
    prompt       = STRING_TOKEN (STR_SATA_SPIN_UP),\
    help         = STRING_TOKEN (STR_SATA_SPIN_UP_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDR0\
  oneof varid    = SETUP_DATA.SataRaidR0,\
    prompt       = STRING_TOKEN (STR_PCH_RAID0_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_RAID0_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDR1\
  oneof varid    = SETUP_DATA.SataRaidR1,\
    prompt       = STRING_TOKEN (STR_PCH_RAID1_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_RAID1_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDR10\
  oneof varid    = SETUP_DATA.SataRaidR10,\
    prompt       = STRING_TOKEN (STR_PCH_RAID10_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_RAID10_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDR5\
  oneof varid    = SETUP_DATA.SataRaidR5,\
    prompt       = STRING_TOKEN (STR_PCH_RAID5_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_RAID5_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDIRRT\
  oneof varid    = SETUP_DATA.SataRaidIrrt,\
    prompt       = STRING_TOKEN (STR_PCH_IRRT_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_IRRT_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDOUB\
  oneof varid    = SETUP_DATA.SataRaidOub,\
    prompt       = STRING_TOKEN (STR_PCH_OUB_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_OUB_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATAHDDLK\
  oneof varid    = SETUP_DATA.SataHddlk,\
    prompt       = STRING_TOKEN (STR_PCH_HDDLK_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_HDDLK_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATALEDL\
  oneof varid    = SETUP_DATA.SataLedl,\
    prompt       = STRING_TOKEN (STR_PCH_LEDL_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_LEDL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SATARAIDIOOE\
  oneof varid    = SETUP_DATA.SataRaidIooe,\
    prompt       = STRING_TOKEN (STR_PCH_IOOE_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_IOOE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SMARTSTORAGE\
  oneof varid    = SETUP_DATA.SmartStorage,\
    prompt       = STRING_TOKEN (STR_PCH_SMARTS_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_SMARTS_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_OROMUIDELAY\
  oneof varid    = SETUP_DATA.OromUiDelay,\
    prompt       = STRING_TOKEN (STR_PCH_OROM_DELAL_PROMPT),\
    help         = STRING_TOKEN (STR_PCH_OROM_DELAL_HELP),\
    option text  = STRING_TOKEN (STR_2_SECS_DELAY_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_4_SECS_DELAY_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_6_SECS_DELAY_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_8_SECS_DELAY_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
  endoneof;
//----------------------------------------------------------------------------
//                PCH LP LPSS
//----------------------------------------------------------------------------

#define SB_ONEOF_LPSSDMAENABLE\
  oneof varid    = SETUP_DATA.LpssDmaEnable,\
    prompt       = STRING_TOKEN (STR_LPSS_DMA_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_AUTO_BY_OS), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSI2C0ENABLE\
  oneof varid    = SETUP_DATA.LpssI2c0Enable,\
    prompt       = STRING_TOKEN (STR_LPSS_I2C0_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSI2C1ENABLE\
  oneof varid    = SETUP_DATA.LpssI2c1Enable,\
    prompt       = STRING_TOKEN (STR_LPSS_I2C1_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSSPI0ENABLE\
  oneof varid    = SETUP_DATA.LpssSpi0Enable,\
    prompt       = STRING_TOKEN (STR_LPSS_SPI0_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSSPI1ENABLE\
  oneof varid    = SETUP_DATA.LpssSpi1Enable,\
    prompt       = STRING_TOKEN (STR_LPSS_SPI1_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSUART0ENABLE\
  oneof varid    = SETUP_DATA.LpssUart0Enable,\
    prompt       = STRING_TOKEN (STR_LPSS_UART0_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSUART1ENABLE\
  oneof varid    = SETUP_DATA.LpssUart1Enable,\
    prompt       = STRING_TOKEN (STR_LPSS_UART1_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSSDIOENABLE\
  oneof varid    = SETUP_DATA.LpssSdioEnable,\
    prompt       = STRING_TOKEN (STR_LPSS_SDIO_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_DEVICE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSMODE\
  oneof varid    = SETUP_DATA.LpssMode,\
    prompt       = STRING_TOKEN (STR_LPSS_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_MODE_HELP),\
    option text  = STRING_TOKEN (STR_LPSS_ADSP_MODE_ACPI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_LPSS_ADSP_MODE_PCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSINTMODE\
  oneof varid    = SETUP_DATA.LpssIntMode,\
    prompt       = STRING_TOKEN (STR_LPSS_INTMODE_PROMPT),\
    help         = STRING_TOKEN (STR_LPSS_MODE_HELP),\
    option text  = STRING_TOKEN (STR_LPSS_ADSP_MODE_ACPI), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_LPSS_ADSP_MODE_PCI), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSI2C0VOLSELECT\
  oneof varid    = SETUP_DATA.I2C0VoltageSelect,\
    prompt       = STRING_TOKEN (STR_I2C_VOL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_VOL_HELP),\
    option text  = STRING_TOKEN (STR_I2C_VOL_33V), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_I2C_VOL_18V), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_LPSSI2C1VOLSELECT\
  oneof varid    = SETUP_DATA.I2C1VoltageSelect,\
    prompt       = STRING_TOKEN (STR_I2C_VOL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_VOL_HELP),\
    option text  = STRING_TOKEN (STR_I2C_VOL_33V), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_I2C_VOL_18V), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_SENSORHUB\
  oneof varid    = SETUP_DATA.SensorHub,\
    prompt       = STRING_TOKEN (STR_I2C_SEN_HUB_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_SEN_HUB_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_TPD4\
  oneof varid    = SETUP_DATA.TPD4,\
    prompt       = STRING_TOKEN (STR_I2C_TPD4_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_TPD4_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

    #if BHB_BOARD == 1
#define SB_ONEOF_ATMELTPL\
  oneof varid    = SETUP_DATA.AtmelTPL,\
    prompt       = STRING_TOKEN (STR_I2C_ATMTPL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_ATMTPL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    #else //BHB_BOARD == 0
#define SB_ONEOF_ATMELTPL\
  oneof varid    = SETUP_DATA.AtmelTPL,\
    prompt       = STRING_TOKEN (STR_I2C_ATMTPL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_ATMTPL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    #endif  //BHB_BOARD

#define SB_ONEOF_ELANTPL\
  oneof varid    = SETUP_DATA.ElanTPL,\
    prompt       = STRING_TOKEN (STR_I2C_ELATPL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_ELATPL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ELANTPD\
  oneof varid    = SETUP_DATA.ElanTPD,\
    prompt       = STRING_TOKEN (STR_I2C_ELANTPD_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_ELANTPD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

    #if BHB_BOARD == 1
#define SB_ONEOF_SYNATPD\
  oneof varid    = SETUP_DATA.SynaTPD,\
    prompt       = STRING_TOKEN (STR_I2C_SYNATPD_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_SYNATPD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags =  RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;
    #else //BHB_BOARD == 0
#define SB_ONEOF_SYNATPD\
  oneof varid    = SETUP_DATA.SynaTPD,\
    prompt       = STRING_TOKEN (STR_I2C_SYNATPD_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_SYNATPD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;
    #endif  //BHB_BOARD

#define SB_ONEOF_NTRITPL\
  oneof varid    = SETUP_DATA.NtriTPL,\
    prompt       = STRING_TOKEN (STR_I2C_NTRITPL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_NTRITPL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_EETITPL\
  oneof varid    = SETUP_DATA.EetiTPL,\
    prompt       = STRING_TOKEN (STR_I2C_EETITPL_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_EETITPL_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ALPSTPD\
  oneof varid    = SETUP_DATA.AlpsTPD,\
    prompt       = STRING_TOKEN (STR_I2C_ALPSTPD_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_ALPSTPD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_CYPRTPD\
  oneof varid    = SETUP_DATA.CyprTPD,\
    prompt       = STRING_TOKEN (STR_I2C_CYPRTPD_PROMPT),\
    help         = STRING_TOKEN (STR_I2C_CYPRTPD_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_BLUETOOTH0\
  oneof varid    = SETUP_DATA.Bluetooth0,\
    prompt       = STRING_TOKEN (STR_UART_BLUETOOTH_PROMPT),\
    help         = STRING_TOKEN (STR_UART_BLUETOOTH_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_BLUETOOTH1\
  oneof varid    = SETUP_DATA.Bluetooth1,\
    prompt       = STRING_TOKEN (STR_UART_BLUETOOTH_PROMPT),\
    help         = STRING_TOKEN (STR_UART_BLUETOOTH_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_I2C0SSH\
  numeric varid = SETUP_DATA.I2C0SSH,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0SSH_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0SSH_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 6,\
    maximum     = 65525,\
    step        = 1,\
    default     = 432,\
    option text = STRING_TOKEN (STR_I2C_I2C0SSH_CONF), value = 432, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0SSL\
  numeric varid = SETUP_DATA.I2C0SSL,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0SSL_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0SSL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 8,\
    maximum     = 65535,\
    step        = 1,\
    default     = 507,\
    option text = STRING_TOKEN (STR_I2C_I2C0SSL_CONF), value = 507, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0SSD\
  numeric varid = SETUP_DATA.I2C0SSD,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0SSD_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0SSD_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 65535,\
    step        = 1,\
    default     = 9,\
    option text = STRING_TOKEN (STR_I2C_I2C0SSD_CONF), value = 9, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0FMH\
  numeric varid = SETUP_DATA.I2C0FMH,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FMH_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FMH_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 6,\
    maximum     = 65535,\
    step        = 1,\
    default     = 72,\
    option text = STRING_TOKEN (STR_I2C_I2C0FMH_CONF), value = 72, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0FML\
  numeric varid = SETUP_DATA.I2C0FML,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FML_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FML_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 8,\
    maximum     = 65535,\
    step        = 1,\
    default     = 160,\
    option text = STRING_TOKEN (STR_I2C_I2C0FML_CONF), value = 160, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0FMD\
  numeric varid = SETUP_DATA.I2C0FMD,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FMD_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FMD_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 65535,\
    step        = 1,\
    default     = 9,\
    option text = STRING_TOKEN (STR_I2C_I2C0FMD_CONF), value = 9, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0FPH\
  numeric varid = SETUP_DATA.I2C0FPH,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FPH_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FPH_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 6,\
    maximum     = 65525,\
    step        = 1,\
    default     = 29,\
    option text = STRING_TOKEN (STR_I2C_I2C0FPH_CONF), value = 29, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0FPL\
  numeric varid = SETUP_DATA.I2C0FPL,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FPL_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FPL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 8,\
    maximum     = 65535,\
    step        = 1,\
    default     = 50,\
    option text = STRING_TOKEN (STR_I2C_I2C0FPL_CONF), value = 50, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0FPD\
  numeric varid = SETUP_DATA.I2C0FPD,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FPD_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FPD_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 65535,\
    step        = 1,\
    default     = 5,\
    option text = STRING_TOKEN (STR_I2C_I2C0FPD_CONF), value = 5, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0M0C0\
  numeric varid = SETUP_DATA.I2C0M0C0,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0M1C0\
  numeric varid = SETUP_DATA.I2C0M1C0,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 2000,\
    option text = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF), value = 2000, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C0M2C0\
  numeric varid = SETUP_DATA.I2C0M2C0,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M2C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M2C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 0,\
    option text = STRING_TOKEN (STR_I2C_I2C0M2C0_CONF), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1SSH\
  numeric varid = SETUP_DATA.I2C1SSH,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0SSH_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0SSH_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 6,\
    maximum     = 65525,\
    step        = 1,\
    default     = 432,\
    option text = STRING_TOKEN (STR_I2C_I2C0SSH_CONF), value = 432, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1SSL\
  numeric varid = SETUP_DATA.I2C1SSL,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0SSL_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0SSL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 8,\
    maximum     = 65535,\
    step        = 1,\
    default     = 507,\
    option text = STRING_TOKEN (STR_I2C_I2C0SSL_CONF), value = 507, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1SSD\
  numeric varid = SETUP_DATA.I2C1SSD,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0SSD_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0SSD_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 65535,\
    step        = 1,\
    default     = 9,\
    option text = STRING_TOKEN (STR_I2C_I2C0SSD_CONF), value = 9, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1FMH\
  numeric varid = SETUP_DATA.I2C1FMH,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FMH_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FMH_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 6,\
    maximum     = 65535,\
    step        = 1,\
    default     = 72,\
    option text = STRING_TOKEN (STR_I2C_I2C0FMH_CONF), value = 72, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1FML\
  numeric varid = SETUP_DATA.I2C1FML,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FML_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FML_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 8,\
    maximum     = 65535,\
    step        = 1,\
    default     = 160,\
    option text = STRING_TOKEN (STR_I2C_I2C0FML_CONF), value = 160, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1FMD\
  numeric varid = SETUP_DATA.I2C1FMD,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FMD_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FMD_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 65535,\
    step        = 1,\
    default     = 9,\
    option text = STRING_TOKEN (STR_I2C_I2C0FMD_CONF), value = 9, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1FPH\
  numeric varid = SETUP_DATA.I2C1FPH,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FPH_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FPH_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 6,\
    maximum     = 65525,\
    step        = 1,\
    default     = 26,\
    option text = STRING_TOKEN (STR_I2C_I2C0FPH_CONF), value = 26, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1FPL\
  numeric varid = SETUP_DATA.I2C1FPL,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FPL_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FPL_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 8,\
    maximum     = 65535,\
    step        = 1,\
    default     = 50,\
    option text = STRING_TOKEN (STR_I2C_I2C0FPL_CONF), value = 50, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1FPD\
  numeric varid = SETUP_DATA.I2C1FPD,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0FPD_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0FPD_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 1,\
    maximum     = 65535,\
    step        = 1,\
    default     = 5,\
    option text = STRING_TOKEN (STR_I2C_I2C0FPD_CONF), value = 5, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1M0C1\
  numeric varid = SETUP_DATA.I2C1M0C1,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1M1C1\
  numeric varid = SETUP_DATA.I2C1M1C1,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 2000,\
    option text = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF), value = 2000, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_I2C1M2C1\
  numeric varid = SETUP_DATA.I2C1M2C1,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M2C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M2C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 0,\
    option text = STRING_TOKEN (STR_I2C_I2C0M2C0_CONF), value = 0, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SPI0M0C2\
  numeric varid = SETUP_DATA.SPI0M0C2,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SPI0M1C2\
  numeric varid = SETUP_DATA.SPI0M1C2,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 2000,\
    option text = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF), value = 2000, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SPI1M0C3\
  numeric varid = SETUP_DATA.SPI1M0C3,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF), value = 5200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_SPI1M1C3\
  numeric varid = SETUP_DATA.SPI1M1C3,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 2000,\
    option text = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF), value = 2000, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_UAR0M0C4\
  numeric varid = SETUP_DATA.UAR0M0C4,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_UAR0M1C4\
  numeric varid = SETUP_DATA.UAR0M1C4,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_UAR1M0C5\
  numeric varid = SETUP_DATA.UAR1M0C5,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M0C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;

#define SB_ONEOF_UAR1M1C5\
  numeric varid = SETUP_DATA.UAR1M1C5,\
    prompt      = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF),\
    help        = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF_HELP),\
    flags       = RESET_REQUIRED,\
    minimum     = 0,\
    maximum     = 10000,\
    step        = 1,\
    default     = 200,\
    option text = STRING_TOKEN (STR_I2C_I2C0M1C0_CONF), value = 200, flags = MANUFACTURING; \
  endnumeric;
//----------------------------------------------------------------------------
//                PCH LP ADSP
//----------------------------------------------------------------------------

#define SB_ONEOF_ADSPENABLE\
  oneof varid    = SETUP_DATA.ADspEnable,\
    prompt       = STRING_TOKEN (STR_ADSP_ENABLE_PROMPT),\
    help         = STRING_TOKEN (STR_ADSP_ENABLE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ADSPD3PG\
  oneof varid    = SETUP_DATA.ADspD3PG,\
    prompt       = STRING_TOKEN (STR_ADSP_D3PG_PROMPT),\
    help         = STRING_TOKEN (STR_ADSP_D3PG_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ADSPCODECSELECT\
  oneof varid    = SETUP_DATA.ADspCodecSelect,\
    prompt       = STRING_TOKEN (STR_ADSP_CODECSELECT_PROMPT),\
    help         = STRING_TOKEN (STR_ADSP_CODECSELECT_HELP),\
    option text  = STRING_TOKEN (STR_ADSP_CODECSELECT_REALTEK), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ADSP_CODECSELECT_CIRRUS), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_ADSP_CODECSELECT_IDT), value = 2, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ADSPBLUETOOTH\
  oneof varid    = SETUP_DATA.ADspBluetooth,\
    prompt       = STRING_TOKEN (STR_ADSP_BLUETOOTH_PROMPT),\
    help         = STRING_TOKEN (STR_ADSP_BLUETOOTH_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_ADSPMODE\
  oneof varid    = SETUP_DATA.ADspMode,\
    prompt       = STRING_TOKEN (STR_ADSP_MODE_PROMPT),\
    help         = STRING_TOKEN (STR_ADSP_MODE_HELP),\
    option text  = STRING_TOKEN (STR_LPSS_ADSP_MODE_PCI), value = 0, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_LPSS_ADSP_MODE_ACPI), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
  endoneof;

#define SB_ONEOF_NFCE\
  oneof varid    = SETUP_DATA.NFCE,\
    prompt       = STRING_TOKEN (STR_NFCE_PROMPT),\
    help         = STRING_TOKEN (STR_NFCE_HELP),\
    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_NFCE_SKTD000), value = 1, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_NFCE_NXP5442), value = 2, flags = RESET_REQUIRED, key = 0;\
    option text  = STRING_TOKEN (STR_NFCE_ICV0A12), value = 3, flags = RESET_REQUIRED, key = 0;\
  endoneof;

#endif // CONTROL_DEFINITION
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
#ifdef CONTROLS_WITH_DEFAULTS
	AAEON_WAKEONRTC					//AAEON_RTC_001_Elflo+
//	AAEON_ONEOF_FIXED_WAKEONRTCS5			//AAEON_RTC_001_Elflo-
	AAEON_NUM_RTCWAKEUP_TIMEDAY
	AAEON_NUM_RTCWAKEUP_TIMEHOUR
	AAEON_NUM_RTCWAKEUP_TIMEMINUTE
	AAEON_NUM_RTCWAKEUP_TIMESECOND
//	AAEON_ONEOF_DYNAMIC_WAKEONRTCS5			//AAEON_RTC_001_Elflo-
	AAEON_NUM_RTCWAKEUP_TIMEMINUTEINCREASE

	SB_ONEOF_ECTG
    SB_ONEOF_PCHLAN
    SB_ONEOF_PCHWAKEONLAN
    SB_ONEOF_PCHSLPLANLOW
    SB_ONEOF_BOARDCAPABILITY
    SB_ONEOF_DEEPSXBATTMODE
    SB_ONEOF_DEEPSXMODE
    SB_ONEOF_GP27WAKE
    SB_ONEOF_PCIEWAKE
    SB_ONEOF_ECTURBOCONTROLMODE
    SB_ONEOF_ACBRICKCAPACITY
    SB_ONEOF_ECPOLLINGPERIOD
    SB_ONEOF_ECGUARDBANDVALUE
    SB_ONEOF_ECALGORITHMSEL
    SB_ONEOF_ECHYBRIDPOWERBOOST
    SB_ONEOF_ECHYBRIDCURRENT
    SB_ONEOF_PCHAZALIA
    SB_ONEOF_AZALIADS
    SB_ONEOF_AZALIAPME
    SB_ONEOF_PCHDISPLAY
    SB_ONEOF_PCHPCICLOCKRUN
    SB_ONEOF_IRQMODE
    SB_ONEOF_PCHENABLECRID
    SB_ONEOF_SMILOCK
    SB_ONEOF_BIOSLOCK
    SB_ONEOF_GPIOLOCK
    SB_ONEOF_BIOSINTERFACELOCK
    SB_ONEOF_RTCLOCK
#if HPET_SUPPORT
    SB_ONEOF_HPET
#endif
    SB_ONEOF_SLPS4ASSW
    SB_ONEOF_LASTSTATE
    SB_ONEOF_PORT80
    SB_ONEOF_PCHUSBPRECONDITION
    SB_ONEOF_PCHUSB30MODE
//    SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_00
//    SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_01
//    SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_02
//    SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_03
    SB_ONEOF_PCHENABLERMH1
    SB_ONEOF_PCHUSB30PREBOOTSUPPORT
    SB_ONEOF_PCHUSB30IDLEL1
    SB_ONEOF_PCHUSB30BTCG
    SB_ONEOF_PCHUSB20PINROUTE
    SB_ONEOF_USB20PERPINROUTE00
    SB_ONEOF_USB20PERPINROUTE01
    SB_ONEOF_USB20PERPINROUTE02
    SB_ONEOF_USB20PERPINROUTE03
    SB_ONEOF_USB20PERPINROUTE04
    SB_ONEOF_USB20PERPINROUTE05
    SB_ONEOF_USB20PERPINROUTE06
    SB_ONEOF_USB20PERPINROUTE07
    SB_ONEOF_USB20PERPINROUTE08
    SB_ONEOF_USB20PERPINROUTE09
    SB_ONEOF_USB20PERPINROUTE10
    SB_ONEOF_USB20PERPINROUTE11
    SB_ONEOF_USB20PERPINROUTE12
    SB_ONEOF_USB20PERPINROUTE13
    SB_ONEOF_PCHUSB30PINENABLE
    SB_ONEOF_USB30PERPINENABLE1
    SB_ONEOF_USB30PERPINENABLE2
    SB_ONEOF_USB30PERPINENABLE3
    SB_ONEOF_USB30PERPINENABLE4
    SB_ONEOF_USB30PERPINENABLE5
    SB_ONEOF_USB30PERPINENABLE6
//    SB_ONEOF_XHCISTREAMS
    SB_ONEOF_PCHUSB20OFF0
    SB_ONEOF_PCHUSB20OFF1
    SB_ONEOF_PCHUSBPERPORTCTL
#if EHCI_CON_DISCON_WAKE_UP_SUPPORT
    SB_ONEOF_EHCICONDISCONWAKEUP
#endif
    SB_ONEOF_PCHUSBPORT00
    SB_ONEOF_PCHUSBPORT01
    SB_ONEOF_PCHUSBPORT02
    SB_ONEOF_PCHUSBPORT03
    SB_ONEOF_PCHUSBPORT04
    SB_ONEOF_PCHUSBPORT05
    SB_ONEOF_PCHUSBPORT06
    SB_ONEOF_PCHUSBPORT07
    SB_ONEOF_PCHUSBPORT08
    SB_ONEOF_PCHUSBPORT09
    SB_ONEOF_PCHUSBPORT10
    SB_ONEOF_PCHUSBPORT11
    SB_ONEOF_PCHUSBPORT12
    SB_ONEOF_PCHUSBPORT13
    SB_ONEOF_PCHUSB30PORT00
    SB_ONEOF_PCHUSB30PORT01
    SB_ONEOF_PCHUSB30PORT02
    SB_ONEOF_PCHUSB30PORT03
    SB_ONEOF_PCHUSB30PORT04
    SB_ONEOF_PCHUSB30PORT05
    SB_ONEOF_PCIECLOCKGATING
    SB_ONEOF_ROOTPORTFUNCTIONSWAPPING
    SB_ONEOF_PCHDMIASPM
    SB_ONEOF_PCHDMIEXTSYNC
    SB_ONEOF_PCIEUSBWA
    SB_ONEOF_PCIEROOTPORTSBDE
    SB_ONEOF_PCIESBDEPORT
    SB_ONEOF_LANRP1
    SB_ONEOF_LANRP2
    SB_ONEOF_LANRP3
    SB_ONEOF_LANRP4
    SB_ONEOF_LANRP5
    SB_ONEOF_LANRP6
    SB_ONEOF_LANRP7
    SB_ONEOF_LANRP8
    SB_ONEOF_PCIEROOTPORTEN00
    SB_ONEOF_PCIEROOTPORTASPM00
	  SB_ONEOF_PCIEROOTPORTL1S00
    SB_ONEOF_PCIEROOTPORTURE00
    SB_ONEOF_PCIEROOTPORTFEE00
    SB_ONEOF_PCIEROOTPORTNFE00
    SB_ONEOF_PCIEROOTPORTCEE00
    SB_ONEOF_PCIEROOTPORTCTD00
    SB_ONEOF_PCIEROOTPORTSFE00
    SB_ONEOF_PCIEROOTPORTSNE00
    SB_ONEOF_PCIEROOTPORTSCE00
    SB_ONEOF_PCIEROOTPORTPMCE00
    SB_ONEOF_PCIEROOTPORTHPE00
    SB_ONEOF_PCIEROOTPORTSPEED00
    SB_ONEOF_PCIEROOTPORTDNCD00
    SB_ONEOF_EXTRABUSRSVD00
    SB_ONEOF_PCIEMEMRSVD00
    SB_ONEOF_PCIEMEMRSVDALIG00
    SB_ONEOF_PCIEPFMEMRSVD00
    SB_ONEOF_PCIEPFMEMRSVDALIG00
    SB_ONEOF_PCIEIORSVD00
    SB_ONEOF_PCIELTRENABLE00
    SB_ONEOF_PCIELTRCONFIGLOCK00
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE00
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER00
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE00
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE00
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER00
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE00
    SB_ONEOF_PCIEROOTPORTEN01
    SB_ONEOF_PCIEROOTPORTASPM01
	  SB_ONEOF_PCIEROOTPORTL1S01
    SB_ONEOF_PCIEROOTPORTURE01
    SB_ONEOF_PCIEROOTPORTFEE01
    SB_ONEOF_PCIEROOTPORTNFE01
    SB_ONEOF_PCIEROOTPORTCEE01
    SB_ONEOF_PCIEROOTPORTCTD01
    SB_ONEOF_PCIEROOTPORTSFE01
    SB_ONEOF_PCIEROOTPORTSNE01
    SB_ONEOF_PCIEROOTPORTSCE01
    SB_ONEOF_PCIEROOTPORTPMCE01
    SB_ONEOF_PCIEROOTPORTHPE01
    SB_ONEOF_PCIEROOTPORTSPEED01
    SB_ONEOF_PCIEROOTPORTDNCD01
    SB_ONEOF_EXTRABUSRSVD01
    SB_ONEOF_PCIEMEMRSVD01
    SB_ONEOF_PCIEMEMRSVDALIG01
    SB_ONEOF_PCIEPFMEMRSVD01
    SB_ONEOF_PCIEPFMEMRSVDALIG01
    SB_ONEOF_PCIEIORSVD01
    SB_ONEOF_PCIELTRENABLE01
    SB_ONEOF_PCIELTRCONFIGLOCK01
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE01
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER01
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE01
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE01
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER01
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE01
    SB_ONEOF_PCIEROOTPORTEN02
    SB_ONEOF_PCIEROOTPORTASPM02
	  SB_ONEOF_PCIEROOTPORTL1S02
    SB_ONEOF_PCIEROOTPORTURE02
    SB_ONEOF_PCIEROOTPORTFEE02
    SB_ONEOF_PCIEROOTPORTNFE02
    SB_ONEOF_PCIEROOTPORTCEE02
    SB_ONEOF_PCIEROOTPORTCTD02
    SB_ONEOF_PCIEROOTPORTSFE02
    SB_ONEOF_PCIEROOTPORTSNE02
    SB_ONEOF_PCIEROOTPORTSCE02
    SB_ONEOF_PCIEROOTPORTPMCE02
    SB_ONEOF_PCIEROOTPORTHPE02
    SB_ONEOF_PCIEROOTPORTSPEED02
    SB_ONEOF_PCIEROOTPORTDNCD02
    SB_ONEOF_EXTRABUSRSVD02
    SB_ONEOF_PCIEMEMRSVD02
    SB_ONEOF_PCIEMEMRSVDALIG02
    SB_ONEOF_PCIEPFMEMRSVD02
    SB_ONEOF_PCIEPFMEMRSVDALIG02
    SB_ONEOF_PCIEIORSVD02
    SB_ONEOF_PCIELTRENABLE02
    SB_ONEOF_PCIELTRCONFIGLOCK02
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE02
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER02
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE02
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE02
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER02
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE02
    SB_ONEOF_PCIEROOTPORTEN03
    SB_ONEOF_PCIEROOTPORTASPM03
	  SB_ONEOF_PCIEROOTPORTL1S03
    SB_ONEOF_PCIEROOTPORTURE03
    SB_ONEOF_PCIEROOTPORTFEE03
    SB_ONEOF_PCIEROOTPORTNFE03
    SB_ONEOF_PCIEROOTPORTCEE03
    SB_ONEOF_PCIEROOTPORTCTD03
    SB_ONEOF_PCIEROOTPORTSFE03
    SB_ONEOF_PCIEROOTPORTSNE03
    SB_ONEOF_PCIEROOTPORTSCE03
    SB_ONEOF_PCIEROOTPORTPMCE03
    SB_ONEOF_PCIEROOTPORTHPE03
    SB_ONEOF_PCIEROOTPORTSPEED03
    SB_ONEOF_PCIEROOTPORTDNCD03
    SB_ONEOF_EXTRABUSRSVD03
    SB_ONEOF_PCIEMEMRSVD03
    SB_ONEOF_PCIEMEMRSVDALIG03
    SB_ONEOF_PCIEPFMEMRSVD03
    SB_ONEOF_PCIEPFMEMRSVDALIG03
    SB_ONEOF_PCIEIORSVD03
    SB_ONEOF_PCIELTRENABLE03
    SB_ONEOF_PCIELTRCONFIGLOCK03
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE03
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER03
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE03
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE03
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER03
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE03
    SB_ONEOF_PCIEROOTPORTEN04
    SB_ONEOF_PCIEROOTPORTASPM04
	  SB_ONEOF_PCIEROOTPORTL1S04
    SB_ONEOF_PCIEROOTPORTURE04
    SB_ONEOF_PCIEROOTPORTFEE04
    SB_ONEOF_PCIEROOTPORTNFE04
    SB_ONEOF_PCIEROOTPORTCEE04
    SB_ONEOF_PCIEROOTPORTCTD04
    SB_ONEOF_PCIEROOTPORTSFE04
    SB_ONEOF_PCIEROOTPORTSNE04
    SB_ONEOF_PCIEROOTPORTSCE04
    SB_ONEOF_PCIEROOTPORTPMCE04
    SB_ONEOF_PCIEROOTPORTHPE04
    SB_ONEOF_PCIEROOTPORTSPEED04
    SB_ONEOF_PCIEROOTPORTDNCD04
    SB_ONEOF_EXTRABUSRSVD04
    SB_ONEOF_PCIEMEMRSVD04
    SB_ONEOF_PCIEMEMRSVDALIG04
    SB_ONEOF_PCIEPFMEMRSVD04
    SB_ONEOF_PCIEPFMEMRSVDALIG04
    SB_ONEOF_PCIEIORSVD04
    SB_ONEOF_PCIELTRENABLE04
    SB_ONEOF_PCIELTRCONFIGLOCK04
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE04
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER04
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE04
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE04
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER04
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE04
    SB_ONEOF_PCIEROOTPORTEN05
    SB_ONEOF_PCIEROOTPORTASPM05
	  SB_ONEOF_PCIEROOTPORTL1S05
    SB_ONEOF_PCIEROOTPORTURE05
    SB_ONEOF_PCIEROOTPORTFEE05
    SB_ONEOF_PCIEROOTPORTNFE05
    SB_ONEOF_PCIEROOTPORTCEE05
    SB_ONEOF_PCIEROOTPORTCTD05
    SB_ONEOF_PCIEROOTPORTSFE05
    SB_ONEOF_PCIEROOTPORTSNE05
    SB_ONEOF_PCIEROOTPORTSCE05
    SB_ONEOF_PCIEROOTPORTPMCE05
    SB_ONEOF_PCIEROOTPORTHPE05
    SB_ONEOF_PCIEROOTPORTSPEED05
    SB_ONEOF_PCIEROOTPORTDNCD05
    SB_ONEOF_EXTRABUSRSVD05
    SB_ONEOF_PCIEMEMRSVD05
    SB_ONEOF_PCIEMEMRSVDALIG05
    SB_ONEOF_PCIEPFMEMRSVD05
    SB_ONEOF_PCIEPFMEMRSVDALIG05
    SB_ONEOF_PCIEIORSVD05
    SB_ONEOF_PCIELTRENABLE05
    SB_ONEOF_PCIELTRCONFIGLOCK05
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE05
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER05
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE05
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE05
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER05
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE05
    SB_ONEOF_PCIEROOTPORTEN06
    SB_ONEOF_PCIEROOTPORTASPM06
	  SB_ONEOF_PCIEROOTPORTL1S06
    SB_ONEOF_PCIEROOTPORTURE06
    SB_ONEOF_PCIEROOTPORTFEE06
    SB_ONEOF_PCIEROOTPORTNFE06
    SB_ONEOF_PCIEROOTPORTCEE06
    SB_ONEOF_PCIEROOTPORTCTD06
    SB_ONEOF_PCIEROOTPORTSFE06
    SB_ONEOF_PCIEROOTPORTSNE06
    SB_ONEOF_PCIEROOTPORTSCE06
    SB_ONEOF_PCIEROOTPORTPMCE06
    SB_ONEOF_PCIEROOTPORTHPE06
    SB_ONEOF_PCIEROOTPORTSPEED06
    SB_ONEOF_PCIEROOTPORTDNCD06
    SB_ONEOF_EXTRABUSRSVD06
    SB_ONEOF_PCIEMEMRSVD06
    SB_ONEOF_PCIEMEMRSVDALIG06
    SB_ONEOF_PCIEPFMEMRSVD06
    SB_ONEOF_PCIEPFMEMRSVDALIG06
    SB_ONEOF_PCIEIORSVD06
    SB_ONEOF_PCIELTRENABLE06
    SB_ONEOF_PCIELTRCONFIGLOCK06
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE06
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER06
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE06
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE06
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER06
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE06
    SB_ONEOF_PCIEROOTPORTEN07
    SB_ONEOF_PCIEROOTPORTASPM07
	  SB_ONEOF_PCIEROOTPORTL1S07
    SB_ONEOF_PCIEROOTPORTURE07
    SB_ONEOF_PCIEROOTPORTFEE07
    SB_ONEOF_PCIEROOTPORTNFE07
    SB_ONEOF_PCIEROOTPORTCEE07
    SB_ONEOF_PCIEROOTPORTCTD07
    SB_ONEOF_PCIEROOTPORTSFE07
    SB_ONEOF_PCIEROOTPORTSNE07
    SB_ONEOF_PCIEROOTPORTSCE07
    SB_ONEOF_PCIEROOTPORTPMCE07
    SB_ONEOF_PCIEROOTPORTHPE07
    SB_ONEOF_PCIEROOTPORTSPEED07
    SB_ONEOF_PCIEROOTPORTDNCD07
    SB_ONEOF_EXTRABUSRSVD07
    SB_ONEOF_PCIEMEMRSVD07
    SB_ONEOF_PCIEMEMRSVDALIG07
    SB_ONEOF_PCIEPFMEMRSVD07
    SB_ONEOF_PCIEPFMEMRSVDALIG07
    SB_ONEOF_PCIEIORSVD07
    SB_ONEOF_PCIELTRENABLE07
    SB_ONEOF_PCIELTRCONFIGLOCK07
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE07
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER07
    SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE07
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE07
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER07
    SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE07
    SB_ONEOF_AUTOTHERMALREPORT
    SB_ONEOF_CRITICALTHERMALTRIPPOINT
    SB_ONEOF_AC0TRIPPOINT
    SB_ONEOF_AC0FANSPEED
    SB_ONEOF_AC1TRIPPOINT
    SB_ONEOF_AC1FANSPEED
    SB_ONEOF_PASSIVETHERMALTRIPPOINT
    SB_ONEOF_PASSIVETC1VALUE
    SB_ONEOF_PASSIVETC2VALUE
    SB_ONEOF_PASSIVETSPVALUE
#if defined iME_SUPPORT && iME_SUPPORT
    SB_ONEOF_TRENABLED
    SB_ONEOF_SMBUSECMSGLEN
    SB_ONEOF_SMBUSECMSGPEC
    SB_ONEOF_TSONDIMM1
    SB_ONEOF_TSONDIMM2
    SB_ONEOF_TSONDIMM3
    SB_ONEOF_TSONDIMM4
#endif
    SB_ONEOF_THERMALDEVICEENABLE
    SB_ONEOF_PCHCROSSTHROTTLING
    SB_ONEOF_PCHTEMPREADENABLE
    SB_ONEOF_CPUENERGYREADENABLE
    SB_ONEOF_CPUTEMPREADENABLE
    SB_ONEOF_ALERTENABLELOCK
    SB_ONEOF_PCHALERT
    SB_ONEOF_DIMMALERT
    SB_ONEOF_PCHHOTLEVEL
    SB_ONEOF_PCHSATA
    SB_ONEOF_SATAINTERFACEMODE
    SB_ONEOF_ULTSATAINTERFACEMODE
    SB_ONEOF_SATATESTMODE
#if SataDriver_SUPPORT
    SB_ONEOF_SATARAIDROM
#endif
    SB_ONEOF_SALPSUPPORT
    SB_ONEOF_SATACONTROLLERSPEED
    SB_ONEOF_SATAALTERNATEID
    SB_ONEOF_SATAPORT0
    SB_ONEOF_SATAHOTPLUG0
    SB_ONEOF_SATAMECHANICALSW0
    SB_ONEOF_EXTERNALSATA0
    SB_ONEOF_SOLIDSTATEDRIVE0
    SB_ONEOF_SATASPINUP0
    SB_ONEOF_SATADEVSLP0
    SB_ONEOF_SATAENABLEDITOCONFIGP0
    SB_ONEOF_SATADITOVALP0
    SB_ONEOF_SATADMVALP0
    SB_ONEOF_SATAPORT1
    SB_ONEOF_SATAHOTPLUG1
    SB_ONEOF_SATAMECHANICALSW1
    SB_ONEOF_EXTERNALSATA1
    SB_ONEOF_SOLIDSTATEDRIVE1
    SB_ONEOF_SATASPINUP1
    SB_ONEOF_SATADEVSLP1
	  SB_ONEOF_SATAENABLEDITOCONFIGP1
    SB_ONEOF_SATADITOVALP1
    SB_ONEOF_SATADMVALP1
    SB_ONEOF_SATAPORT2
    SB_ONEOF_SATAHOTPLUG2
    SB_ONEOF_SATAMECHANICALSW2
    SB_ONEOF_EXTERNALSATA2
    SB_ONEOF_SOLIDSTATEDRIVE2
    SB_ONEOF_SATASPINUP2
    SB_ONEOF_SATADEVSLP2
	  SB_ONEOF_SATAENABLEDITOCONFIGP2
    SB_ONEOF_SATADITOVALP2
    SB_ONEOF_SATADMVALP2
    SB_ONEOF_SATAPORT3
    SB_ONEOF_SATAHOTPLUG3
    SB_ONEOF_SATAMECHANICALSW3
    SB_ONEOF_EXTERNALSATA3
    SB_ONEOF_SOLIDSTATEDRIVE3
    SB_ONEOF_SATASPINUP3
    SB_ONEOF_SATADEVSLP3
	  SB_ONEOF_SATAENABLEDITOCONFIGP3
    SB_ONEOF_SATADITOVALP3
    SB_ONEOF_SATADMVALP3
    SB_ONEOF_SATAPORT4
    SB_ONEOF_SATAHOTPLUG4
    SB_ONEOF_SATAMECHANICALSW4
    SB_ONEOF_EXTERNALSATA4
    SB_ONEOF_SOLIDSTATEDRIVE4
    SB_ONEOF_SATASPINUP4
    SB_ONEOF_SATAPORT5
    SB_ONEOF_SATAHOTPLUG5
    SB_ONEOF_SATAMECHANICALSW5
    SB_ONEOF_EXTERNALSATA5
    SB_ONEOF_SOLIDSTATEDRIVE5
    SB_ONEOF_SATASPINUP5
    SB_ONEOF_SATARAIDR0
    SB_ONEOF_SATARAIDR1
    SB_ONEOF_SATARAIDR10
    SB_ONEOF_SATARAIDR5
    SB_ONEOF_SATARAIDIRRT
    SB_ONEOF_SATARAIDOUB
    SB_ONEOF_SATAHDDLK
    SB_ONEOF_SATALEDL
    SB_ONEOF_SATARAIDIOOE
    SB_ONEOF_SMARTSTORAGE
    SB_ONEOF_OROMUIDELAY
    // PchLp LPSS
    SB_ONEOF_LPSSDMAENABLE
    SB_ONEOF_LPSSI2C0ENABLE
    SB_ONEOF_LPSSI2C1ENABLE
    SB_ONEOF_LPSSSPI0ENABLE
    SB_ONEOF_LPSSSPI1ENABLE
    SB_ONEOF_LPSSUART0ENABLE
    SB_ONEOF_LPSSUART1ENABLE
    SB_ONEOF_LPSSSDIOENABLE
    SB_ONEOF_LPSSMODE
    SB_ONEOF_LPSSINTMODE
    SB_ONEOF_LPSSI2C0VOLSELECT
    SB_ONEOF_LPSSI2C1VOLSELECT
	  SB_ONEOF_SENSORHUB
	  SB_ONEOF_TPD4
	  SB_ONEOF_ATMELTPL
	  SB_ONEOF_ELANTPL
	  SB_ONEOF_ELANTPD
	  SB_ONEOF_SYNATPD
	  SB_ONEOF_NTRITPL
	  SB_ONEOF_EETITPL
	  SB_ONEOF_ALPSTPD
	  SB_ONEOF_CYPRTPD
	  SB_ONEOF_BLUETOOTH0
	  SB_ONEOF_BLUETOOTH1
    SB_ONEOF_I2C0SSH
    SB_ONEOF_I2C0SSL
    SB_ONEOF_I2C0SSD
    SB_ONEOF_I2C0FMH
    SB_ONEOF_I2C0FML
    SB_ONEOF_I2C0FMD
    SB_ONEOF_I2C0FPH
    SB_ONEOF_I2C0FPL
    SB_ONEOF_I2C0FPD
    SB_ONEOF_I2C0M0C0
    SB_ONEOF_I2C0M1C0
    SB_ONEOF_I2C0M2C0
    SB_ONEOF_I2C1SSH
    SB_ONEOF_I2C1SSL
    SB_ONEOF_I2C1SSD
    SB_ONEOF_I2C1FMH
    SB_ONEOF_I2C1FML
    SB_ONEOF_I2C1FMD
    SB_ONEOF_I2C1FPH
    SB_ONEOF_I2C1FPL
    SB_ONEOF_I2C1FPD
    SB_ONEOF_I2C1M0C1
    SB_ONEOF_I2C1M1C1
    SB_ONEOF_I2C1M2C1
    SB_ONEOF_SPI0M0C2
    SB_ONEOF_SPI0M1C2
    SB_ONEOF_SPI1M0C3
    SB_ONEOF_SPI1M1C3
    SB_ONEOF_UAR0M0C4
    SB_ONEOF_UAR0M1C4
    SB_ONEOF_UAR1M0C5
    SB_ONEOF_UAR1M1C5
    // PchLp Audio DSP
    SB_ONEOF_ADSPENABLE
    SB_ONEOF_ADSPD3PG
    SB_ONEOF_ADSPCODECSELECT
    SB_ONEOF_ADSPBLUETOOTH
    SB_ONEOF_ADSPMODE
    SB_ONEOF_NFCE

#endif // CONTROLS_WITH_DEFAULTS
//---------------------------------------------------------------------------


//----------------------------------------------------------------------------
//                  CHIPSET - South Bridge Form
//----------------------------------------------------------------------------

#ifdef CHIPSET_FORM_SET
  #ifndef SUPPRESS_GRAYOUT_ENDIF //old Core
    #define SUPPRESS_GRAYOUT_ENDIF endif;
  #endif

  #ifdef FORM_SET_VARSTORE
     varstore SETUP_PLATFORM_DATA,
     key   = AUTO_ID(PLATFORM_FEATURES_ID),
     name  = SetupPlatformData,
     guid  = SETUP_GUID;
  #endif

  #ifdef FORM_SET_VARSTORE
     varstore SB_PLATFORM_DATA,
     key   = AUTO_ID(SB_PLATFORM_DATA_ID),
     name  = SbPlatformData,
     guid  = SETUP_GUID;
  #endif

  #ifdef FORM_SET_ITEM
    // Define controls to be added to the main page of the formset
  #endif

  #ifdef FORM_SET_GOTO
    // Define goto commands for the forms defined in this file
     goto SB_FORM_ID, 
     prompt  = STRING_TOKEN (STR_SB_FORM),
     help    = STRING_TOKEN (STR_SB_FORM_HELP);
  #endif

  #ifdef FORM_SET_FORM

    // Define forms
    #ifndef SB_FORM_MAIN
      #define SB_FORM_MAIN

      form formid = AUTO_ID(SB_FORM_ID),
        title     = STRING_TOKEN (STR_SB_FORM);

        text 
          help    = STRING_TOKEN (STR_PCH_RC_VER_HELP),
          text    = STRING_TOKEN (STR_PCH_RC_VER_NAME),
          text    = STRING_TOKEN (STR_PCH_RC_VER_VALUE),
          flags   = 0, key = 0;

        text 
          help    = STRING_TOKEN (STR_PCH_SKU_HELP),
          text    = STRING_TOKEN (STR_PCH_SKU_NAME),
          text    = STRING_TOKEN (STR_PCH_SKU_VALUE),
          flags   = 0, key = 0;

        text 
          help    = STRING_TOKEN (STR_PCH_REVID_HELP),
          text    = STRING_TOKEN (STR_PCH_REVID_NAME),
          text    = STRING_TOKEN (STR_PCH_REVID_VALUE),
          flags   = 0, key = 0;

        SEPARATOR

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          goto PCIE_DEVICE_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_HELP);
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          goto USB_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_USB_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_USB_OPTIONS_FORM_HELP);
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          goto PCH_AZALIA_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCH_AZALIA_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCH_AZALIA_OPTIONS_FORM_HELP);
        endif;

#if !defined HIDE_BIOS_SECURITY_PAGE || HIDE_BIOS_SECURITY_PAGE == 0
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          goto PCH_BIOS_SECURITY_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCH_BIOS_SECURITY_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCH_BIOS_SECURITY_OPTIONS_FORM_HELP);
        endif;
#endif

#if defined(SERIAL_IO_SUPPORT) && (SERIAL_IO_SUPPORT == 1)
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
          goto PCH_LPSS_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_LPSS_CONFIGURATION_TITLE),
          help   = STRING_TOKEN (STR_LPSS_CONFIGURATION_HELP);
        endif;
#endif
#if defined(ADSP_SUPPORT) && (ADSP_SUPPORT == 1)
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
          goto PCH_ADSP_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_ADSP_CONFIGURATION_TITLE),
          help   = STRING_TOKEN (STR_ADSP_CONFIGURATION_HELP);
        endif;
#endif

        SEPARATOR

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_ECTG
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PCHLAN
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.PchLan == 0;
          SB_ONEOF_PCHWAKEONLAN
#if defined (PCH_SKU) && (PCH_SKU == 1)
          SB_ONEOF_PCHSLPLANLOW
#endif
        SUPPRESS_GRAYOUT_ENDIF

                                        // [EIP82149]>
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif PlatformInfo_PlatformFlavor != FlavorMobile OR
                       ideqval SB_PLATFORM_DATA.HideDeepSx == 1;
          SB_ONEOF_BOARDCAPABILITY
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif PlatformInfo_PlatformFlavor != FlavorMobile OR
                       ideqval SB_PLATFORM_DATA.HideDeepSx == 1 OR
                       ideqval SETUP_DATA.BoardCapability == 0;
          SB_ONEOF_DEEPSXBATTMODE
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif PlatformInfo_PlatformFlavor == FlavorMobile OR
                   ideqval SB_PLATFORM_DATA.HideDeepSx == 1;
          SB_ONEOF_DEEPSXMODE
        SUPPRESS_GRAYOUT_ENDIF
                                        // <[EIP82149]

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_GP27WAKE
          SB_ONEOF_PCIEWAKE
        endif;

        // EC turbo control test mode 
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif PlatformInfo_PlatformFlavor != FlavorMobile OR 
                       ideqval SETUP_DATA.TurboMode == 0; 
          SB_ONEOF_ECTURBOCONTROLMODE
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.ECTurboControlMode == 0; 
          SB_ONEOF_ACBRICKCAPACITY
          SB_ONEOF_ECPOLLINGPERIOD
          SB_ONEOF_ECGUARDBANDVALUE
          SB_ONEOF_ECALGORITHMSEL
          SB_ONEOF_ECHYBRIDPOWERBOOST
          suppressif ideqval SETUP_DATA.ECHybridPowerBoost == 0;
            SB_ONEOF_ECHYBRIDCURRENT
          endif;
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.ECTurboControlMode == 0; 

// EC turbo control test mode *** end

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PCHDISPLAY
          SB_ONEOF_PCHPCICLOCKRUN
          SB_ONEOF_IRQMODE
          SB_ONEOF_PCHENABLECRID
          suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
            SB_ONEOF_PCHCROSSTHROTTLING
          endif;
        endif;

//#if HPET_SUPPORT
//
//        SEPARATOR
//
//        SUBTITLE(STRING_TOKEN (STR_HPET_SUBTITLE))
//
//        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
//            SB_ONEOF_HPET // Force HPET enabled for MRC initialization.
//        endif;
//#endif

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_SLPS4ASSW
          SB_ONEOF_LASTSTATE
          SB_ONEOF_PORT80
        endif;

        SB_ONEOF_NFCE

      endform; // End of STR_SB_FORM
    #endif // End of SB_FORM_MAIN
  #endif

//----------------------------------------------------------------------------
//                  CHIPSET - SB USB Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_USB_OPTIONS
      #define SB_FORM_USB_OPTIONS

      form formid = AUTO_ID(USB_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_USB_OPTIONS_FORM_TITLE);

        SUBTITLE(STRING_TOKEN (STR_USB_OPTIONS_FORM_TITLE))

        SEPARATOR

        SB_ONEOF_PCHUSBPRECONDITION
        SB_ONEOF_PCHUSB30MODE
	
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_PCHUSB30IDLEL1
        endif;

        SB_ONEOF_PCHUSB30BTCG

        suppressif NOT ideqval SETUP_DATA.PchUsb30Mode == 4;
          SEPARATOR

          SB_ONEOF_PCHUSB30PREBOOTSUPPORT

          SEPARATOR

          SB_ONEOF_PCHUSB20PINROUTE

          suppressif NOT ideqval SETUP_DATA.PchUsb20PinRoute == 0;
            SB_ONEOF_USB20PERPINROUTE00
            SB_ONEOF_USB20PERPINROUTE01
            SB_ONEOF_USB20PERPINROUTE02
            SB_ONEOF_USB20PERPINROUTE03
            SB_ONEOF_USB20PERPINROUTE04
            SB_ONEOF_USB20PERPINROUTE05
            SB_ONEOF_USB20PERPINROUTE06
            SB_ONEOF_USB20PERPINROUTE07
            SB_ONEOF_USB20PERPINROUTE08
            SB_ONEOF_USB20PERPINROUTE09
            SB_ONEOF_USB20PERPINROUTE10
            SB_ONEOF_USB20PERPINROUTE11
            SB_ONEOF_USB20PERPINROUTE12
            SB_ONEOF_USB20PERPINROUTE13
          endif;

          SEPARATOR

          SB_ONEOF_PCHUSB30PINENABLE

          suppressif NOT ideqval SETUP_DATA.PchUsb30PinEnable == 0;
            SB_ONEOF_USB30PERPINENABLE1
            SB_ONEOF_USB30PERPINENABLE2
            SB_ONEOF_USB30PERPINENABLE3
            SB_ONEOF_USB30PERPINENABLE4
            SB_ONEOF_USB30PERPINENABLE5
            SB_ONEOF_USB30PERPINENABLE6
          endif;
        endif;

//        suppressif ideqval SETUP_DATA.PchUsb30Mode == 0 OR
//                   ideqval SETUP_DATA.PchUsb30PBootMode == 0;

//          SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_00
//          SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_01
//          SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_02
//          SB_ONEOF_PCHUSB30HSPORTSWITCHABLE_03
//          SB_ONEOF_XHCISTREAMS

//        endif;

        suppressif NOT ideqval SETUP_DATA.PchUsb30Mode == 0;
          SEPARATOR
	  
          SB_ONEOF_PCHUSB20OFF0
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
          SB_ONEOF_PCHUSB20OFF1
        endif;
        endif;

        SEPARATOR
        //
        // Usb ports per-port disable control enable
        //
        SB_ONEOF_PCHUSBPERPORTCTL

//        suppressif ideqval SETUP_DATA.PchUsbPerPortCtl == 0x0;
//          SB_ONEOF_PCHUSBPORT00
//          SB_ONEOF_PCHUSBPORT01
//          SB_ONEOF_PCHUSBPORT02
////          SB_ONEOF_PCHUSBPORT03
//          SB_ONEOF_PCHUSBPORT04
//          SB_ONEOF_PCHUSBPORT05
////          SB_ONEOF_PCHUSBPORT06
////          SB_ONEOF_PCHUSBPORT07
//          suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
////            SB_ONEOF_PCHUSBPORT08
//            SB_ONEOF_PCHUSBPORT09
//            SB_ONEOF_PCHUSBPORT10
//            SB_ONEOF_PCHUSBPORT11
////            SB_ONEOF_PCHUSBPORT12
////            SB_ONEOF_PCHUSBPORT13
//          endif;
        suppressif ideqval SETUP_DATA.PchUsbPerPortCtl == 0x0;
          SB_ONEOF_PCHUSBPORT05
          SB_ONEOF_PCHUSBPORT04
          SB_ONEOF_PCHUSBPORT03
          SB_ONEOF_PCHUSBPORT02
            SB_ONEOF_PCHUSBPORT11
            SB_ONEOF_PCHUSBPORT10
            SB_ONEOF_PCHUSBPORT09
            SB_ONEOF_PCHUSBPORT08
          SB_ONEOF_PCHUSBPORT01
          SB_ONEOF_PCHUSBPORT00
//          SB_ONEOF_PCHUSBPORT06
//          SB_ONEOF_PCHUSBPORT07
//          suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
//            SB_ONEOF_PCHUSBPORT12
//            SB_ONEOF_PCHUSBPORT13
//          endif;

//          SEPARATOR

//          SB_ONEOF_PCHUSB30PORT00
//          SB_ONEOF_PCHUSB30PORT01
//          SB_ONEOF_PCHUSB30PORT02
//          SB_ONEOF_PCHUSB30PORT03
//          SB_ONEOF_PCHUSB30PORT04
//          SB_ONEOF_PCHUSB30PORT05
        endif;

#if EHCI_CON_DISCON_WAKE_UP_SUPPORT
        SEPARATOR

        SB_ONEOF_EHCICONDISCONWAKEUP
#endif

        SEPARATOR

//        SB_ONEOF_PCHENABLERMH1

      endform; // End of USB_OPTIONS_FORM_ID
    #endif // End of SB_FORM_USB_OPTIONS
  #endif 
//----------------------------------------------------------------------------
//                  CHIPSET - SB AZALIA Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCH_AZALIA_OPTIONS
      #define SB_FORM_PCH_AZALIA_OPTIONS

      form formid = AUTO_ID(PCH_AZALIA_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCH_AZALIA_OPTIONS_FORM_TITLE);

        SUBTITLE(STRING_TOKEN (STR_PCH_AZALIA_OPTIONS_FORM_TITLE))

        SEPARATOR
		suppressif ideqval SETUP_DATA.ADspEnable == 1 AND ideqval SB_PLATFORM_DATA.LPTType == 1;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PCHAZALIA
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.PchAzalia == 0x0;
          SB_ONEOF_AZALIADS
          SB_ONEOF_AZALIAPME
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.PchAzalia == 0x0
		endif;
      endform; //End of PCH_AZALIA_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCH_AZALIA_OPTIONS

  #endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB BIOS Security Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCH_BIOS_SECURITY_OPTIONS
      #define SB_FORM_PCH_BIOS_SECURITY_OPTIONS

      form formid = AUTO_ID(PCH_BIOS_SECURITY_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCH_BIOS_SECURITY_OPTIONS_FORM_TITLE);

        SUBTITLE(STRING_TOKEN (STR_PCH_BIOS_SECURITY_OPTIONS_FORM_TITLE))

        SEPARATOR

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_SMILOCK
#if defined(PfatServices_SUPPORT) && (PfatServices_SUPPORT == 1)
        suppressif ideqval SETUP_DATA.Pfatstate == 1;
	  SB_ONEOF_BIOSLOCK
	endif;
#else
	  SB_ONEOF_BIOSLOCK
#endif
          SB_ONEOF_GPIOLOCK
          SB_ONEOF_BIOSINTERFACELOCK
          SB_ONEOF_RTCLOCK
        endif;

      endform; //End of PCH_BIOS_SECURITY_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCH_BIOS_SECURITY_OPTIONS

  #endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIE_OPTIONS
      #define SB_FORM_PCIE_OPTIONS

      form formid = AUTO_ID(PCIE_DEVICE_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIE_OPTIONS_FORM_TITLE);

        SUBTITLE(STRING_TOKEN (STR_PCIE_OPTIONS_FORM_TITLE))

        SEPARATOR

        SB_ONEOF_PCIECLOCKGATING
        SB_ONEOF_PCHDMIASPM
        SB_ONEOF_PCHDMIEXTSYNC
        SB_ONEOF_PCIEUSBWA
        SB_ONEOF_ROOTPORTFUNCTIONSWAPPING

        grayoutif  ideqval SB_PLATFORM_DATA.PcieSBDE == 0;
          SB_ONEOF_PCIEROOTPORTSBDE
        endif;

        suppressif ideqval SETUP_DATA.PcieRootPortSBDE == 0 OR ideqval SB_PLATFORM_DATA.PcieSBDE == 0;
          SB_ONEOF_PCIESBDEPORT
        endif;

        SEPARATOR

#if defined RC_PORT_0 && RC_PORT_0
        suppressif ideqval SB_PLATFORM_DATA.GbePciePortNum == 0;
          goto PCH_PCIERP1_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP1_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP1_OPTIONS_FORM_HELP);
        endif;

        suppressif NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 00;
          SB_ONEOF_LANRP1
        endif;

#if defined RC_PORT_1 && RC_PORT_1
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 1;
          goto PCH_PCIERP2_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP2_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP2_OPTIONS_FORM_HELP);
        endif;

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 1;
          SB_ONEOF_LANRP2
        endif;
#endif

#if defined RC_PORT_2 && RC_PORT_2
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 2;
          goto PCH_PCIERP3_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP3_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP3_OPTIONS_FORM_HELP);    
        endif;

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 2;
         SB_ONEOF_LANRP3
        endif;
#endif

#if defined RC_PORT_3 && RC_PORT_3
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 3;
          goto PCH_PCIERP4_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP4_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP4_OPTIONS_FORM_HELP);
        endif;

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 3;
          SB_ONEOF_LANRP4
        endif;
#endif

#if defined RC_PORT_4 && RC_PORT_4
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 4;
          goto PCH_PCIERP5_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP5_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP5_OPTIONS_FORM_HELP);
        endif;

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 4;
          SB_ONEOF_LANRP5
        endif;
#endif

#if defined RC_PORT_5 && RC_PORT_5
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 5;
          goto PCH_PCIERP6_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP6_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP6_OPTIONS_FORM_HELP);
        endif;

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 5;
          SB_ONEOF_LANRP6
        endif;
#endif

#if defined RC_PORT_6 && RC_PORT_6
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 6 OR ideqval SB_PLATFORM_DATA.LPTType == 1;
          goto PCH_PCIERP7_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP7_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP7_OPTIONS_FORM_HELP);
        endif;         
         
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 6;
          SB_ONEOF_LANRP7
        endif;
#endif

#if defined RC_PORT_7 && RC_PORT_7
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR ideqval SB_PLATFORM_DATA.GbePciePortNum == 7 OR ideqval SB_PLATFORM_DATA.LPTType == 1;
          goto PCH_PCIERP8_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_PCIERP8_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_PCIERP8_OPTIONS_FORM_HELP);
        endif;         
         
        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0 OR NOT ideqval SB_PLATFORM_DATA.GbePciePortNum == 7;
          SB_ONEOF_LANRP8
        endif;
#endif
#endif // End of RC_PORT_0

      endform; //End of PCIE_DEVICE_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIE_OPTIONS

  #endif

#if defined RC_PORT_0 && RC_PORT_0
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#1 Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP1_OPTIONS
      #define SB_FORM_PCIERP1_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP1_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP1_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN00

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_0] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM00
          SB_ONEOF_PCIEROOTPORTL1S00
          SB_ONEOF_PCIEROOTPORTURE00
          SB_ONEOF_PCIEROOTPORTFEE00
          SB_ONEOF_PCIEROOTPORTNFE00
          SB_ONEOF_PCIEROOTPORTCEE00
          SB_ONEOF_PCIEROOTPORTCTD00
          SB_ONEOF_PCIEROOTPORTSFE00
          SB_ONEOF_PCIEROOTPORTSNE00
          SB_ONEOF_PCIEROOTPORTSCE00
          SB_ONEOF_PCIEROOTPORTPMCE00
          SB_ONEOF_PCIEROOTPORTHPE00
          SB_ONEOF_PCIEROOTPORTSPEED00
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 0 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_0] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD00
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 0
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_0] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD00
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD00
          SB_ONEOF_PCIEMEMRSVD00 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 0
          SB_ONEOF_PCIEMEMRSVDALIG00
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 0;
              SB_ONEOF_PCIEMEMRSVDALIG00
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD00
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 0
          SB_ONEOF_PCIEPFMEMRSVDALIG00
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 0;
              SB_ONEOF_PCIEPFMEMRSVDALIG00
          endif;
          #endif
          #else
          #endif

          SB_ONEOF_PCIEIORSVD00
          SB_ONEOF_PCIELTRENABLE00
          SB_ONEOF_PCIELTRCONFIGLOCK00
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE00
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_0] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER00
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE00
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE00
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_0] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER00
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE00
          endif;
        endif;

      endform; //End of PCH_PCIERP1_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP1_OPTIONS

  #endif 
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#2 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_1 && RC_PORT_1
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP2_OPTIONS
      #define SB_FORM_PCIERP2_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP2_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP2_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN01

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_1] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM01
		  SB_ONEOF_PCIEROOTPORTL1S01
          SB_ONEOF_PCIEROOTPORTURE01
          SB_ONEOF_PCIEROOTPORTFEE01
          SB_ONEOF_PCIEROOTPORTNFE01
          SB_ONEOF_PCIEROOTPORTCEE01
          SB_ONEOF_PCIEROOTPORTCTD01
          SB_ONEOF_PCIEROOTPORTSFE01
          SB_ONEOF_PCIEROOTPORTSNE01
          SB_ONEOF_PCIEROOTPORTSCE01
          SB_ONEOF_PCIEROOTPORTPMCE01
          SB_ONEOF_PCIEROOTPORTHPE01
          SB_ONEOF_PCIEROOTPORTSPEED01
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 1 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_1] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD01
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 1
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_1] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD01
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD01
          SB_ONEOF_PCIEMEMRSVD01 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 1
          SB_ONEOF_PCIEMEMRSVDALIG01
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 1;
              SB_ONEOF_PCIEMEMRSVDALIG01
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD01
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 1
          SB_ONEOF_PCIEPFMEMRSVDALIG01
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 1;
              SB_ONEOF_PCIEPFMEMRSVDALIG01
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD01 

          SB_ONEOF_PCIELTRENABLE01
          SB_ONEOF_PCIELTRCONFIGLOCK01
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE01
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_1] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER01
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE01
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE01
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_1] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER01
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE01
          endif;
        endif;

      endform; //End of PCH_PCIERP2_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP2_OPTIONS

  #endif 
#endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#3 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_2 && RC_PORT_2
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP3_OPTIONS
      #define SB_FORM_PCIERP3_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP3_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP3_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN02

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_2] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM02
		  SB_ONEOF_PCIEROOTPORTL1S02
          SB_ONEOF_PCIEROOTPORTURE02
          SB_ONEOF_PCIEROOTPORTFEE02
          SB_ONEOF_PCIEROOTPORTNFE02
          SB_ONEOF_PCIEROOTPORTCEE02
          SB_ONEOF_PCIEROOTPORTCTD02
          SB_ONEOF_PCIEROOTPORTSFE02
          SB_ONEOF_PCIEROOTPORTSNE02
          SB_ONEOF_PCIEROOTPORTSCE02
          SB_ONEOF_PCIEROOTPORTPMCE02
          SB_ONEOF_PCIEROOTPORTHPE02
          SB_ONEOF_PCIEROOTPORTSPEED02
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 2 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_2] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD02
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 2
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_2] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD02
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD02
          SB_ONEOF_PCIEMEMRSVD02 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 2
          SB_ONEOF_PCIEMEMRSVDALIG02
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 2;
              SB_ONEOF_PCIEMEMRSVDALIG02
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD02
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 2
          SB_ONEOF_PCIEPFMEMRSVDALIG02
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 2;
              SB_ONEOF_PCIEPFMEMRSVDALIG02
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD02 

          SB_ONEOF_PCIELTRENABLE02
          SB_ONEOF_PCIELTRCONFIGLOCK02
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE02
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_2] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER02
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE02
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE02
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_2] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER02
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE02
          endif;
        endif;

      endform; //End of PCH_PCIERP3_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP3_OPTIONS

  #endif 
#endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#4 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_3 && RC_PORT_3
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP4_OPTIONS
      #define SB_FORM_PCIERP4_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP4_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP4_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN03

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_3] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM03
		  SB_ONEOF_PCIEROOTPORTL1S03
          SB_ONEOF_PCIEROOTPORTURE03
          SB_ONEOF_PCIEROOTPORTFEE03
          SB_ONEOF_PCIEROOTPORTNFE03
          SB_ONEOF_PCIEROOTPORTCEE03
          SB_ONEOF_PCIEROOTPORTCTD03
          SB_ONEOF_PCIEROOTPORTSFE03
          SB_ONEOF_PCIEROOTPORTSNE03
          SB_ONEOF_PCIEROOTPORTSCE03
          SB_ONEOF_PCIEROOTPORTPMCE03
          SB_ONEOF_PCIEROOTPORTHPE03
          SB_ONEOF_PCIEROOTPORTSPEED03
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 3 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_3] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD03
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 3
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_3] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD03
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD03
          SB_ONEOF_PCIEMEMRSVD03 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 3
          SB_ONEOF_PCIEMEMRSVDALIG03
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 3;
              SB_ONEOF_PCIEMEMRSVDALIG03
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD03
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 3
          SB_ONEOF_PCIEPFMEMRSVDALIG03
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 3;
              SB_ONEOF_PCIEPFMEMRSVDALIG03
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD03 

          SB_ONEOF_PCIELTRENABLE03
          SB_ONEOF_PCIELTRCONFIGLOCK03
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE03
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_3] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER03
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE03
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE03
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_3] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER03
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE03
          endif;
        endif;

      endform; //End of PCH_PCIERP4_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP4_OPTIONS

  #endif 
#endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#5 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_4 && RC_PORT_4
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP5_OPTIONS
      #define SB_FORM_PCIERP5_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP5_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP5_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN04

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_4] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM04
		  SB_ONEOF_PCIEROOTPORTL1S04
          SB_ONEOF_PCIEROOTPORTURE04
          SB_ONEOF_PCIEROOTPORTFEE04
          SB_ONEOF_PCIEROOTPORTNFE04
          SB_ONEOF_PCIEROOTPORTCEE04
          SB_ONEOF_PCIEROOTPORTCTD04
          SB_ONEOF_PCIEROOTPORTSFE04
          SB_ONEOF_PCIEROOTPORTSNE04
          SB_ONEOF_PCIEROOTPORTSCE04
          SB_ONEOF_PCIEROOTPORTPMCE04
          SB_ONEOF_PCIEROOTPORTHPE04
          SB_ONEOF_PCIEROOTPORTSPEED04
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 4 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_4] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD04
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 4
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_4] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD04
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD04
          SB_ONEOF_PCIEMEMRSVD04 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 4
          SB_ONEOF_PCIEMEMRSVDALIG04
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 4;
              SB_ONEOF_PCIEMEMRSVDALIG04
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD04
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 4
          SB_ONEOF_PCIEPFMEMRSVDALIG04
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 4;
              SB_ONEOF_PCIEPFMEMRSVDALIG04
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD04 

          SB_ONEOF_PCIELTRENABLE04
          SB_ONEOF_PCIELTRCONFIGLOCK04
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE04
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_4] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER04
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE04
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE04
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_4] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER04
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE04
          endif;
        endif;

      endform; //End of PCH_PCIERP5_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP5_OPTIONS

  #endif 
#endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#6 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_5 && RC_PORT_5
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP6_OPTIONS
      #define SB_FORM_PCIERP6_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP6_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP6_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN05

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_5] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM05
		  SB_ONEOF_PCIEROOTPORTL1S05
          SB_ONEOF_PCIEROOTPORTURE05
          SB_ONEOF_PCIEROOTPORTFEE05
          SB_ONEOF_PCIEROOTPORTNFE05
          SB_ONEOF_PCIEROOTPORTCEE05
          SB_ONEOF_PCIEROOTPORTCTD05
          SB_ONEOF_PCIEROOTPORTSFE05
          SB_ONEOF_PCIEROOTPORTSNE05
          SB_ONEOF_PCIEROOTPORTSCE05
          SB_ONEOF_PCIEROOTPORTPMCE05
          SB_ONEOF_PCIEROOTPORTHPE05
          SB_ONEOF_PCIEROOTPORTSPEED05
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 5 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_5] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD05
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 5
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_5] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD05
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD05
          SB_ONEOF_PCIEMEMRSVD05 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11 
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 5
          SB_ONEOF_PCIEMEMRSVDALIG05
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 5;
              SB_ONEOF_PCIEMEMRSVDALIG05
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD05
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 5
          SB_ONEOF_PCIEPFMEMRSVDALIG05
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 5;
              SB_ONEOF_PCIEPFMEMRSVDALIG05
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD05 

          SB_ONEOF_PCIELTRENABLE05
          SB_ONEOF_PCIELTRCONFIGLOCK05
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE05
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_5] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER05
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE05
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE05
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_5] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER05
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE05
          endif;
        endif;

      endform; //End of PCH_PCIERP6_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP6_OPTIONS

  #endif 
#endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#7 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_6 && RC_PORT_6
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP7_OPTIONS
      #define SB_FORM_PCIERP7_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP7_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP7_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN06

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_6] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM06
		  SB_ONEOF_PCIEROOTPORTL1S06
          SB_ONEOF_PCIEROOTPORTURE06
          SB_ONEOF_PCIEROOTPORTFEE06
          SB_ONEOF_PCIEROOTPORTNFE06
          SB_ONEOF_PCIEROOTPORTCEE06
          SB_ONEOF_PCIEROOTPORTCTD06
          SB_ONEOF_PCIEROOTPORTSFE06
          SB_ONEOF_PCIEROOTPORTSNE06
          SB_ONEOF_PCIEROOTPORTSCE06
          SB_ONEOF_PCIEROOTPORTPMCE06
          SB_ONEOF_PCIEROOTPORTHPE06
          SB_ONEOF_PCIEROOTPORTSPEED06
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 6 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_6] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD06
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 6
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_6] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD06
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD06
          SB_ONEOF_PCIEMEMRSVD06 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 6
          SB_ONEOF_PCIEMEMRSVDALIG06
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 6;
              SB_ONEOF_PCIEMEMRSVDALIG06
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD06
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 6
          SB_ONEOF_PCIEPFMEMRSVDALIG06
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 6;
              SB_ONEOF_PCIEPFMEMRSVDALIG06
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD06 

          SB_ONEOF_PCIELTRENABLE06
          SB_ONEOF_PCIELTRCONFIGLOCK06
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE06
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_6] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER06
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE06
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE06
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_6] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER06
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE06
          endif;
        endif;

      endform; //End of PCH_PCIERP7_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP7_OPTIONS

  #endif 
#endif
//----------------------------------------------------------------------------
//                  CHIPSET - SB PCI-E Root Port#8 Form
//----------------------------------------------------------------------------
#if defined RC_PORT_7 && RC_PORT_7
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCIERP8_OPTIONS
      #define SB_FORM_PCIERP8_OPTIONS

      form formid = AUTO_ID(PCH_PCIERP8_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_PCIERP8_OPTIONS_FORM_TITLE);

        SB_ONEOF_PCIEROOTPORTEN07

        suppressif ideqval SETUP_DATA.PcieRootPortEn[OFFSET_7] == 0x0;
          SB_ONEOF_PCIEROOTPORTASPM07
		  SB_ONEOF_PCIEROOTPORTL1S07
          SB_ONEOF_PCIEROOTPORTURE07
          SB_ONEOF_PCIEROOTPORTFEE07
          SB_ONEOF_PCIEROOTPORTNFE07
          SB_ONEOF_PCIEROOTPORTCEE07
          SB_ONEOF_PCIEROOTPORTCTD07
          SB_ONEOF_PCIEROOTPORTSFE07
          SB_ONEOF_PCIEROOTPORTSNE07
          SB_ONEOF_PCIEROOTPORTSCE07
          SB_ONEOF_PCIEROOTPORTPMCE07
          SB_ONEOF_PCIEROOTPORTHPE07
          SB_ONEOF_PCIEROOTPORTSPEED07
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1 && Thunderbolt_FR_VERSION > 10
          suppressif ideqval SETUP_DATA.TbtHostLocation == 7 OR \
                     NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_7] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD07
          endif;
          #else
          #if !defined TBT_UP_PORT_FUNC || TBT_UP_PORT_FUNC != 7
          suppressif NOT ideqval SETUP_DATA.PcieRootPortSpeed[OFFSET_7] == 0x0;
              SB_ONEOF_PCIEROOTPORTDNCD07
          endif;
          #endif
          #endif
          SB_ONEOF_EXTRABUSRSVD07
          SB_ONEOF_PCIEMEMRSVD07 
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 7
          SB_ONEOF_PCIEMEMRSVDALIG07
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 7;
              SB_ONEOF_PCIEMEMRSVDALIG07
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEPFMEMRSVD07
          #if defined Thunderbolt_SUPPORT && Thunderbolt_SUPPORT == 1
          #if defined Thunderbolt_FR_VERSION && Thunderbolt_FR_VERSION < 11
          #if defined TBT_UP_PORT_FUNC && TBT_UP_PORT_FUNC == 7
          SB_ONEOF_PCIEPFMEMRSVDALIG07
          #endif
          #else
          suppressif NOT ideqval SETUP_DATA.TbtHostLocation == 7;
              SB_ONEOF_PCIEPFMEMRSVDALIG07
          endif;
          #endif
          #else
          #endif
          SB_ONEOF_PCIEIORSVD07 

          SB_ONEOF_PCIELTRENABLE07
          SB_ONEOF_PCIELTRCONFIGLOCK07
          SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMODE07
          suppressif NOT ideqval SETUP_DATA.PcieSnoopLatencyOverrideMode[OFFSET_7] == 1;
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEMULITIPLIER07
            SB_ONEOF_PCIESNOOPLATENCYOVERRIDEVALUE07
          endif;
          SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMODE07
          suppressif NOT ideqval SETUP_DATA.PcieNonSnoopLatencyOverrideMode[OFFSET_7] == 1;
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEMULITIPLIER07
            SB_ONEOF_PCIENONSNOOPLATENCYOVERRIDEVALUE07
          endif;
        endif;

      endform; //End of PCH_PCIERP8_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCIERP8_OPTIONS

  #endif 
#endif
#endif // End of RC_PORT_0
//----------------------------------------------------------------------------
//                  CHIPSET - SB LPSS CONFIGURATION Form
//----------------------------------------------------------------------------
#if defined(SERIAL_IO_SUPPORT) && (SERIAL_IO_SUPPORT == 1)
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCH_LPSS_CONFIG_OPTIONS
      #define SB_FORM_PCH_LPSS_CONFIG_OPTIONS

      form formid = AUTO_ID(PCH_LPSS_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_LPSS_CONFIGURATION_TITLE);

        SUBTITLE(STRING_TOKEN (STR_LPSS_CONFIGURATION_TITLE))

        SEPARATOR

        SB_ONEOF_LPSSDMAENABLE
        SEPARATOR
        suppressif ideqval SETUP_DATA.LpssDmaEnable == 0;   
        SB_ONEOF_LPSSI2C0ENABLE
        suppressif ideqval SETUP_DATA.LpssI2c0Enable == 0;
          SB_ONEOF_LPSSI2C0VOLSELECT
		      SB_ONEOF_SENSORHUB
		      SB_ONEOF_TPD4
          SEPARATOR
          SB_ONEOF_I2C0SSL
          SB_ONEOF_I2C0SSH
          SB_ONEOF_I2C0SSD
          SB_ONEOF_I2C0FML
          SB_ONEOF_I2C0FMH
          SB_ONEOF_I2C0FMD
          SB_ONEOF_I2C0FPL
          SB_ONEOF_I2C0FPH
          SB_ONEOF_I2C0FPD
          SB_ONEOF_I2C0M0C0
          SB_ONEOF_I2C0M1C0
          SB_ONEOF_I2C0M2C0
        endif;
        SEPARATOR
        SB_ONEOF_LPSSI2C1ENABLE
        suppressif ideqval SETUP_DATA.LpssI2c1Enable == 0;
          SB_ONEOF_LPSSI2C1VOLSELECT
		      SB_ONEOF_ATMELTPL
		      SB_ONEOF_ELANTPL
		      SB_ONEOF_NTRITPL
		      SB_ONEOF_EETITPL
          SEPARATOR
		      SB_ONEOF_ELANTPD
		      SB_ONEOF_SYNATPD
		      SB_ONEOF_ALPSTPD
		      SB_ONEOF_CYPRTPD
          SEPARATOR
          SB_ONEOF_I2C1SSL
          SB_ONEOF_I2C1SSH
          SB_ONEOF_I2C1SSD
          SB_ONEOF_I2C1FML
          SB_ONEOF_I2C1FMH
          SB_ONEOF_I2C1FMD
          SB_ONEOF_I2C1FPL
          SB_ONEOF_I2C1FPH
          SB_ONEOF_I2C1FPD
          SB_ONEOF_I2C1M0C1
          SB_ONEOF_I2C1M1C1
          SB_ONEOF_I2C1M2C1
        endif;
        SEPARATOR
        SB_ONEOF_LPSSSPI0ENABLE
        suppressif ideqval SETUP_DATA.LpssSpi0Enable == 0;
          SB_ONEOF_SPI0M0C2
          SB_ONEOF_SPI0M1C2
        endif;
        SEPARATOR
        SB_ONEOF_LPSSSPI1ENABLE
        suppressif ideqval SETUP_DATA.LpssSpi1Enable == 0;
          SB_ONEOF_SPI1M0C3
          SB_ONEOF_SPI1M1C3
        endif;
        SEPARATOR
        SB_ONEOF_LPSSUART0ENABLE
        suppressif ideqval SETUP_DATA.LpssUart0Enable == 0;
		      SB_ONEOF_BLUETOOTH0
          SEPARATOR
          SB_ONEOF_UAR0M0C4
          SB_ONEOF_UAR0M1C4
		    endif;
        SEPARATOR
        SB_ONEOF_LPSSUART1ENABLE
        suppressif ideqval SETUP_DATA.LpssUart1Enable == 0;
		      SB_ONEOF_BLUETOOTH1
          SEPARATOR
          SB_ONEOF_UAR1M0C5
          SB_ONEOF_UAR1M1C5
		    endif;
	  endif;
      SEPARATOR
      SB_ONEOF_LPSSSDIOENABLE
        SEPARATOR
        SB_ONEOF_LPSSMODE
        SB_ONEOF_LPSSINTMODE

      endform; //End of PCH_LPSS_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCH_LPSS_CONFIG_OPTIONS

  #endif
#endif // End of SERIAL_IO_SUPPORT
//----------------------------------------------------------------------------
//                  CHIPSET - SB ADSP CONFIGURATION Form
//----------------------------------------------------------------------------
#if defined(ADSP_SUPPORT) && (ADSP_SUPPORT == 1)
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_PCH_ADSP_CONFIG_OPTIONS
      #define SB_FORM_PCH_ADSP_CONFIG_OPTIONS

      form formid = AUTO_ID(PCH_ADSP_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_ADSP_CONFIGURATION_TITLE);

        SUBTITLE(STRING_TOKEN (STR_ADSP_CONFIGURATION_TITLE))

        SEPARATOR

        SB_ONEOF_ADSPENABLE
		suppressif ideqval SETUP_DATA.ADspEnable == 0;
        	SB_ONEOF_ADSPD3PG
        	SB_ONEOF_ADSPCODECSELECT
        	SB_ONEOF_ADSPBLUETOOTH
        	SB_ONEOF_ADSPMODE
		endif;

      endform; //End of PCH_ADSP_OPTIONS_FORM_ID

    #endif // End of SB_FORM_PCH_ADSP_CONFIG_OPTIONS

  #endif
#endif // End of ADSP_SUPPORT
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
#endif // End of CHIPSET_FORM_SET



//----------------------------------------------------------------------------
//                ADVANCED - Atapi Configuration Form
//----------------------------------------------------------------------------
#ifdef ADVANCED_FORM_SET

  #ifndef SUPPRESS_GRAYOUT_ENDIF //old Core
    #define SUPPRESS_GRAYOUT_ENDIF endif;
  #endif

  #ifdef FORM_SET_VARSTORE
    varstore SETUP_PLATFORM_DATA,
    key   = PLATFORM_FEATURES_ID,
    name  = SetupPlatformData,
    guid  = SETUP_GUID;
  #endif

  #ifdef FORM_SET_VARSTORE
     varstore SB_PLATFORM_DATA,
     key   = SB_PLATFORM_DATA_ID,
     name  = SbPlatformData,
     guid  = SETUP_GUID;
  #endif

  #ifdef FORM_SET_ITEM
    // Define controls to be added to the main page of the formset
  #endif

  #ifdef FORM_SET_GOTO
    // Define goto commands for the forms defined in this file
    goto SATA_CONFIG_FORM_ID,
    prompt  = STRING_TOKEN (STR_SATA_CONFIG_FORM),
    help    = STRING_TOKEN (STR_SATA_CONFIG_FORM_HELP);

    goto THERMAL_CONFIG_FORM_ID,
    prompt  = STRING_TOKEN (STR_THERMAL_CONFIGURATION),
    help    = STRING_TOKEN (STR_THERMAL_CONFIGURATION_HELP);

	goto S5_RTCWAKE_FORM_ID, 
	    prompt = STRING_TOKEN(STR_S5_RTCWAKE_FORM),
	    help = STRING_TOKEN(STR_S5_RTCWAKE_FORM_HELP);

  #endif

//----------------------------------------------------------------------------
//                ADVANCED - Thermal Configuration Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_THERMAL_CONFIGURATION
      #define SB_FORM_THERMAL_CONFIGURATION

      form formid = AUTO_ID(THERMAL_CONFIG_FORM_ID),
        title     = STRING_TOKEN (STR_THERMAL_CONFIGURATION);

        goto PLATFORM_THERMAL_CONFIG_FORM_ID,
        prompt = STRING_TOKEN (STR_PLATFORM_THERMAL_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN (STR_PLATFORM_THERMAL_CONFIG_FORM_HELP);

      endform; // End of THERMAL_CONFIG_FORM_ID

    #endif // End of SB_FORM_THERMAL_CONFIGURATION

//----------------------------------------------------------------------------
//                ADVANCED - Platform Thermal Configuration Form
//----------------------------------------------------------------------------

    #ifndef SB_FORM_PLATFORM_THERMAL_CONFIG
      #define SB_FORM_PLATFORM_THERMAL_CONFIG

      form formid = AUTO_ID(PLATFORM_THERMAL_CONFIG_FORM_ID),
        title     = STRING_TOKEN (STR_PLATFORM_THERMAL_CONFIG_FORM_TITLE);

        SUBTITLE(STRING_TOKEN (STR_PLATFORM_THERMAL_CONFIG_FORM_TITLE))

        SEPARATOR

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_AUTOTHERMALREPORT
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.AutoThermalReport == 1;
          SB_ONEOF_CRITICALTHERMALTRIPPOINT
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.AutoThermalReport == 1;
          SB_ONEOF_AC0TRIPPOINT
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_AC0FANSPEED
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_AC1TRIPPOINT
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_AC1FANSPEED
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.AutoThermalReport == 1;
          SB_ONEOF_PASSIVETHERMALTRIPPOINT
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PASSIVETC1VALUE
        endif;
      
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PASSIVETC2VALUE
        endif;
      
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PASSIVETSPVALUE
        endif;

#if defined iME_SUPPORT && iME_SUPPORT

        SEPARATOR

        // The grayout below is always true. TrEnabled value is set according to softstraps.
        // It can no longer be toggled from setup, but is left here as information for user.
/*        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR
                  ideqval SETUP_DATA.TrEnabled == 0 OR
                  ideqval SETUP_DATA.TrEnabled == 1;
          SB_ONEOF_TRENABLED
        endif;*/

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.TrEnabled == 0;
          SB_ONEOF_SMBUSECMSGLEN
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.TrEnabled == 0;
          SB_ONEOF_SMBUSECMSGPEC
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.TrEnabled == 0;
          SB_ONEOF_TSONDIMM1
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.TrEnabled == 0;
          SB_ONEOF_TSONDIMM2
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.TrEnabled == 0;
          SB_ONEOF_TSONDIMM3
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.TrEnabled == 0;
          SB_ONEOF_TSONDIMM4
        SUPPRESS_GRAYOUT_ENDIF
#endif // Ena of iME_SUPPORT

        SEPARATOR

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_THERMALDEVICEENABLE
        endif;

/*        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          //SB_ONEOF_PCHTEMPREADENABLE
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          //SB_ONEOF_CPUENERGYREADENABLE
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          //SB_ONEOF_CPUTEMPREADENABLE
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          //SB_ONEOF_ALERTENABLELOCK
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.AlertEnableLock == 0x0;
          //SB_ONEOF_PCHALERT
          //SB_ONEOF_DIMMALERT
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.AlertEnableLock == 0x0;*/

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SB_PLATFORM_DATA.PchHotLevelPresent == 0;
          SB_ONEOF_PCHHOTLEVEL
        SUPPRESS_GRAYOUT_ENDIF   // suppressif ideqval SETUP_DATA.HidePchHotLevel == 1;

      endform;//End of PLATFORM_THERMAL_CONFIG_FORM_ID

    #endif // End of SB_FORM_PLATFORM_THERMAL_CONFIG

//----------------------------------------------------------------------------
//                ADVANCED - SATA Configuration Form
//----------------------------------------------------------------------------
    // Define forms
    #ifndef SB_FORM_SATA_CONFIG
      #define SB_FORM_SATA_CONFIG

      form formid = AUTO_ID(SATA_CONFIG_FORM_ID),
        title     = STRING_TOKEN (STR_SATA_CONFIG_FORM);

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_PCHSATA
        endif;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.PchSata == 0; 
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
          SB_ONEOF_SATAINTERFACEMODE
        endif;
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_ULTSATAINTERFACEMODE
        endif;
          SB_ONEOF_SATATESTMODE
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.PchSata == 0; 

#if SataDriver_SUPPORT
#if !defined (CsmOptOut_SUPPORT) || (CsmOptOut_SUPPORT == 0)
        suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif NOT ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_RAID OR \
                   ideqval SETUP_DATA.PchSata == 0;
          SB_ONEOF_SATARAIDROM
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.PchSata == 0; 
        endif;

        suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif NOT ideqval SETUP_DATA.ULTSataInterfaceMode == SATA_MODE_RAID OR \
                   ideqval SETUP_DATA.PchSata == 0;
          SB_ONEOF_SATARAIDROM
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.PchSata == 0; 
        endif;
#endif
#endif

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.PchSata == 0;
          SB_ONEOF_SALPSUPPORT
          SB_ONEOF_SATACONTROLLERSPEED
        SUPPRESS_GRAYOUT_ENDIF // suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE OR ideqval SETUP_DATA.PchSata == 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          goto PCH_SATA_SFMS_OPTIONS_FORM_ID,
          prompt = STRING_TOKEN (STR_SATA_SFMS_OPTIONS_FORM_TITLE),
          help   = STRING_TOKEN (STR_SATA_SFMS_OPTIONS_FORM_HELP);
        SUPPRESS_GRAYOUT_ENDIF

        suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif NOT ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_RAID;
          SB_ONEOF_SATAALTERNATEID
        SUPPRESS_GRAYOUT_ENDIF
		endif;

        suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif NOT ideqval SETUP_DATA.ULTSataInterfaceMode == SATA_MODE_RAID;
          SB_ONEOF_SATAALTERNATEID
        SUPPRESS_GRAYOUT_ENDIF
		endif;

//        subtitle text = STRING_TOKEN (STR_EMPTY_STRING);
        SEPARATOR

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SATA0_STRING),
          text   = STRING_TOKEN (STR_SATA0_NAME),
          flags  = 0,
          key    = 0;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SOFT_PRESERVE),
          text   = STRING_TOKEN (STR_SATA0_SOFT_PRESERVE_STATUS),
          flags  = 0,
          key    = 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_SATAPORT0
          SB_ONEOF_SATAHOTPLUG0
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.SataHotPlug[OFFSET_0] == 0;
          SB_ONEOF_SATAMECHANICALSW0
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_EXTERNALSATA0
          SB_ONEOF_SOLIDSTATEDRIVE0
          SB_ONEOF_SATASPINUP0
        SUPPRESS_GRAYOUT_ENDIF
        
		suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
	  	  SB_ONEOF_SATADEVSLP0
		    SB_ONEOF_SATAENABLEDITOCONFIGP0
        suppressif ideqval SETUP_DATA.SataEnableDitoConfig[OFFSET_0] == 0;
          SB_ONEOF_SATADITOVALP0
          SB_ONEOF_SATADMVALP0
        endif;
		endif;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SATA1_STRING),
          text   = STRING_TOKEN (STR_SATA1_NAME),
          flags  = 0,
          key    = 0;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SOFT_PRESERVE),
          text   = STRING_TOKEN (STR_SATA1_SOFT_PRESERVE_STATUS),
          flags  = 0,
          key    = 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_SATAPORT1
          SB_ONEOF_SATAHOTPLUG1
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.SataHotPlug[OFFSET_1] == 0;
          SB_ONEOF_SATAMECHANICALSW1
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_EXTERNALSATA1
          SB_ONEOF_SOLIDSTATEDRIVE1
          SB_ONEOF_SATASPINUP1
        SUPPRESS_GRAYOUT_ENDIF

	      suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
	        SB_ONEOF_SATADEVSLP1
	        SB_ONEOF_SATAENABLEDITOCONFIGP1
          suppressif ideqval SETUP_DATA.SataEnableDitoConfig[OFFSET_1] == 0;
            SB_ONEOF_SATADITOVALP1
            SB_ONEOF_SATADMVALP1
	        endif;
	      endif;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SATA2_STRING),
          text   = STRING_TOKEN (STR_SATA2_NAME),
          flags  = 0,
          key    = 0;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SOFT_PRESERVE),
          text   = STRING_TOKEN (STR_SATA2_SOFT_PRESERVE_STATUS),
          flags  = 0,
          key    = 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_SATAPORT2
          SB_ONEOF_SATAHOTPLUG2
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.SataHotPlug[OFFSET_2] == 0;
          SB_ONEOF_SATAMECHANICALSW2
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_EXTERNALSATA2
          SB_ONEOF_SOLIDSTATEDRIVE2
          SB_ONEOF_SATASPINUP2
        SUPPRESS_GRAYOUT_ENDIF

	      suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
	        SB_ONEOF_SATADEVSLP2
	        SB_ONEOF_SATAENABLEDITOCONFIGP2
          suppressif ideqval SETUP_DATA.SataEnableDitoConfig[OFFSET_2] == 0;
            SB_ONEOF_SATADITOVALP2
            SB_ONEOF_SATADMVALP2
	        endif;
	      endif;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SATA3_STRING),
          text   = STRING_TOKEN (STR_SATA3_NAME),
          flags  = 0,
          key    = 0;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SOFT_PRESERVE),
          text   = STRING_TOKEN (STR_SATA3_SOFT_PRESERVE_STATUS),
          flags  = 0,
          key    = 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_SATAPORT3
          SB_ONEOF_SATAHOTPLUG3
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.SataHotPlug[OFFSET_3] == 0;
          SB_ONEOF_SATAMECHANICALSW3
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_EXTERNALSATA3
          SB_ONEOF_SOLIDSTATEDRIVE3
          SB_ONEOF_SATASPINUP3
        SUPPRESS_GRAYOUT_ENDIF

	      suppressif ideqval SB_PLATFORM_DATA.LPTType == 0;
	        SB_ONEOF_SATADEVSLP3
	        SB_ONEOF_SATAENABLEDITOCONFIGP3
          suppressif ideqval SETUP_DATA.SataEnableDitoConfig[OFFSET_3] == 0;
            SB_ONEOF_SATADITOVALP3
            SB_ONEOF_SATADMVALP3
	        endif;
	      endif;

        suppressif ideqval SB_PLATFORM_DATA.LPTType == 1;
        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SATA4_STRING),
          text   = STRING_TOKEN (STR_SATA4_NAME),
          flags  = 0,
          key    = 0;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SOFT_PRESERVE),
          text   = STRING_TOKEN (STR_SATA4_SOFT_PRESERVE_STATUS),
          flags  = 0,
          key    = 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_SATAPORT4
          SB_ONEOF_SATAHOTPLUG4
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.SataHotPlug[OFFSET_4] == 0;
          SB_ONEOF_SATAMECHANICALSW4
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_EXTERNALSATA4
          SB_ONEOF_SOLIDSTATEDRIVE4
          SB_ONEOF_SATASPINUP4
        SUPPRESS_GRAYOUT_ENDIF

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SATA5_STRING),
          text   = STRING_TOKEN (STR_SATA5_NAME),
          flags  = 0,
          key    = 0;

        text
          help   = STRING_TOKEN (STR_EMPTY_STRING),
          text   = STRING_TOKEN (STR_SOFT_PRESERVE),
          text   = STRING_TOKEN (STR_SATA5_SOFT_PRESERVE_STATUS),
          flags  = 0,
          key    = 0;

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_SATAPORT5
          SB_ONEOF_SATAHOTPLUG5
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0 OR ideqval SETUP_DATA.SataHotPlug[OFFSET_5] == 0;
          SB_ONEOF_SATAMECHANICALSW5
        SUPPRESS_GRAYOUT_ENDIF

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        suppressif ideqval SETUP_DATA.SataInterfaceMode == SATA_MODE_IDE AND ideqval SB_PLATFORM_DATA.LPTType == 0;
          SB_ONEOF_EXTERNALSATA5
          SB_ONEOF_SOLIDSTATEDRIVE5
          SB_ONEOF_SATASPINUP5
        SUPPRESS_GRAYOUT_ENDIF
   
      endif;

      endform; // End of SATA_CONFIG_FORM_ID

    #endif // End of SB_FORM_SATA_CONFIG

  #endif
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
//                ADVANCED - SATA SFMS Options Form
//----------------------------------------------------------------------------
  #ifdef FORM_SET_FORM

    #ifndef SB_FORM_SATA_SFMS_OPTIONS
      #define SB_FORM_SATA_SFMS_OPTIONS

      form formid = AUTO_ID(PCH_SATA_SFMS_OPTIONS_FORM_ID),
        title     = STRING_TOKEN (STR_SATA_SFMS_OPTIONS_FORM_TITLE);

        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
          SB_ONEOF_SATARAIDR0
          SB_ONEOF_SATARAIDR1
          SB_ONEOF_SATARAIDR10
          SB_ONEOF_SATARAIDR5
          SB_ONEOF_SATARAIDIRRT
          SB_ONEOF_SATARAIDOUB
          SB_ONEOF_SATAHDDLK
          SB_ONEOF_SATALEDL
          SB_ONEOF_SATARAIDIOOE
          SB_ONEOF_SMARTSTORAGE
          SB_ONEOF_OROMUIDELAY
        endif;

      endform; //End of PCH_RAID_SFMS_OPTIONS_FORM_ID

    #endif // End of SB_FORM_SATA_SFMS_OPTIONS

//DW01_Custom_Support_RTC_Wake >>
		form formid = AUTO_ID(S5_RTCWAKE_FORM_ID),
			title = STRING_TOKEN(STR_S5_RTCWAKE_FORM);

			AAEON_WAKEONRTC						//AAEON_RTC_001_Elflo+

//AAEON_RTC_001_Elflo- >>
//	  grayoutif ideqval SETUP_DATA.DynamicWakeOnRTCS5 == 1;
//	  AAEON_ONEOF_FIXED_WAKEONRTCS5
//	  endif;
//AAEON_RTC_001_Elflo- <<

//	  suppressif  ideqval SETUP_DATA.FixedWakeOnRTCS5 == 0;	//AAEON_RTC_001_Elflo- 
			suppressif NOT ideqval SETUP_DATA.AaeonWakeOnRtc == 1;	//AAEON_RTC_001_Elflo+
			AAEON_NUM_RTCWAKEUP_TIMEDAY
			AAEON_NUM_RTCWAKEUP_TIMEHOUR
			AAEON_NUM_RTCWAKEUP_TIMEMINUTE
			AAEON_NUM_RTCWAKEUP_TIMESECOND
			endif;	  
//AAEON_RTC_001_Elflo- >>	  
//	  SEPARATOR
//	  grayoutif ideqval SETUP_DATA.FixedWakeOnRTCS5 == 1;
//	  AAEON_ONEOF_DYNAMIC_WAKEONRTCS5
//	  endif;
//AAEON_RTC_001_Elflo- <<

//	  suppressif  ideqval SETUP_DATA.DynamicWakeOnRTCS5 == 0; //AAEON_RTC_001_Elflo- 	  
			suppressif NOT ideqval SETUP_DATA.AaeonWakeOnRtc == 2;	  //AAEON_RTC_001_Elflo+
			AAEON_NUM_RTCWAKEUP_TIMEMINUTEINCREASE
			endif;
		endform;  // AAEON_FORM_ID
//DW01_Custom_Support_RTC_Wake <<

  #endif 
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------

#endif // ADVANCED_FORM_SET


//------------------------------------------------------------------------------------      

//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2011, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************
