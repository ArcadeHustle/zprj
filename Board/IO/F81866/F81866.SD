//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2011, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************
//
//*************************************************************************
// $Header: /Alaska/BIN/IO/Fintek/F81866/F81866.SD 3     2/03/12 1:47a Elviscai $
//
// $Revision: 3 $
//
// $Date: 2/03/12 1:47a $
//*************************************************************************
// Revision History
// ----------------
// $Log: /Alaska/BIN/IO/Fintek/F81866/F81866.SD $
// 
// 3     2/03/12 1:47a Elviscai
// [TAG]  		EIPNONE
// [Category]  	Improvement
// [Description]  	Remove _PRS 0x3F8/0x3E8 from UART3/4/5/6
// 
// 2     12/14/11 9:20p Kasalinyi
// [TAG]  		EIPNone
// [Category]  	Improvement
// [Description]  	Fix Smart Function build error
// [Files]  		F81866DXE.C
// F81866.UNI
// F81866.MAK
// IO_F81866.SDL
// 
// 1     7/20/11 4:22a Kasalinyi
// [Category]  	Improvement
// [Description]  	Initial Porting 
// [Files]  		F81866.CIF
// IO_F81866.SDL
// F81866.ASL
// F81866.MAK
// F81866.SD
// F81866.UNI
// F81866DXE.C
// F81866PEI.C
// F81866PeiDebugger.C
// F81866Setup.C
// F81866Setup.H
// History.txt
// F81866.chm
// 
// 4     3/21/11 9:41p Mikes
// seperate the core and oem job
// 
//*************************************************************************
//<AMI_FHDR_START>
//
// Name:  <F81866.SD>
//
// Description: SIO Form Template, Setup screen definition file
//
//<AMI_FHDR_END>
//*************************************************************************

#ifdef SETUP_DATA_DEFINITION
/***********************************************************/
/* Put NVRAM data definitions here.
/* For example:    UINT8 Data1;
/* These definitions will be converted by the build process
/* to a definitions of SETUP_DATA fields.
/***********************************************************/
    UINT8   SmartFanEnable;

	UINT8   Fan1TempSrc;
    UINT8   Fan1SmartFanMode;
    UINT16  Fan1Mode0FixedSpeed;
    UINT8   Fan1Mode1FixedDuty;
    UINT8   Fan1Mode2AutoRpmT1;
    UINT8   Fan1Mode2AutoRpmT2;
    UINT8   Fan1Mode2AutoRpmT3;
    UINT8   Fan1Mode2AutoRpmT4;
    UINT8   Fan1Mode2AutoRpmF1;
    UINT8   Fan1Mode2AutoRpmF2;
    UINT8   Fan1Mode2AutoRpmF3;
    UINT8   Fan1Mode2AutoRpmF4;
    UINT8   Fan1Mode2AutoRpmF5;
    UINT8   Fan1Mode3AutoDutyT1;
    UINT8   Fan1Mode3AutoDutyT2;
    UINT8   Fan1Mode3AutoDutyT3;
    UINT8   Fan1Mode3AutoDutyT4;
    UINT8   Fan1Mode3AutoDutyF1;
    UINT8   Fan1Mode3AutoDutyF2;
    UINT8   Fan1Mode3AutoDutyF3;
    UINT8   Fan1Mode3AutoDutyF4;
    UINT8   Fan1Mode3AutoDutyF5;

	UINT8   Fan2TempSrc;
    UINT8   Fan2SmartFanMode;
    UINT16  Fan2Mode0FixedSpeed;
    UINT8   Fan2Mode1FixedDuty;
    UINT8   Fan2Mode2AutoRpmT1;
    UINT8   Fan2Mode2AutoRpmT2;
    UINT8   Fan2Mode2AutoRpmT3;
    UINT8   Fan2Mode2AutoRpmT4;
    UINT8   Fan2Mode2AutoRpmF1;
    UINT8   Fan2Mode2AutoRpmF2;
    UINT8   Fan2Mode2AutoRpmF3;
    UINT8   Fan2Mode2AutoRpmF4;
    UINT8   Fan2Mode2AutoRpmF5;
    UINT8   Fan2Mode3AutoDutyT1;
    UINT8   Fan2Mode3AutoDutyT2;
    UINT8   Fan2Mode3AutoDutyT3;
    UINT8   Fan2Mode3AutoDutyT4;
    UINT8   Fan2Mode3AutoDutyF1;
    UINT8   Fan2Mode3AutoDutyF2;
    UINT8   Fan2Mode3AutoDutyF3;
    UINT8   Fan2Mode3AutoDutyF4;
    UINT8   Fan2Mode3AutoDutyF5;

    UINT8   Fan3TempSrc;
    UINT8   Fan3SmartFanMode;
    UINT16  Fan3Mode0FixedSpeed;
    UINT8   Fan3Mode1FixedDuty;
    UINT8   Fan3Mode2AutoRpmT1;
    UINT8   Fan3Mode2AutoRpmT2;
    UINT8   Fan3Mode2AutoRpmT3;
    UINT8   Fan3Mode2AutoRpmT4;
    UINT8   Fan3Mode2AutoRpmF1;
    UINT8   Fan3Mode2AutoRpmF2;
    UINT8   Fan3Mode2AutoRpmF3;
    UINT8   Fan3Mode2AutoRpmF4;
    UINT8   Fan3Mode2AutoRpmF5;
    UINT8   Fan3Mode3AutoDutyT1;
    UINT8   Fan3Mode3AutoDutyT2;
    UINT8   Fan3Mode3AutoDutyT3;
    UINT8   Fan3Mode3AutoDutyT4;
    UINT8   Fan3Mode3AutoDutyF1;
    UINT8   Fan3Mode3AutoDutyF2;
    UINT8   Fan3Mode3AutoDutyF3;
    UINT8   Fan3Mode3AutoDutyF4;
    UINT8   Fan3Mode3AutoDutyF5;

    UINT8   ParallelGpioSettings;
    UINT8   F81866LptGpioConfiguration7x[8]; // GPIO7x
    UINT8   F81866LptGpioConfiguration7xLevel[8];
    UINT8   F81866LptGpioConfiguration8x[8]; // GPIO8x
    UINT8   F81866LptGpioConfiguration8xLevel[8];
#endif //SETUP_DATA_DEFINITION

//-------------------------------------------------------------------------
//Select Top level menu itmem (forset) for you pages
//-------------------------------------------------------------------------
#ifdef ADVANCED_FORM_SET

//-------------------------------------------------------------------------
//If you need any additional type definitions add them here
//-------------------------------------------------------------------------
#ifdef FORM_SET_TYPEDEF
    #include "F81866Setup.H"
    #include "Token.h"
#endif

//-------------------------------------------------------------------------
//If you need custom varstore's define them here
//-------------------------------------------------------------------------
#ifdef FORM_SET_VARSTORE

    //Callback varstore
    #if BOARD_LABEL_BELOW_25
    #if EFI_SPECIFICATION_VERSION>0x20000
    AMI_CALLBACK_VARSTORE
    #endif
    #endif

    #ifdef SETUP_DATA_DEFINITION
    AUTO_ID(FDC_V_DATA_KEY)
    AUTO_ID(FDC_NV_DATA_KEY)
    AUTO_ID(LPT_V_DATA_KEY)
    AUTO_ID(LPT_NV_DATA_KEY)
    AUTO_ID(COMA_V_DATA_KEY)
    AUTO_ID(COMA_NV_DATA_KEY)
    AUTO_ID(COMB_V_DATA_KEY)
    AUTO_ID(COMB_NV_DATA_KEY)
    AUTO_ID(COMC_V_DATA_KEY)
    AUTO_ID(COMC_NV_DATA_KEY)
    AUTO_ID(COMD_V_DATA_KEY)
    AUTO_ID(COMD_NV_DATA_KEY)
    AUTO_ID(COME_V_DATA_KEY)
    AUTO_ID(COME_NV_DATA_KEY)
    AUTO_ID(COMF_V_DATA_KEY)
    AUTO_ID(COMF_NV_DATA_KEY)
    #endif
    AMI_SIO_VARSTORE(FDC, PNP0604_0)
    AMI_SIO_VARSTORE(LPT, PNP0400_0)
    AMI_SIO_VARSTORE(COMA, PNP0501_0)
    AMI_SIO_VARSTORE(COMB, PNP0501_1)
    AMI_SIO_VARSTORE(COMC, PNP0501_2)
    AMI_SIO_VARSTORE(COMD, PNP0501_3)
    AMI_SIO_VARSTORE(COME, PNP0501_4)
    AMI_SIO_VARSTORE(COMF, PNP0501_5)

#endif

//-------------------------------------------------------------------------
//Define controls to be added to the top level page of the formset
//-------------------------------------------------------------------------
#ifdef FORM_SET_ITEM
#endif

//-------------------------------------------------------------------------
//Define goto commands for the forms defined in this file
//-------------------------------------------------------------------------
#ifdef FORM_SET_GOTO
    goto F81866_FORM_ID,
    prompt  = STRING_TOKEN(STR_F81866_SIO_FORM),
    help    = STRING_TOKEN(STR_F81866_SIO_FORM_HELP);

    #if F81866_HWM_PRESENT
    goto HMM_CONFIG_FORM_ID,
    prompt  = STRING_TOKEN(STR_F81866_HMM_CONFIGURATION),
    help    = STRING_TOKEN(STR_F81866_HMM_CONFIGURATION_HELP);
    #endif

#endif

//-------------------------------------------------------------------------
// Define forms
//-------------------------------------------------------------------------
#ifdef FORM_SET_FORM

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define HWM formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    #if F81866_HWM_PRESENT
    //Define HWM formset form
    form formid = AUTO_ID(HMM_CONFIG_FORM_ID),
        title = STRING_TOKEN(STR_F81866_HMM_CONFIGURATION);
     
        SUBTITLE(STRING_TOKEN(STR_PC_HEALTH))
     
        SEPARATOR
        //
#if F81866_SMF_SUPPORT
    checkbox varid  = SETUP_DATA.SmartFanEnable,
        prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_PROMPT),
        help        = STRING_TOKEN(STR_F81866_SMARTFAN_PROMPT_HELP),
        flags       = 1 | RESET_REQUIRED, 
    endcheckbox;

    //Goto Smart Fan Form
    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
        goto SIO_SMARTFAN_FORM_ID,
        prompt  = STRING_TOKEN(STR_F81866_SMARTFAN_FORM),
        help    = STRING_TOKEN(STR_F81866_SMARTFAN_FORM_HELP);
    endif;
#endif //#if F81866_SMF_SUPPORT

        SEPARATOR
        // System Temperature1
        #if EFI_SPECIFICATION_VERSION>0x20000
        INTERACTIVE_TEXT(STRING_TOKEN(STR_EMPTY), STRING_TOKEN(STR_F81866_SYSTEM_TEMP1), STRING_TOKEN(STR_F81866_SYSTEM_TEMP1_VALUE),  AUTO_ID(HWM_INTERACTIVE_KEY))
        #else
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP1),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP1_VALUE),
        flags  = INTERACTIVE,
        key    = HWM_INTERACTIVE_KEY;
        #endif
        //
        // System Temperature2
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP2),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP2_VALUE),
        flags  = 0,
        key    = 0;
        //
        // System Temperature3
        #if (F81866_PECI_SUPPORT)
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP3),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP3_VALUE),
        flags  = 0,
        key    = 0;
        #endif
        //
        // System Temperature4/5/6
        #if (F81866_IBEX_SUPPORT)
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP4),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP4_VALUE),
        flags  = 0,
        key    = 0;
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP5),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP5_VALUE),
        flags  = 0,
        key    = 0;
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP6),
        text   = STRING_TOKEN(STR_F81866_SYSTEM_TEMP6_VALUE),
        flags  = 0,
        key    = 0;
        #endif
        //
        // System FAN1 Speed
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_FAN1_SPEED),
        text   = STRING_TOKEN(STR_F81866_FAN1_SPEED_VALUE),
        flags  = 0,
        key    = 0;
        //
        // System FAN2 Speed
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_FAN2_SPEED),
        text   = STRING_TOKEN(STR_F81866_FAN2_SPEED_VALUE),
        flags  = 0,
        key    = 0;
        //
//        // System FAN3 Speed
//        text
//        help   = STRING_TOKEN(STR_EMPTY),
//        text   = STRING_TOKEN(STR_F81866_FAN3_SPEED),
//        text   = STRING_TOKEN(STR_F81866_FAN3_SPEED_VALUE),
//        flags  = 0,
//        key    = 0;
        //
        // Vin1
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN1),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN1_VALUE),
        flags  = 0,
        key    = 0;        
        //
        // Vin2
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN2),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN2_VALUE),
        flags  = 0,
        key    = 0;        
        //
        // Vin3
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN3),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN3_VALUE),
        flags  = 0,
        key    = 0;    
        //
        // Vin4
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN4),
        text   = STRING_TOKEN(STR_F81866_HMM_VIN4_VALUE),
        flags  = 0,
        key    = 0;    
        //
        // VSB5V
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VSB5V),
        text   = STRING_TOKEN(STR_F81866_HMM_VSB5V_VALUE),
        flags  = 0,
        key    = 0;    
        //
        // VCC3V
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VCC3V),
        text   = STRING_TOKEN(STR_F81866_HMM_VCC3V_VALUE),
        flags  = 0,
        key    = 0;
        //
        // VSB3V
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VSB3V),
        text   = STRING_TOKEN(STR_F81866_HMM_VSB3V_VALUE),
        flags  = 0,
        key    = 0;       
        //
        // VBAT
        text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_F81866_HMM_VBAT),
        text   = STRING_TOKEN(STR_F81866_HMM_VBAT_VALUE),
        flags  = 0,
        key    = 0;  

    endform;//HWM form
    #endif//End of #if F81866_HWM_PRESENT
////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////Define SmartFan formset form////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Smart Fan Setup setting.
#if F81866_SMF_SUPPORT 
  form formid = AUTO_ID(SIO_SMARTFAN_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SMARTFAN_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SMARTFAN_FORM))
	
	SEPARATOR
	
//System FAN Smart function setting--

    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
		oneof varid     = SETUP_DATA.Fan1SmartFanMode,
            prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN1),
            help        = STRING_TOKEN(STR_F81866_SMARTFAN_CONFIG_HELP),
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3), value = 3, flags = DEFAULT |RESET_REQUIRED;
        endoneof;
    endif;

    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
			oneof varid     = SETUP_DATA.Fan1TempSrc,\
				prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC),\
				help        = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_HELP),\
				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T3), value = 0, flags = DEFAULT | RESET_REQUIRED;\
				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T1), value = 1, flags = RESET_REQUIRED;\
				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T2), value = 2, flags = RESET_REQUIRED;\
			endoneof;
    endif;

        suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x00
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode0FixedSpeed,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 500,
				maximum   = 10000,
				step      = 1,
				default   = 2000,
			endnumeric;
        endif;

		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x01
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode1FixedDuty,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmT1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmT2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmT3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 40,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmT4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 30,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmF1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 85,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmF2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 70,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmF3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmF4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode2AutoRpmF5,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F5),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyT1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyT2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyT3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 40,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyT4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 30,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyF1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 85,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyF2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 70,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyF3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyF4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan1SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan1Mode3AutoDutyF5,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F5),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

    SEPARATOR
    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
		oneof varid     = SETUP_DATA.Fan2SmartFanMode,
            prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN2),
            help        = STRING_TOKEN(STR_F81866_SMARTFAN_CONFIG_HELP),
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3), value = 3, flags = DEFAULT |RESET_REQUIRED;
        endoneof;
    endif;

    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
			oneof varid     = SETUP_DATA.Fan2TempSrc,\
				prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC),\
				help        = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_HELP),\
				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T3), value = 0, flags = RESET_REQUIRED;\
				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T1), value = 1, flags = DEFAULT | RESET_REQUIRED;\
				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T2), value = 2, flags = RESET_REQUIRED;\
			endoneof;
    endif;

        suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x00
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode0FixedSpeed,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 500,
				maximum   = 10000,
				step      = 1,
				default   = 2000,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x01
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode1FixedDuty,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmT1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmT2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmT3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 40,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmT4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 30,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmF1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 85,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmF2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 70,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmF3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmF4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x02
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode2AutoRpmF5,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F5),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyT1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyT2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyT3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 40,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyT4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 30,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyF1,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F1),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 85,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyF2,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F2),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 70,
			endnumeric;
        endif;
		
		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyF3,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F3),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 60,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyF4,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F4),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

		suppressif NOT ideqval SETUP_DATA.Fan2SmartFanMode == 0x03
                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
			numeric varid = SETUP_DATA.Fan2Mode3AutoDutyF5,
				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F5),
				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
				flags     = RESET_REQUIRED,
				minimum   = 1,
				maximum   = 100,
				step      = 1,
				default   = 50,
			endnumeric;
        endif;

// Zprj Not Supported FAN3
//    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			oneof varid     = SETUP_DATA.Fan3TempSrc,\
//				prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC),\
//				help        = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_HELP),\
//				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T3), value = 0, flags = RESET_REQUIRED;\
//				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T1), value = 1, flags = DEFAULT | RESET_REQUIRED;\
//				option text = STRING_TOKEN(STR_F81866_SMARTFAN_TMPSRC_T2), value = 2, flags = RESET_REQUIRED;\
//			endoneof;
//    endif;
//
//    suppressif ideqval SETUP_DATA.SmartFanEnable == 0x00;
//		oneof varid     = SETUP_DATA.Fan3SmartFanMode,
//            prompt      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN3),
//            help        = STRING_TOKEN(STR_F81866_SMARTFAN_CONFIG_HELP),
//            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0), value = 0, flags = RESET_REQUIRED;
//            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1), value = 1, flags = RESET_REQUIRED;
//            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2), value = 2, flags = RESET_REQUIRED;
//            option text = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3), value = 3, flags = DEFAULT |RESET_REQUIRED;
//        endoneof;
//    endif;
//        suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x00
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode0FixedSpeed,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE0_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 500,
//				maximum   = 10000,
//				step      = 1,
//				default   = 2000,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x01
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode1FixedDuty,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE1_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 60,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmT1,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T1),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 60,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmT2,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T2),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 50,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmT3,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T3),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 40,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmT4,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_T4),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 30,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmF1,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F1),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 85,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmF2,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F2),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 70,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmF3,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F3),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 60,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmF4,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F4),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 50,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x02
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode2AutoRpmF5,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_RPM_F5),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE2_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 50,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyT1,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T1),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 60,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyT2,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T2),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 50,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyT3,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T3),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 40,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyT4,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_T4),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 30,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyF1,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F1),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 85,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyF2,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F2),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 70,
//			endnumeric;
//        endif;
//		
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyF3,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F3),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 60,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyF4,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F4),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 50,
//			endnumeric;
//        endif;
//
//		suppressif NOT ideqval SETUP_DATA.Fan3SmartFanMode == 0x03
//                    OR ideqval SETUP_DATA.SmartFanEnable == 0x00;
//			numeric varid = SETUP_DATA.Fan3Mode3AutoDutyF5,
//				prompt    = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_AUTO_DUTY_F5),
//				help      = STRING_TOKEN(STR_F81866_SMARTFAN_FAN_MODE3_HELP),
//				flags     = RESET_REQUIRED,
//				minimum   = 1,
//				maximum   = 100,
//				step      = 1,
//				default   = 50,
//			endnumeric;
//        endif;

  endform;
#endif    // F81866_SMF_SUPPORT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SIO formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SIO_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SIO_FORM))
    
        SEPARATOR
    
        text
        help   = STRING_TOKEN(STR_F81866_SIO_FORM_HELP),
        text   = STRING_TOKEN(STR_F81866_SIO_PROMPT),
        text   = STRING_TOKEN(STR_F81866),
        flags  = 0,
        key    = 0;
    
        //Goto Floppy Form
        suppressif ideqval FDC_V_DATA.DevImplemented == 0x00;
            goto F81866_FLOPPY_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_FLOPPY_FORM),
            help    = STRING_TOKEN(STR_F81866_FLOPPY_FORM_HELP);
        endif;
    
        //Goto Serial 0 Form
        suppressif ideqval COMA_V_DATA.DevImplemented == 0x00;
            goto F81866_SERIAL0_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_SERIAL0_FORM),
            help    = STRING_TOKEN(STR_F81866_SERIAL0_FORM_HELP);
        endif;
    
        //Goto Serial 1 Form
        suppressif ideqval COMB_V_DATA.DevImplemented == 0x00;
            goto F81866_SERIAL1_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_SERIAL1_FORM),
            help    = STRING_TOKEN(STR_F81866_SERIAL1_FORM_HELP);
        endif;
    
        //Goto Serial 2 Form
        suppressif ideqval COMC_V_DATA.DevImplemented == 0x00;
            goto F81866_SERIAL2_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_SERIAL2_FORM),
            help    = STRING_TOKEN(STR_F81866_SERIAL2_FORM_HELP);
        endif;
    
        //Goto Serial 3 Form
        suppressif ideqval COMD_V_DATA.DevImplemented == 0x00;
            goto F81866_SERIAL3_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_SERIAL3_FORM),
            help    = STRING_TOKEN(STR_F81866_SERIAL3_FORM_HELP);
        endif;
    
        //Goto Serial 4 Form
        suppressif ideqval COME_V_DATA.DevImplemented == 0x00;
            goto F81866_SERIAL4_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_SERIAL4_FORM),
            help    = STRING_TOKEN(STR_F81866_SERIAL4_FORM_HELP);
        endif;
    
        //Goto Serial 5 Form
        suppressif ideqval COMF_V_DATA.DevImplemented == 0x00;
            goto F81866_SERIAL5_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_SERIAL5_FORM),
            help    = STRING_TOKEN(STR_F81866_SERIAL5_FORM_HELP);
        endif;
    
        //Goto Parallel Form
        suppressif ideqval LPT_V_DATA.DevImplemented == 0x00;
            goto F81866_PARALLEL_FORM_ID,
            prompt  = STRING_TOKEN(STR_F81866_PARALLEL_FORM),
            help    = STRING_TOKEN(STR_F81866_PARALLEL_FORM_HELP);
        endif;

      endform;//SIO Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define FDC formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_FLOPPY_FORM_ID),
        title = STRING_TOKEN(STR_F81866_FLOPPY_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_FLOPPY_FORM))
    
        SEPARATOR
    
        checkbox varid    = FDC_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_FLOPPY_PROMPT),
            help    = STRING_TOKEN(STR_F81866_FLOPPY_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED,
        endcheckbox;
    
        suppressif ideqval FDC_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_FLOPPY_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_FLOPPY_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif; //SIO_SETUP_VAR.FdcEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval FDC_NV_DATA.DevEnable == 0x00;
            oneof varid     = FDC_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_FLOPPY_SETTINGS1), value = 1, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_FLOPPY_SETTINGS2), value = 2, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_FLOPPY_SETTINGS3), value = 3, flags = RESET_REQUIRED;
            endoneof;
        endif; //SIO_SETUP_VAR.FdcEnable == 0x00;
    
        suppressif ideqval FDC_NV_DATA.DevEnable == 0x00;
            oneof varid     = FDC_NV_DATA.DevMode,
                prompt      = STRING_TOKEN(STR_SELECT_MODE),
                help        = STRING_TOKEN(STR_F81866_FLOPPY_MODE_HELP),
                option text = STRING_TOKEN(STR_F81866_FLOPPY_MODE1), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_FLOPPY_MODE2), value = 1, flags = RESET_REQUIRED;
            endoneof;
        endif; //SIO_SETUP_VAR.FdcEnable == 0x00;
    endform; //Floppy  Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SP0 formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_SERIAL0_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SERIAL0_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SERIAL0_FORM))
    
        SEPARATOR
    
        checkbox varid    = COMA_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED, 
        endcheckbox;
    
        suppressif ideqval COMA_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_SERIAL0_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.ComAEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval COMA_NV_DATA.DevEnable == 0x00;
            oneof varid = COMA_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL0_SETTINGS1), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS2), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS3), value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS4), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS5), value = 5, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.ComAEnable == 0x00;

    endform;  //Serial 0 Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SP1 formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_SERIAL1_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SERIAL1_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SERIAL1_FORM))
    
        SEPARATOR
    
        checkbox varid    = COMB_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED, 
        endcheckbox;
    
        suppressif ideqval COMB_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_SERIAL1_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.ComBEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval COMB_NV_DATA.DevEnable == 0x00;
            oneof varid = COMB_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL1_SETTINGS1), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS2), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS3), value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS4), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS5), value = 5, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.ComBEnable == 0x00;

    endform;  // Serial 1 Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SP2 formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_SERIAL2_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SERIAL2_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SERIAL2_FORM))
    
        SEPARATOR
    
        checkbox varid    = COMC_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED, 
        endcheckbox;
    
        suppressif ideqval COMC_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_SERIAL2_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.ComCEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval COMC_NV_DATA.DevEnable == 0x00;
            oneof varid = COMC_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL2_SETTINGS1), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS4), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS5), value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS6), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS7), value = 5, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.ComCEnable == 0x00;

    endform;  // Serial 2 Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SP3 formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_SERIAL3_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SERIAL3_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SERIAL3_FORM))
    
        SEPARATOR
    
        checkbox varid    = COMD_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED, 
        endcheckbox;
    
        suppressif ideqval COMD_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_SERIAL3_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.ComDEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval COMD_NV_DATA.DevEnable == 0x00;
            oneof varid = COMD_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL3_SETTINGS1), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS4), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS5), value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS6), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS7), value = 5, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.ComDEnable == 0x00;

    endform;  // Serial 3 Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SP4 formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_SERIAL4_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SERIAL4_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SERIAL4_FORM))
    
        SEPARATOR
    
        checkbox varid    = COME_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED, 
        endcheckbox;
    
        suppressif ideqval COME_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_SERIAL4_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.ComEEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval COME_NV_DATA.DevEnable == 0x00;
            oneof varid = COME_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL4_SETTINGS1), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS6), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS7), value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS6), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS7), value = 5, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.ComEEnable == 0x00;

    endform;  // Serial 4 Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////Define SP5 formset form////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_SERIAL5_FORM_ID),
        title = STRING_TOKEN(STR_F81866_SERIAL5_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_SERIAL5_FORM))
    
        SEPARATOR
    
        checkbox varid    = COMF_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED, 
        endcheckbox;
    
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
            text
            help   = STRING_TOKEN(STR_F81866_SERIAL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_SERIAL5_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.ComFEnable == 0x00;
    
        SEPARATOR
    
        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
            oneof varid = COMF_NV_DATA.DevPrsId,
                prompt      = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL5_SETTINGS1), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS6), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS7), value = 3, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS6), value = 4, flags = RESET_REQUIRED;
//                option text = STRING_TOKEN(STR_F81866_SERIAL_SETTINGS7), value = 5, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.ComFEnable == 0x00;
    
//        suppressif ideqval COMF_NV_DATA.DevEnable == 0x00;
        suppressif TRUE;
            oneof varid = COMF_NV_DATA.DevMode,
                prompt      = STRING_TOKEN(STR_SELECT_MODE),
                help        = STRING_TOKEN(STR_F81866_SERIAL_MODE_HELP),
                option text = STRING_TOKEN(STR_F81866_SERIAL6_MODE1), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL6_MODE2), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_SERIAL6_MODE3), value = 2, flags = RESET_REQUIRED;
            endoneof;
        endif;   
    endform;  // Serial 5 Form

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////Define Paralel formset form//////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    form formid = AUTO_ID(F81866_PARALLEL_FORM_ID),
        title = STRING_TOKEN(STR_F81866_PARALLEL_FORM);
        SUBTITLE(STRING_TOKEN(STR_F81866_PARALLEL_FORM))
    
        SEPARATOR
    
        checkbox varid    = LPT_NV_DATA.DevEnable,
            prompt    = STRING_TOKEN(STR_F81866_PARALLEL_PROMPT),
            help    = STRING_TOKEN(STR_F81866_PARALLEL_PROMPT_HELP),
            flags    = 1 | RESET_REQUIRED,
        endcheckbox;
    
        suppressif ideqval LPT_NV_DATA.DevEnable == 0x0;
            text
            help   = STRING_TOKEN(STR_F81866_PARALLEL_PROMPT_HELP),
            text   = STRING_TOKEN(STR_CURRENT_CONFIG),
            text   = STRING_TOKEN(STR_F81866_PARALLEL_CONFIG_VALUE),
            flags  = 0,
            key    = 0;
        endif;    // suppressif SIO_SETUP_VAR.LptEnable == 0x0;
    
        SEPARATOR
    
        suppressif ideqval LPT_NV_DATA.DevEnable == 0x0
            OR ideqval LPT_NV_DATA.DevMode == 0x4
			OR ideqval LPT_NV_DATA.DevMode == 0x5
            OR ideqval LPT_NV_DATA.DevMode == 0x6;
            oneof varid = LPT_NV_DATA.DevPrsId,
                prompt        = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS0), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS1), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS2), value = 3, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS3), value = 4, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS4), value = 5, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS5), value = 6, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_PARALLEL_SETTINGS6), value = 7, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.LptEnable == 0x0;
    
        suppressif ideqval LPT_NV_DATA.DevEnable == 0x0 
            OR ideqval LPT_NV_DATA.DevMode == 0x1
			OR ideqval LPT_NV_DATA.DevMode == 0x2
			OR ideqval LPT_NV_DATA.DevMode == 0x3
            OR ideqval LPT_NV_DATA.DevMode == 0x0;
            oneof varid = LPT_NV_DATA.DevPrsId,
                prompt        = STRING_TOKEN(STR_CHANGE_CONFIG),
                help        = STRING_TOKEN(STR_SETTINGS_HELP),
                option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS0), value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS1), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS2), value = 3, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS3), value = 4, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS4), value = 5, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS5), value = 6, flags = RESET_REQUIRED;
    //            option text = STRING_TOKEN(STR_F81866_PARALLELE_SETTINGS6), value = 7, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.LptEnable == 0x0;
    
        suppressif ideqval LPT_NV_DATA.DevEnable == 0x0;
            oneof varid = LPT_NV_DATA.DevMode,
                prompt        = STRING_TOKEN(STR_SELECT_MODE),
                help        = STRING_TOKEN(STR_F81866_PARALLEL_MODE_HELP),
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE0), value = 0, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE1), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE2), value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE3), value = 3, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE4), value = 4, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE5), value = 5, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_F81866_PARALLEL_MODE6), value = 6, flags = RESET_REQUIRED;
            endoneof;
        endif;    // suppressif SIO_SETUP_VAR.LptEnable == 0x0;
    
        suppressif NOT ideqval LPT_NV_DATA.DevEnable == 0x0;
        SEPARATOR
//        oneof varid     = SETUP_DATA.ParallelGpioSettings,
//            prompt      = STRING_TOKEN(STR_F81866_PARALLEL_GPIO_SETTINGS),
//            help        = STRING_TOKEN(STR_F81866_PARALLEL_GPIO_SETTINGS),
//            option text = STRING_TOKEN(STR_F81866_PARALLEL_PROMPT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//            option text = STRING_TOKEN(STR_F81866_GPIO), value = 1, flags = RESET_REQUIRED;
//        endoneof;
        checkbox varid  = SETUP_DATA.ParallelGpioSettings,
            prompt      = STRING_TOKEN(STR_F81866_PARALLEL_GPIO_SETTINGS),
            help        = STRING_TOKEN(STR_F81866_PARALLEL_GPIO_SETTINGS),
            flags       = 0 | RESET_REQUIRED, 
        endcheckbox;

		suppressif ideqval SETUP_DATA.ParallelGpioSettings == 0;
        // GPIO70
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[0],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO70),\
		    help   = STRING_TOKEN (STR_F81866_GPIO70),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[0] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[0],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO71
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[1],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO71),\
		    help   = STRING_TOKEN (STR_F81866_GPIO71),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[1] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[1],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO72
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[2],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO72),\
		    help   = STRING_TOKEN (STR_F81866_GPIO72),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[2] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[2],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO73
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[3],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO73),\
		    help   = STRING_TOKEN (STR_F81866_GPIO73),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[3] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[3],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO74
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[4],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO74),\
		    help   = STRING_TOKEN (STR_F81866_GPIO74),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[4] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[4],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO75
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[5],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO75),\
		    help   = STRING_TOKEN (STR_F81866_GPIO75),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[5] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[5],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO76
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[6],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO76),\
		    help   = STRING_TOKEN (STR_F81866_GPIO76),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[6] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[6],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO77
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration7x[7],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO77),\
		    help   = STRING_TOKEN (STR_F81866_GPIO77),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration7x[7] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration7xLevel[7],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO80
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[0],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO80),\
		    help   = STRING_TOKEN (STR_F81866_GPIO80),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[0] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[0],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO81
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[1],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO81),\
		    help   = STRING_TOKEN (STR_F81866_GPIO81),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[1] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[1],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO82
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[2],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO82),\
		    help   = STRING_TOKEN (STR_F81866_GPIO82),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[2] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[2],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO83
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[3],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO83),\
		    help   = STRING_TOKEN (STR_F81866_GPIO83),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[3] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[3],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO84
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[4],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO84),\
		    help   = STRING_TOKEN (STR_F81866_GPIO84),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[4] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[4],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO85
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[5],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO85),\
		    help   = STRING_TOKEN (STR_F81866_GPIO85),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[5] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[5],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO86
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[6],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO86),\
		    help   = STRING_TOKEN (STR_F81866_GPIO86),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[6] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[6],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;
        // GPIO87
        oneof varid = SETUP_DATA.F81866LptGpioConfiguration8x[7],\
		    prompt = STRING_TOKEN (STR_F81866_GPIO87),\
		    help   = STRING_TOKEN (STR_F81866_GPIO87),\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_INPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
		    option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT), value = 1, flags = RESET_REQUIRED;\
		endoneof;\
		suppressif ideqval SETUP_DATA.F81866LptGpioConfiguration8x[7] == 0;\
			oneof varid = SETUP_DATA.F81866LptGpioConfiguration8xLevel[7],\
			prompt = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			help   = STRING_TOKEN (STR_F81866_GPIO_LEVEL_PROMPT),\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_LOW), value = 0, flags = RESET_REQUIRED;\
			option text  = STRING_TOKEN (STR_F81866_GPIO_OUTPUT_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
			endoneof;\
		endif;        
        endif ; //suppressif ideqval SETUP_DATA.ParallelGpioSettings == 0;
        endif; //suppressif NOT ideqval LPT_NV_DATA.DevEnable == 0x0;
    endform;  // Parralel Form

#endif //FORM_SET_FORM

#endif//ADVANCED_FORM_SET

//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2011, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************

