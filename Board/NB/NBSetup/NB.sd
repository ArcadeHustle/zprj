//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2011, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************

//*************************************************************************
// $Header: /Alaska/BIN/Chipset/Intel/NorthBridge/Haswell/Intel SystemAgent NB Board/NBSetup/NB.sd 43    5/28/14 3:16a Dennisliu $
//
// $Revision: 43 $
//
// $Date: 5/28/14 3:16a $
//*************************************************************************
// Revision History
// ----------------
// $Log: /Alaska/BIN/Chipset/Intel/NorthBridge/Haswell/Intel SystemAgent NB Board/NBSetup/NB.sd $
// 
// 43    5/28/14 3:16a Dennisliu
// [TAG]           NONE
// [Category]      Improvement
// [Description]   Create a Token "DEFAULT_REFRESH_2X_POLICY" for customer
// to decide the default value.
// [Files]         NBSetup.sdl; NB.sd;
// 
// 42    4/02/14 2:06a Dennisliu
// [TAG]           EIP160850
// [Category]      Improvement
// [Description]   Primary Display/PEG/PCIE Setup options do not match
// their help text.
// [Files]         NB.sd; NB.uni;
// 
// 41    7/09/13 4:02a Ireneyang
// [TAG]         None
// [Category]    Improvement
// [Description] Add new feature CRID into SMBIOS Type88.
// [Files]       NB.sd; NBSetup.c; NBSetup.sdl;
// 
// 40    5/23/13 11:46p Ireneyang
// [TAG]         None
// [Category]    Improvement
// [Description] Fix Typo error.
// [Files]       NB.sd; NBSetup.sdl;
// 
// 39    5/22/13 5:58a Ireneyang
// [TAG]         None
// [Category]    Improvement
// [Description] Add [Panel Power Enable] selection into Graphics 
//               Configuration of setup menu as Intel BIOS v125.
// [Files]       NB.sd; NB.uni;
// 
// 38    4/23/13 3:24a Ireneyang
// [TAG]          None
// [Severity]     Improvement
// [Description]  Set Run-time C7 Allowed for SG Mode to Enable as default
// value.
// [Files]        NB.sd; NB.uni;
// 
// 37    4/17/13 6:41a Ireneyang
// [TAG]       NONE
// [Category]  Improvement
// [Severity]  Normal
// [Symptom]   Create a Token "PRIMARY_DISPLAY_SG_DEFAULT_ENABLE" for
// customer 
//             to decide if primarydispay should set to SG as default when
// SwitchableGraphics_SUPPORT is set to 1.
// [Files]     NB.sd; NBSetup.sdl;
// 
// 36    4/08/13 7:29a Ireneyang
// Update SA RC to 1.4.0.0.
// 
// 35    3/27/13 2:12a Jeffch
// [TAG]          "MaxTolud"
// [Severity]     Bug Fix
// [Description]  Fix max TOLUD setup item value on NB.sd is not match it
// of NB.h.
// [Files]        NB.sd;
// 
// 34    3/25/13 6:56a Ireneyang
// [TAG]          None
// [Severity]     Improvement
// [Description]  1. Remove FlavorUpServer
//                2. Set Default for Refresh2XMode.
// [Files]        NB.sd;
// 
// 32    3/07/13 7:27a Ireneyang
// [TAG]          None
// [Severity]     Improvement
// [Description]  Add "C7 Allowed" option of PEG Mode into Setup Menu.
// [Files]        NB.sd; NB.uni; 
// 
// 31    3/07/13 3:49a Ireneyang
// [TAG]          None
// [Severity]     Improvement
// [Description]  Add "Hot only" option for Memory Refresh 2x support to 
//                meet Intel Spec.
// [Files]        NBPEI.c; NB.uni; NB.sd; NbSetupData.h; GetSetupData.c; 
// 
// 30    1/28/13 3:43a Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]  Update SA RC 1.0.
// [Files]        NBPei.c; GetSetupData.c; NbSetupData.h; NBDXE.c; NB.sd;
// NB.uni;
// 
// 29    1/14/13 6:10a Jeffch
// [TAG]          None
// [Severity]     Spec update
// [Description]  Create setup item for  SA RC 0.90.
// [Files]        NBPei.c; GetNbSetupData.c NB.sd; NB.uni;
// 
// 28    1/10/13 6:02a Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]  Create DDR PowerDown and idle counter for setup item.
// [Files]        NBPei.c; NB.sd; NB.uni; GetSetupData.c; NbSetupData.h
// 
// 27    1/03/13 7:35a Jeffch
// [TAG]         None
// [Category]    Bug Fix
// [Description] Fixed Build error after PrimaryDisplay change default to
// SG mode.
// [Files]       NB.sd;
// 
// 26    12/24/12 2:57a Jeffch
// [TAG]         None
// [Category]    Improvement
// [Description] added ULT SKU auto disable PEG.
// [Files]        NBPei.c; NBDxe.c; NbPlatform.h; NB.sd;
// [TAG]         None
// [Category]    Bug Fix
// [Description] Remove tRPab and fixed XTU build fail issue.
// [Files]        NBPei.c; NBDxe.c; NB.sd;
// 
// 24    12/18/12 5:15a Jeffch
// [TAG]          None
// [Severity]     Spec update
// [Description]  Update SA RC 0.81.
// [Files]        NBDxe.c; NBPei.c
// 
// 23    12/14/12 5:17a Jeffch
// [TAG]          EIP106709
// [Severity]     Important
// [Description]  Support PCIE Primary display.
// [Files]        NB.sd; NBDXEboard.c; NB.uni;
// GetSetupData.c;NbSetupData.h;
// [TAG]          None
// [Severity]     Important
// [Description]  Show memory voltage.
// [Files]        NB.sd; NB.uni; NBDxe.c
// 
// 22    11/29/12 2:30a Jeffch
// [TAG]         None
// [Category]    Improvement
// [Description] added bootime check IGFX Available.
// [Files]       NBDxe.c; NbPlatform.h; NB.sd;
// 
// 21    11/29/12 12:49a Jeffch
// [TAG]         None
// [Category]    Improvement
// [Description] added bootime check IGFX Available.
// 
// 20    11/14/12 5:35a Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]  Update XTU4.x function
// [Files]        NBPei.c; GetSetupData.c; NbSetupData.h; NBDXE.c; NB.sd;
// NB.uni
// 
// 19    11/07/12 6:24a Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]   Change Vtd default to enable.
// [Files]        NB.sd;
// 
// 18    10/18/12 11:10p Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]  Hide VBIOS version after Enable GOP.
// [Files]        NB.sd
// 
// 17    10/14/12 5:20a Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]  Follow SA RC 0.71.
// [Files]        NBPei.c, NBDxe.c; NBGeneric.c; NBCspLib.h; NBSetup.c;
// Nb.sd; GetSetupData.c
// 
// 16    10/14/12 12:39a Jeffch
// [TAG]          None
// [Severity]     Important
// [Description]  Update by XTU4.0.
// [Files]        NBPei.c, NBDxe.c, NBCspLib.h, NBGeneric.c
// [TAG]          None
// [Severity]     Important
// [Description]  Follow Update by Mahobay.
// [Files]        NBPei.c, NBDxe.c;
// 
// 15    9/28/12 4:14a Yurenlai
// [TAG]           None
// [Category]      Improvement
// [Severity]      Important
// [Description]   BDAT function support.
// [Files]         NB.sd, NBDxe.c, NBPEI.c, SystemAgent.sdl,
// BdatAccessHandler.sdl
// 
// 14    9/26/12 9:33a Yurenlai
// 
// [TAG]           None
// [Category]      Improvement
// [Severity]      Important
// [Description]   Remove SPD XMP Profile support of the setup info.
// [Files]         NB.sd, NBSetup.c
// 
// [TAG]           None
// [Category]      Improvement
// [Severity]      Important
// [Description]   Adjust setup item default for eDP display.
// [Files]         NB.sd
// 
// 13    9/12/12 6:32a Yurenlai
// [TAG]           None
// [Category]      Improvement
// [Severity]      Important
// [Description]   Adjusted setup item default.
// [Files]         NB.sd
// 
// [TAG]           None
// [Category]      Improvement
// [Severity]      Important
// [Description]   Add RxCEM Loop back setup item.
// [Files]         GetSetupData.c, NB.sd, NB.uni, NBPEI.c, NbSetupData.h,
// NBPEI.c 
// 
// 12    8/14/12 4:28a Yurenlai
// [TAG]         None
// [Severity]    Important
// [Description] Change for SystemAgent RefCode Revision: 0.6.1.
// [Files]       NB.sdl, NB.sd, NBCSP.CIF, NBDxe.c, NB.ASL, SaAudio.asl 
// 
// 11    7/27/12 8:43a Yurenlai
// [TAG]         None
// [Category]    Improvement
// [Description] IGfx Fource Disable Support.
// [Files]       GetSetupData.c, NB.sdl, NB.sd, NB.uni, NbSetupData.h,
// NBDxe.c, NBPEI.c
// 
// [TAG]         None
// [Category]    Improvement
// [Description] Adjusted NB policy debault.
// [Files]       NB.sd, NBDxe.c
// 
// [TAG]         None
// [Category]    Improvement
// [Description] Add manufacturing defaults for Intel SA options.
// [Files]       NB.sd
// 
// 10    7/03/12 6:49a Yurenlai
// [TAG]         None
// [Severity]    Important
// [Description] Change for SystemAgent RefCode Revision: 0.6.0.
// [Files]       NBPEI.DXS, NB.sd, NBDxe.c, NBPEI.c
// 
// 9     6/14/12 5:10a Yurenlai
// [TAG]           None
// [Category]      Improvement
// [Description]   Set 'Memory Scramble' default Disabled
// [Description]   NB.sd
// 
// 8     6/14/12 5:06a Yurenlai
// [TAG]           None
// [Category]      Improvement
// [Description]   Fixed Tse 1224 will hang setup call back and value
// error.
// [Description]   NBSetup.c, NB.sd
// 
// 7     6/14/12 5:04a Yurenlai
// [TAG]           None
// [Category]      Improvement
// [Description]   Support token to disable PEG 0 ~ 2.
// [Description]   NB.sdl, NB.sd, NB.ASL, HOST_BUS.ASL
// 
// 6     5/14/12 4:53a Yurenlai
// [TAG]         None
// [Category]    Improvement
// [Description] Change MRC Fast Boot default to diasbled.
// [Files]       NB.sd
// 
// 5     4/26/12 2:57a Yurenlai
// [TAG]           None
// [Category]      Improvement
// [Severity]      Important
// [Description]   Adjust Intel System Agent module the Setup item and
// Policy.
// [Description]   GetSetupData.c, NB.sdl, NB.sd, NB.uni, NBDxe.c,
// NBPEI.c,
//                 NBSetup.c, NBSetupReset.c, NbSetupData.h
// 
// 4     4/05/12 2:26a Yurenlai
// [TAG]  		EIP87103
// [Category]  	Spec Update
// [Severity]  	Important
// [Description]  	Change for SystemAgent RefCode Revision: 0.5.5 .
// [Files]  		NBDxe.c, NBPEI.c, NBSMI.C, NBGeneric.cm NB.sd, NBSetup.c,
// GetSetupData.c, NbSetupData.h
// 
// 3     3/22/12 11:22p Yurenlai
// [TAG]         None
// [Category]    Improvement
// [Description] Correct will hang in MRC while change DIMM.
// [Files]       NB.sd
// 
// 2     2/23/12 6:48a Yurenlai
// [TAG]         None
// [Category]    Improvement
// [Description] Adjusted North Bridge the Setup item value.
// 
// 1     2/08/12 4:33a Yurenlai
// Intel Haswell/NB eChipset initially releases.
// 
//*************************************************************************
//<AMI_FHDR_START>
//
// Name:        NB.sd
//
// Description: North Bridge setup form
//
//<AMI_FHDR_END>
//*************************************************************************

#ifdef SETUP_DATA_DEFINITION
//----------------------------------------------------------------------------
// Put NVRAM data definitions here.
// For example: UINT8 Data1;
// These definitions will be converted by the build process
// to a definitions of SETUP_DATA fields.
//----------------------------------------------------------------------------
    UINT8   IgdBootType;
    UINT8   DisplayPipeB;
    UINT8   LcdPanelType;
    UINT8   SdvoPanelType;
    UINT8   LcdPanelScaling;
    UINT8   IGfxForceDisable;

    UINT8   RenderStandby;
    UINT8   DeepRenderStandby;

    // GT related
    UINT8   GtOcSupport;
    UINT8   GtMaxOcTurboRatio;
    UINT8   GtExtraTurboVoltage;

    // LCD
    UINT8   IgdLcdBlc;
    UINT8   IgdLcdIBia;
    UINT8   IgdLcdSSCC;
    UINT8   IgdTV1Standard;
    UINT8   IgdTV2Standard;
    UINT8   AlsEnable;
    UINT8   LowPowerMode;
    UINT8   PanelPowerEnable;
    UINT8   ActiveLFP;
    UINT8   LfpColorDepth;
    UINT8   GTTSize;
    UINT8   ApertureSize;

    // PEG
    UINT8   PegAspm[3];  
    UINT8   PegAspmL0s[3];
    UINT8   PegDeEmphasis[3];
    UINT8   AlwaysEnablePeg;
    UINT8   PegSamplerCalibrate;
    UINT8   SwingControl;
    UINT8   PegGen3Equalization;
    UINT8   PegGen3EqualizationPhase2;
    UINT8   PegGen3PresetSearch;
    UINT8   PegGen3ForcePresetSearch;
    UINT16  PegGen3PresetSearchDwellTime;
    UINT8   PegGen3PresetSearchMarginSteps;
    UINT8   PegGen3PresetSearchStartMargin;
    UINT8   PegGen3PresetSearchVoltageMarginSteps;
    UINT8   PegGen3PresetSearchVoltageStartMargin;
    UINT8   PegGen3PresetSearchFavorTiming;
    UINT16  PegGen3PresetSearchErrorTarget;
    UINT8   RxCEMLoopback;
    UINT8   RxCEMLoopbackLane;
    UINT8   Gen3RootPortPreset[16];
    UINT8   Gen3EndPointPreset[16];
    UINT8   Gen3EndPointHint[16];
    UINT8   Gen3RxCtleP[8];
    UINT8   InitPcieAspmAfterOprom;
    UINT8   AllowPerstGpioUsage;
    // DVMT5.0 Graphic memory setting
    UINT8   IgdDvmt50PreAlloc;
    UINT8   IgdDvmt50TotalAlloc;
    // SA Device Control
    UINT8   SaDevice7;
    UINT8   SaDevice4;
    UINT8   SaAudioEnable;
//    UINT8   SaHdmiCodecPortB;
//    UINT8   SaHdmiCodecPortC;
//    UINT8   SaHdmiCodecPortD;
    // VTD  
    UINT8   EnableVtd;
    //SSVID WorkAround
    UINT8   EnableNbCrid;
    UINT8   BdatAcpiTableSupport;
    // DMI 
    UINT8   DmiVc1;
    UINT8   DmiVcp;
    UINT8   DmiVcm;
    UINT8   DmiGen2;
    UINT8   DmiDeEmphasis;
    UINT8   DmiIot;
    // ASPM
    UINT8   NBDmiAspm;
    UINT8   NBDmiExtSync;
    UINT8   PrimaryDisplay;
    UINT8   PrimaryPeg;
    UINT8   PrimaryPcie;
    UINT8   DetectNonComplaint;
    UINT8   IGpuPortConfig;
    UINT8   InternalGraphics;
    // Graphics Turbo IMON Current
    UINT8   GfxTurboIMON;
    // Digital port mode select
    UINT8   DigitalPortBMode;
    UINT8   DigitalPortCMode;
    UINT8   DigitalPortDMode;
    // MRC
    UINT8   EccSupport;
    UINT8   MrcFastBoot;
    UINT8   ForceColdReset;
    UINT8   RemapEnable;
    UINT8   DisableDimmChannel0;
    UINT8   DisableDimmChannel1;
    UINT8   MaxTolud;
    UINT8   DdrFreqLimit;
    UINT16  OcDdrFreqLimit;
    UINT8   DDRLVOption;
    UINT32  DDRVoltageWaitTime;
    UINT8   SpdProfileSelected;
    UINT8   NModeSupport;
    UINT8   ScramblerSupport;
    UINT8   RmtCrosserEnable;
    UINT8   ExitMode;
    UINT8   PowerDownMode0;
    UINT8   PowerDownMode1;
    UINT8   PwdwnIdleCounter;
    UINT8   EnhancedInterleave;
    UINT8   RankInterleave;
    UINT8   WeaklockEn;
    UINT8   McLock;
    UINT8   PegGenx0;
    UINT8   PegGenx1;
    UINT8   PegGenx2;

    UINT8   MemoryThermalManagement;
    UINT8   PeciInjectedTemp;
    UINT8   ExttsViaTsOnBoard;
    UINT8   ExttsViaTsOnDimm;
    UINT8   VirtualTempSensor;
//    UINT8   RefreshRate2x;
    UINT8   ChHashEnable;
    UINT16  ChHashMask;
    UINT8   ChHashInterleaveBit;
    //
    // Thermal Options
    //
    UINT8   EnableExtts;           ///< REVISION_10
    UINT8   EnableCltm;            ///< REVISION_10
    UINT8   EnableOltm;            ///< REVISION_10
    UINT8   EnablePwrDn;           ///< REVISION_10
    UINT8   Refresh2X;             ///< REVISION_10
    UINT8   Refresh2XMode;         ///< REVISION_10
    UINT8   LpddrThermalSensor;    ///< REVISION_10
    UINT8   LockPTMregs;           ///< REVISION_10
    UINT8   UserPowerWeightsEn;    ///< REVISION_10
    UINT8   EnergyScaleFact;       ///< REVISION_10
    UINT8   RaplPwrFlCh1;          ///< REVISION_10
    UINT8   RaplPwrFlCh0;          ///< REVISION_10
    UINT8   RaplLim2Lock;          ///< REVISION_10
    UINT8   RaplLim2WindX;         ///< REVISION_10
    UINT8   RaplLim2WindY;         ///< REVISION_10
    UINT8   RaplLim2Ena;           ///< REVISION_10
    UINT16  RaplLim2Pwr;           ///< REVISION_10
    UINT8   RaplLim1WindX;         ///< REVISION_10
    UINT8   RaplLim1WindY;         ///< REVISION_10
    UINT8   RaplLim1Ena;           ///< REVISION_10
    UINT16  RaplLim1Pwr;           ///< REVISION_10
    UINT8   WarmThresholdCh0Dimm0; ///< REVISION_10
    UINT8   WarmThresholdCh0Dimm1; ///< REVISION_10
    UINT8   WarmThresholdCh1Dimm0; ///< REVISION_10
    UINT8   WarmThresholdCh1Dimm1; ///< REVISION_10
    UINT8   HotThresholdCh0Dimm0;  ///< REVISION_10
    UINT8   HotThresholdCh0Dimm1;  ///< REVISION_10
    UINT8   HotThresholdCh1Dimm0;  ///< REVISION_10
    UINT8   HotThresholdCh1Dimm1;  ///< REVISION_10
    UINT8   WarmBudgetCh0Dimm0;    ///< REVISION_10
    UINT8   WarmBudgetCh0Dimm1;    ///< REVISION_10
    UINT8   WarmBudgetCh1Dimm0;    ///< REVISION_10
    UINT8   WarmBudgetCh1Dimm1;    ///< REVISION_10
    UINT8   HotBudgetCh0Dimm0;     ///< REVISION_10
    UINT8   HotBudgetCh0Dimm1;     ///< REVISION_10
    UINT8   HotBudgetCh1Dimm0;     ///< REVISION_10
    UINT8   HotBudgetCh1Dimm1;     ///< REVISION_10
    UINT8   IdleEnergyCh0Dimm1;    ///< REVISION_10
    UINT8   IdleEnergyCh0Dimm0;    ///< REVISION_10
    UINT8   PdEnergyCh0Dimm1;      ///< REVISION_10
    UINT8   PdEnergyCh0Dimm0;      ///< REVISION_10
    UINT8   ActEnergyCh0Dimm1;     ///< REVISION_10
    UINT8   ActEnergyCh0Dimm0;     ///< REVISION_10
    UINT8   RdEnergyCh0Dimm1;      ///< REVISION_10
    UINT8   RdEnergyCh0Dimm0;      ///< REVISION_10
    UINT8   WrEnergyCh0Dimm1;      ///< REVISION_10
    UINT8   WrEnergyCh0Dimm0;      ///< REVISION_10
    UINT8   IdleEnergyCh1Dimm1;    ///< REVISION_10
    UINT8   IdleEnergyCh1Dimm0;    ///< REVISION_10
    UINT8   PdEnergyCh1Dimm1;      ///< REVISION_10
    UINT8   PdEnergyCh1Dimm0;      ///< REVISION_10
    UINT8   ActEnergyCh1Dimm1;     ///< REVISION_10
    UINT8   ActEnergyCh1Dimm0;     ///< REVISION_10
    UINT8   RdEnergyCh1Dimm1;      ///< REVISION_10
    UINT8   RdEnergyCh1Dimm0;      ///< REVISION_10
    UINT8   WrEnergyCh1Dimm1;      ///< REVISION_10
    UINT8   WrEnergyCh1Dimm0;      ///< REVISION_10
    UINT8   SrefCfgEna;            ///< REVISION_10
    UINT16  SrefCfgIdleTmr;        ///< REVISION_10
    UINT8   ThrtCkeMinDefeat;      ///< REVISION_10
    UINT8   ThrtCkeMinTmr;         ///< REVISION_10
    UINT8   ThrtCkeMinDefeatLpddr; ///< REVISION_10
    UINT8   ThrtCkeMinTmrLpddr;    ///< REVISION_10
    UINT8   EnablePwrDnLpddr;      ///< REVISION_10
    UINT16  tCL;
    UINT16  tRCD;
    UINT16  tRP;
    UINT16  tRAS;
    UINT16  tWR;
    UINT16  tRFC;
    UINT16  tRRD;
    UINT16  tWTR;
    UINT16  tRTP;
    UINT16  tRC;
    UINT16  tFAW;
    UINT16  tCWL;  // (P20121012A) 
    UINT16  tREFI; // (P20121012A) 
    UINT16  tRPab;

    UINT8   GdxcEnable;
    UINT8   C7Allowed;
#endif

#ifdef FORM_SET_TYPEDEF
	#include <Protocol\NBPlatformData.h>
#endif

//---------------------------------------------------------------------------
#if defined(VFRCOMPILE) && !defined(CONTROLS_ARE_DEFINED)
#define CONTROL_DEFINITION
#endif
//---------------------------------------------------------------------------

#ifdef CONTROL_DEFINITION

#define NB_ONEOF_ENABLEVTD\
        oneof varid    = SETUP_DATA.EnableVtd,\
          prompt      = STRING_TOKEN(STR_MCH_VTD_PROMPT),\
          help        = STRING_TOKEN(STR_MCH_VTD_HELP),\
          option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        endoneof;


#define NB_ONEOF_IGFXFORCEDISABLE\
      oneof varid    = SETUP_DATA.IGfxForceDisable,\
        prompt   = STRING_TOKEN(STR_INT_IGFXFORCEDISABLE_PROMPT),\
        help     = STRING_TOKEN(STR_INT_IGFXFORCEDISABLE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#if ( defined(SwitchableGraphics_SUPPORT) && (SwitchableGraphics_SUPPORT == 1) )

#if ( defined(PRIMARY_DISPLAY_SG_DEFAULT_ENABLE) && (PRIMARY_DISPLAY_SG_DEFAULT_ENABLE == 1) )

#define NB_ONEOF_PRIMARYDISPLAY\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP1),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PEG_STRING),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_SG_STRING) ,  value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_PRIMARYDISPLAY2\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP2),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_SG_STRING) ,  value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        endoneof;
#else

#define NB_ONEOF_PRIMARYDISPLAY\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP1),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PEG_STRING),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_SG_STRING) ,  value = 4, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_PRIMARYDISPLAY2\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP2),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_SG_STRING) ,  value = 4, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#endif //PrimaryDisplay_ENABLE

#else

#define NB_ONEOF_PRIMARYDISPLAY\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP3),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PEG_STRING),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_PRIMARYDISPLAY2\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP4),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
        endoneof;

//#define NB_ONEOF_PRIMARYDISPLAY1\
//        oneof varid    = SETUP_DATA.PrimaryDisplay,\
//          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
//          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP5),\
//          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//          option text = STRING_TOKEN(STR_PEG_STRING),  value = 1, flags = RESET_REQUIRED, key = 0;\
//          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
//        endoneof;
#define NB_ONEOF_PRIMARYDISPLAY1\
        oneof varid    = SETUP_DATA.PrimaryDisplay,\
          prompt   = STRING_TOKEN(STR_PRIMARY_VIDEO),\
          help     = STRING_TOKEN(STR_PRIMARY_VIDEO_HELP5),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 3, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PEG_STRING),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_PCIE_STRING),  value = 2, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        endoneof;

#endif // SwitchableGraphics_SUPPORT

#define NB_ONEOF_PRIMARYPEG\
        oneof varid    = SETUP_DATA.PrimaryPeg,\
          prompt   = STRING_TOKEN(STR_PRIMARY_PEG),\
          help     = STRING_TOKEN(STR_PRIMARY_PEG_HELP),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PEG1), value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PEG2), value = 2, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_PRIMARYPCIE\
        oneof varid    = SETUP_DATA.PrimaryPcie,\
          prompt   = STRING_TOKEN(STR_PRIMARY_PCIE),\
          help     = STRING_TOKEN(STR_PRIMARY_PCIE_HELP),\
          option text = STRING_TOKEN(STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE1), value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE2), value = 2, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE3), value = 3, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE4), value = 4, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE5), value = 5, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE6), value = 6, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_PCIE7), value = 7, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_DETECTNONCOMPLAINT\
        oneof varid    = SETUP_DATA.DetectNonComplaint,\
          prompt   = STRING_TOKEN(STR_NB_NON_COMPLIANCE),\
          help     = STRING_TOKEN(STR_NB_NON_COMPLIANCE_HELP),\
          option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_IGPUPORTCONFIG\
        oneof varid    = SETUP_DATA.IGpuPortConfig,\
          prompt   = STRING_TOKEN(STR_IGPU_PORT_CONFIG),\
          help     = STRING_TOKEN(STR_IGPU_PORT_CONFIG_HELP),\
          option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_DIGITALPORTBMODE\
        oneof varid    = SETUP_DATA.DigitalPortBMode,\
          prompt   = STRING_TOKEN(STR_IGFX_DIGITAL_PORT_B),\
          help     = STRING_TOKEN(STR_IGFX_DIGITAL_PORT_B_HELP),\
          option text = STRING_TOKEN(STR_IGFX_PORT_SHARED), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_PORT_IGPU_ONLY),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_PORT_HPD_ONLY),  value = 2, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_DIGITALPORTCMODE\
        oneof varid    = SETUP_DATA.DigitalPortCMode,\
          prompt   = STRING_TOKEN(STR_IGFX_DIGITAL_PORT_C),\
          help     = STRING_TOKEN(STR_IGFX_DIGITAL_PORT_C_HELP),\
          option text = STRING_TOKEN(STR_IGFX_PORT_SHARED), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_PORT_IGPU_ONLY),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_PORT_HPD_ONLY),  value = 2, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_DIGITALPORTDMODE\
        oneof varid    = SETUP_DATA.DigitalPortDMode,\
          prompt   = STRING_TOKEN(STR_IGFX_DIGITAL_PORT_D),\
          help     = STRING_TOKEN(STR_IGFX_DIGITAL_PORT_D_HELP),\
          option text = STRING_TOKEN(STR_IGFX_PORT_SHARED), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_PORT_IGPU_ONLY),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_IGFX_PORT_HPD_ONLY),  value = 2, flags = RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_SADEVICE7\
        oneof varid    = SETUP_DATA.SaDevice7,\
          prompt   = STRING_TOKEN(STR_SA_CHAP_DEVICE_PROMPT),\
          help     = STRING_TOKEN(STR_SA_CHAP_DEVICE_HELP),\
          option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
          option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        endoneof;

#define NB_ONEOF_SADEVICE4\
      oneof varid    = SETUP_DATA.SaDevice4,\
        prompt   = STRING_TOKEN(STR_SA_THERMAL_DEVICE_PROMPT),\
        help     = STRING_TOKEN(STR_SA_THERMAL_DEVICE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_SAAUDIOENABLE\
      oneof varid    = SETUP_DATA.SaAudioEnable,\
        prompt   = STRING_TOKEN(STR_SA_AUDIO_DEVICE_PROMPT),\
        help     = STRING_TOKEN(STR_SA_AUDIO_DEVICE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

//#define NB_ONEOF_SAHDMICODECPORTB\
//  oneof varid    = SETUP_DATA.SaHdmiCodecPortB,\
//    prompt       = STRING_TOKEN (STR_SA_HDMI_CODEC_PORTB_PROMPT),\
//    help         = STRING_TOKEN (STR_SA_HDMI_CODEC_PORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
//  endoneof;

//#define NB_ONEOF_SAHDMICODECPORTC\
//  oneof varid    = SETUP_DATA.SaHdmiCodecPortC,\
//    prompt       = STRING_TOKEN (STR_SA_HDMI_CODEC_PORTC_PROMPT),\
//    help         = STRING_TOKEN (STR_SA_HDMI_CODEC_PORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
//  endoneof;

//#define NB_ONEOF_SAHDMICODECPORTD\
//  oneof varid    = SETUP_DATA.SaHdmiCodecPortD,\
//    prompt       = STRING_TOKEN (STR_SA_HDMI_CODEC_PORTD_PROMPT),\
//    help         = STRING_TOKEN (STR_SA_HDMI_CODEC_PORT_HELP),\
//    option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
//    option text  = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//  endoneof;

#define NB_ONEOF_ENABLENBCRID\
  oneof varid    = SETUP_DATA.EnableNbCrid,\
    questionid   = AUTO_ID(NB_CRID_KEY),\
    prompt       = STRING_TOKEN (STR_ENABLE_NB_CRID_PROMPT),\
    help         = STRING_TOKEN (STR_ENABLE_NB_CRID_HELP),\
    default      = DEFAULT_CRID_ENABLE,\
    option text  = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED | INTERACTIVE;\
    option text  = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;\
  endoneof;

#define NB_NUMERIC_GFXTURBOIMON\
        numeric varid = SETUP_DATA.GfxTurboIMON,\
           prompt      = STRING_TOKEN (STR_GRAPHICS_TURBO_IMAX),\
           help        = STRING_TOKEN (STR_GRAPHICS_TURBO_IMAX_HELP),\
           flags       = RESET_REQUIRED,\
           minimum     = 14,\
           maximum     = 31,\
           step        = 1,\
           default     = 31,\
           option text = STRING_TOKEN (STR_GRAPHICS_TURBO_IMAX), value = 31, flags = MANUFACTURING; \
        endnumeric;

#define NB_ONEOF_INTERNALGRAPHICS\
      oneof varid    = SETUP_DATA.InternalGraphics,\
        prompt   = STRING_TOKEN(STR_INT_GRAPHICS_PROMPT),\
        help     = STRING_TOKEN(STR_INT_GRAPHICS_HELP),\
        option text = STRING_TOKEN(STR_COMMON_AUTO), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_GTTSIZE\
      oneof varid    = SETUP_DATA.GTTSize,\
        prompt   = STRING_TOKEN(STR_GTT_SIZE),\
        help     = STRING_TOKEN(STR_GTT_SIZE_HELP),\
        option text = STRING_TOKEN(GTT_SIZE_1MB), value = 1, flags =  RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(GTT_SIZE_2MB), value = 2, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_APERTURESIZE\
      oneof varid    = SETUP_DATA.ApertureSize,\
        prompt   = STRING_TOKEN(STR_APERTURE_SIZE),\
        help     = STRING_TOKEN(STR_APERTURE_SIZE_HELP),\
        option text = STRING_TOKEN(APERTURE_SIZE_128MB), value = 1, flags =  RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(APERTURE_SIZE_256MB), value = 2, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(APERTURE_SIZE_512MB), value = 3, flags =  RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_IGDDVMT50PREALLOC\
      oneof varid   = SETUP_DATA.IgdDvmt50PreAlloc,\
        prompt  = STRING_TOKEN(STR_DVMT50_PRE_ALLOC),\
        help    = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_HELP),\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M), value=1, flags=DEFAULT | MANUFACTURING | RESET_REQUIRED, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_64M), value=2, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_96M), value=3, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_128M), value=4, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_160M), value=5, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_192M), value=6, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_224M), value=7, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_256M), value=8, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_288M), value=9, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_320M), value=10, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_352M), value=11, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_384M), value=12, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_416M), value=13, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_448M), value=14, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_480M), value=15, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_512M), value=16, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_1024M),value=17, flags=0, key= 0x00;\
      endoneof;

#define NB_ONEOF_IGDDVMT50TOTALALLOC\
      oneof   varid   = SETUP_DATA.IgdDvmt50TotalAlloc,\
        prompt  = STRING_TOKEN(STR_DVMT50_DVMT ),\
        help    = STRING_TOKEN(STR_DVMT50_DVMT_HELP),\
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_128), value=1, flags=0, key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_256), value=2, flags=DEFAULT|MANUFACTURING|RESET_REQUIRED,key= 0x00;\
        option text = STRING_TOKEN(STR_DVMT50_ALLOC_MAX), value=3, flags=0, key= 0x00;\
      endoneof;

#define NB_ONEOF_LOWPOWERMODE\
      oneof varid  = SETUP_DATA.LowPowerMode,\
        prompt   = STRING_TOKEN (STR_LOW_POWER_MODE),\
        help     = STRING_TOKEN (STR_LOW_POWER_MODE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PANELPOWERE\
      oneof varid  = SETUP_DATA.PanelPowerEnable,\
        prompt   = STRING_TOKEN (STR_PANEL_POWER_ENABLE),\
        help     = STRING_TOKEN (STR_PANEL_POWER_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

//#define NB_ONEOF_IGDBOOTTYPE\
//      oneof varid    = SETUP_DATA.IgdBootType,\
//        prompt   = STRING_TOKEN(STR_VIDEO_BT_PROMPT),\
//        help     = STRING_TOKEN(STR_VIDEO_BT_HELP),\
//        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT),      value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
//        option text = STRING_TOKEN(STR_VIDEO_BT_CRT),          value = 0x01, flags = RESET_REQUIRED, key = 0;\
//        option text = STRING_TOKEN(STR_VIDEO_BT_EFP),          value = 0x04, flags = RESET_REQUIRED, key = 0;\
//        option text = STRING_TOKEN(STR_VIDEO_BT_LFP),          value = 0x08, flags = RESET_REQUIRED, key = 0;\
//        option text = STRING_TOKEN(STR_VIDEO_BT_EFP3),         value = 0x20, flags = RESET_REQUIRED, key = 0;\
//        option text = STRING_TOKEN(STR_VIDEO_BT_EFP2),         value = 0x40, flags = RESET_REQUIRED, key = 0;\
//        option text = STRING_TOKEN(STR_VIDEO_BT_LFP2),         value = 0x80, flags = RESET_REQUIRED, key = 0;\
//      endoneof;
#define NB_ONEOF_IGDBOOTTYPE\
      oneof varid    = SETUP_DATA.IgdBootType,\
        prompt   = STRING_TOKEN(STR_VIDEO_BT_PROMPT),\
        help     = STRING_TOKEN(STR_VIDEO_BT_HELP),\
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT),      value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_CRT),          value = 0x01, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP),          value = 0x04, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DISPLAYPIPEB\
      oneof varid    = SETUP_DATA.DisplayPipeB,\
        prompt   = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_PROMPT),\
        help     = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_HELP),\
        option text = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_DISABLED),       value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_CRT),          value = 0x01, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP),          value = 0x04, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP),          value = 0x08, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP3),         value = 0x20, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP2),         value = 0x40, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP2),         value = 0x80, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_LCDPANELTYPE\
      oneof varid     = SETUP_DATA.LcdPanelType,\
        prompt      = STRING_TOKEN(STR_PANELTYPE_PROMPT),\
        help        = STRING_TOKEN(STR_PANELTYPE_HELP),\
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT),      value = 0, flags = DEFAULT |RESET_REQUIRED | MANUFACTURING, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_01),          value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_02),          value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_03),          value = 3, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_04),          value = 4, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_05),          value = 5, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_06),          value = 6, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_07),          value = 7, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_08),          value = 8, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_09),          value = 9, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_10),          value = 10, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_11),          value = 11, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_12),          value = 12, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_13),          value = 13, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_14),          value = 14, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_15),          value = 15, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELTYPE_16),          value = 16, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_SDVOPANELTYPE\
      oneof varid     = SETUP_DATA.SdvoPanelType,\
        prompt      = STRING_TOKEN(STR_SDVO_PANELTYPE_PROMPT),\
        help        = STRING_TOKEN(STR_SDVO_PANELTYPE_HELP),\
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING, key = 0;\
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_01), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_02), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_03), value = 3, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_SDVO_PANELTYPE_04), value = 4, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_LCDPANELSCALING\
      oneof varid     = SETUP_DATA.LcdPanelScaling,\
        prompt      = STRING_TOKEN(STR_PANELSCALING_PROMPT),\
        help        = STRING_TOKEN(STR_PANELSCALING_HELP),\
        option text = STRING_TOKEN(STR_PANELSCALING_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELSCALING_OFF), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PANELSCALING_FORCE), value = 6, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_IGDLCDBLC\
      oneof varid    = SETUP_DATA.IgdLcdBlc,\
        prompt   = STRING_TOKEN(STR_VIDEO_LCD_BLC),\
        help     = STRING_TOKEN(STR_VIDEO_LCD_BLCHELP),\
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC1), value = 0x00, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC2), value = 0x02, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC3), value = 0x01, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC4), value = 0x03, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_IGDLCDIBIA\
      oneof varid    = SETUP_DATA.IgdLcdIBia,\
        prompt   = STRING_TOKEN(STR_VIDEO_LCD_IBIA),\
        help     = STRING_TOKEN(STR_VIDEO_LCD_IBIAHLP),\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAA), value = 6, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAD), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL1), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL2), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL3), value = 3, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL4), value = 4, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL5), value = 5, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_IGDLCDSSCC\
      oneof varid    = SETUP_DATA.IgdLcdSSCC,\
        prompt   = STRING_TOKEN(STR_VIDEO_LCD_SSCC),\
        help     = STRING_TOKEN(STR_VIDEO_LCD_SSCCHLP),\
        option text = STRING_TOKEN(STR_VIDEO_LCD_SSCC1), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_SSCC2), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_LCD_SSCC3), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_IGDTV1STANDARD\
      oneof varid    = SETUP_DATA.IgdTV1Standard,\
        prompt   = STRING_TOKEN(STR_VIDEO_TV1_STANDARD),\
        help     = STRING_TOKEN(STR_TV1_STANDARD_HELP),\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD01), value = 0x00, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD02), value = 0x01, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD03), value = 0x11, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD04), value = 0x21, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD05), value = 0x02, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD06), value = 0x12, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD07), value = 0x22, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD08), value = 0x32, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD09), value = 0x42, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD10), value = 0x52, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD11), value = 0x62, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD12), value = 0x03, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD13), value = 0x23, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD14), value = 0x33, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD15), value = 0x43, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD16), value = 0x53, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD17), value = 0x63, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD18), value = 0x64, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD19), value = 0x74, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD20), value = 0x57, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD21), value = 0xD7, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD22), value = 0xD8, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD23), value = 0xF8, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD24), value = 0xE9, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD25), value = 0x7A, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_IGDTV2STANDARD\
      oneof varid    = SETUP_DATA.IgdTV2Standard,\
        prompt   = STRING_TOKEN(STR_VIDEO_TV2_STANDARD),\
        help     = STRING_TOKEN(STR_TV2_STANDARD_HELP),\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD01), value = 0x00, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD02), value = 0x01, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD03), value = 0x11, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD04), value = 0x21, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD05), value = 0x02, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD06), value = 0x12, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD07), value = 0x22, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD08), value = 0x32, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD09), value = 0x42, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD10), value = 0x52, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD11), value = 0x62, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD12), value = 0x03, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD13), value = 0x23, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD14), value = 0x33, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD15), value = 0x43, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD16), value = 0x53, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD17), value = 0x63, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD18), value = 0x64, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD19), value = 0x74, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD20), value = 0x57, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD21), value = 0xD7, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD22), value = 0xD8, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD23), value = 0xF8, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD24), value = 0xE9, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_VIDEO_TV_STANDARD25), value = 0x7A, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_ALSENABLE\
      oneof varid  = SETUP_DATA.AlsEnable,\
        prompt   = STRING_TOKEN (STR_ACPI_ALS_ENABLE),\
        help     = STRING_TOKEN (STR_ACPI_ALS_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;  

#define NB_ONEOF_ACTIVELFP\
      oneof varid  = SETUP_DATA.ActiveLFP,\
         prompt   = STRING_TOKEN (STR_ACTIVE_LFP),\
         help     = STRING_TOKEN (STR_ACTIVE_LFP_HELP),\
         option text = STRING_TOKEN (STR_NO_LVDS_STRING), value = 0, flags =  RESET_REQUIRED, key = 0;\
         option text = STRING_TOKEN (STR_INT_LVDS_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
         option text = STRING_TOKEN (STR_SDVO_LVDS_STRING), value = 2, flags =RESET_REQUIRED, key = 0;\
         option text = STRING_TOKEN (STR_EDPA_LFP_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
         option text = STRING_TOKEN (STR_EDPD_LFP_STRING), value = 7, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_LFPCOLORDEPTH\
      oneof varid  = SETUP_DATA.LfpColorDepth,\
         prompt   = STRING_TOKEN (STR_LFP_COLOR_DEPTH),\
         help     = STRING_TOKEN (STR_LFP_COLOR_DEPTH_HELP),\
         option text = STRING_TOKEN (STR_18BIT_COLOR_DEPTH_STRING), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED, key = 0;\
         option text = STRING_TOKEN (STR_24BIT_COLOR_DEPTH_STRING), value = 1, flags =  RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_RENDERSTANDBY\
      oneof varid = SETUP_DATA.RenderStandby,\
        prompt   = STRING_TOKEN(STR_VIDEO_RS2_PROMPT),\
        help     = STRING_TOKEN(STR_VIDEO_RS2_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DEEPRENDERSTANDBY\
      oneof varid = SETUP_DATA.DeepRenderStandby,\
        prompt   = STRING_TOKEN(STR_VIDEO_DEEP_RS2_PROMPT),\
        help     = STRING_TOKEN(STR_VIDEO_DEEP_RS2_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_GTOCSUPPORT\
      oneof varid   = SETUP_DATA.GtOcSupport,\
        prompt      = STRING_TOKEN(STR_GT_OC_SUPPORT_PROMPT),\
        help        = STRING_TOKEN(STR_GT_OC_SUPPORT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED), value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_GTMAXOCTURBORATIO\
    numeric varid = SETUP_DATA.GtMaxOcTurboRatio,\
      prompt   = STRING_TOKEN(STR_GT_OC_FREQUENCY_PROMPT),\
	  help     = STRING_TOKEN(STR_GT_OC_FREQUENCY_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 22,\
      option text = STRING_TOKEN (STR_GT_OC_FREQUENCY_PROMPT), value = 22, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GTEXTRATURBOVOLTAGE\
    numeric varid = SETUP_DATA.GtExtraTurboVoltage,\
      prompt   = STRING_TOKEN(STR_GT_OC_VOLTAGE_PROMPT),\
	  help     = STRING_TOKEN(STR_GT_OC_VOLTAGE_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_GT_OC_VOLTAGE_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric; 

#define NB_ONEOF_PEGGENX0\
      oneof varid    = SETUP_DATA.PegGenx0,\
        prompt   = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_PROMPT),\
        help     = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_HELP),\
        option text = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN3), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGGENX1\
      oneof varid    = SETUP_DATA.PegGenx1,\
        prompt   = STRING_TOKEN(STR_PEG1_GENX_SUPPORT_PROMPT),\
        help     = STRING_TOKEN(STR_PEG1_GENX_SUPPORT_HELP),\
        option text = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN3), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGGENX2\
      oneof varid    = SETUP_DATA.PegGenx2,\
        prompt   = STRING_TOKEN(STR_PEG2_GENX_SUPPORT_PROMPT),\
        help     = STRING_TOKEN(STR_PEG2_GENX_SUPPORT_HELP),\
        option text = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN1), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN2), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_GEN3), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_C7ALLOWED\
      oneof varid    = SETUP_DATA.C7Allowed,\
        prompt   = STRING_TOKEN(STR_C7_ALLOWED_PROMPT),\
        help     = STRING_TOKEN(STR_C7_ALLOWED_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#if defined(RC_PEG_0) && (RC_PEG_0 == 1)

#define NB_ONEOF_ALWAYSENABLEPEG\
      oneof varid    = SETUP_DATA.AlwaysEnablePeg,\
        prompt   = STRING_TOKEN(STR_ALWAYS_ENABLE_PEG_PROMPT),\
        help     = STRING_TOKEN(STR_ALWAYS_ENABLE_PEG_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),     value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;
#else

#define NB_ONEOF_ALWAYSENABLEPEG\
      oneof varid    = SETUP_DATA.AlwaysEnablePeg,\
        prompt   = STRING_TOKEN(STR_ALWAYS_ENABLE_PEG_PROMPT),\
        help     = STRING_TOKEN(STR_ALWAYS_ENABLE_PEG_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),     value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#endif

#define NB_ONEOF_PEGASPM0\
      oneof varid    = SETUP_DATA.PegAspm[OFFSET_0],\
        prompt   = STRING_TOKEN(STR_PEG0_ASPM_PROMPT),\
        help     = STRING_TOKEN(STR_PEG_ASPM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),            value = 4, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),   value = 1, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L1_PROMPT),    value = 2, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_PROMPT), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGASPML0S0\
      oneof varid    = SETUP_DATA.PegAspmL0s[OFFSET_0],\
        prompt   = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_ASPM_L0S_HELP),\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),    value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),    value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGDEEMPHASIS0\
      oneof varid =  SETUP_DATA.PegDeEmphasis[OFFSET_0],\
        prompt   = STRING_TOKEN(STR_PCIE0_DE_EMPHASIS_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE0_DE_EMPHASIS_HELP),\
        option text  = STRING_TOKEN (STR_6DB_STRING), value = 0, flags = RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
      endoneof;

#define NB_ONEOF_PEGASPM1\
      oneof varid    = SETUP_DATA.PegAspm[OFFSET_1],\
        prompt   = STRING_TOKEN(STR_PEG1_ASPM_PROMPT),\
        help     = STRING_TOKEN(STR_PEG_ASPM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),            value = 4, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),   value = 1, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L1_PROMPT),    value = 2, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_PROMPT), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGASPML0S1\
      oneof varid    = SETUP_DATA.PegAspmL0s[OFFSET_1],\
        prompt   = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_ASPM_L0S_HELP),\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),    value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),    value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGDEEMPHASIS1\
      oneof varid =  SETUP_DATA.PegDeEmphasis[OFFSET_1],\
        prompt   = STRING_TOKEN(STR_PCIE1_DE_EMPHASIS_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE1_DE_EMPHASIS_HELP),\
        option text  = STRING_TOKEN (STR_6DB_STRING), value = 0, flags = RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
      endoneof;

#define NB_ONEOF_PEGASPM2\
      oneof varid    = SETUP_DATA.PegAspm[OFFSET_2],\
        prompt   = STRING_TOKEN(STR_PEG2_ASPM_PROMPT),\
        help     = STRING_TOKEN(STR_PEG_ASPM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),            value = 4, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),   value = 1, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L1_PROMPT),    value = 2, flags = RESET_REQUIRED;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_PROMPT), value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGASPML0S2\
      oneof varid    = SETUP_DATA.PegAspmL0s[OFFSET_2],\
        prompt   = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_ASPM_L0S_HELP),\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),    value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),    value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGDEEMPHASIS2\
      oneof varid =  SETUP_DATA.PegDeEmphasis[OFFSET_2],\
        prompt   = STRING_TOKEN(STR_PCIE2_DE_EMPHASIS_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE2_DE_EMPHASIS_HELP),\
        option text  = STRING_TOKEN (STR_6DB_STRING), value = 0, flags = RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
      endoneof;

#define NB_ONEOF_PEGSAMPLERCALIBRATE\
      oneof varid   = SETUP_DATA.PegSamplerCalibrate,\
        prompt      = STRING_TOKEN(STR_PCIE_SAMPLER_CALIBRATE_PROMPT),\
        help        = STRING_TOKEN(STR_PCIE_SAMPLER_CALIBRATE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_AUTO),     value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_SWINGCONTROL\
      oneof varid   = SETUP_DATA.SwingControl,\
        prompt      = STRING_TOKEN(STR_PCIE_SWING_CONTROL_PROMPT),\
        help        = STRING_TOKEN(STR_PCIE_SWING_CONTROL_HELP),\
        option text = STRING_TOKEN(STR_COMMON_HALF),        value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_FULL),        value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGGEN3EQUALIZATION\
      oneof varid =  SETUP_DATA.PegGen3Equalization,\
        prompt   = STRING_TOKEN(STR_PCIE_GEN3_EQUALIZATION_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_GEN3_EQUALIZATION_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGGEN3EQUALIZATIONPHASE2\
      oneof varid =  SETUP_DATA.PegGen3EqualizationPhase2,\
        prompt   = STRING_TOKEN(STR_PCIE_GEN3_EQ_PHASE2_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_GEN3_EQ_PHASE2_HELP),\
        option text = STRING_TOKEN (STR_COMMON_AUTO),     value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGGEN3PRESETSEARCH\
      oneof varid =  SETUP_DATA.PegGen3PresetSearch,\
        prompt   = STRING_TOKEN(STR_PCIE_GEN3_EQ_PRESET_SEARCH_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_GEN3_EQ_PRESET_SEARCH_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PEGGEN3FORCEPRESETSEARCH\
      oneof varid =  SETUP_DATA.PegGen3ForcePresetSearch,\
        prompt   = STRING_TOKEN(STR_PCIE_GEN3_EQ_PRESET_RESEARCH_PROMPT),\
        help     = STRING_TOKEN(STR_PCIE_GEN3_EQ_PRESET_RESEARCH_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHDWELLTIME\
    numeric varid = SETUP_DATA.PegGen3PresetSearchDwellTime,\
      prompt   = STRING_TOKEN(STR_PRESET_SEARCH_DWELL_TIME_PROMPT),\
	  help     = STRING_TOKEN(STR_PRESET_SEARCH_DWELL_TIME_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 65535,\
	  step        = 1,\
	  default     = 1000,\
      option text = STRING_TOKEN (STR_PRESET_SEARCH_DWELL_TIME_PROMPT), value = 400, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHMARGINSTEPS\
    numeric varid = SETUP_DATA.PegGen3PresetSearchMarginSteps,\
      prompt   = STRING_TOKEN(STR_SEARCH_MARGIN_STEPS_PROMPT),\
	  help     = STRING_TOKEN(STR_SEARCH_MARGIN_STEPS_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_SEARCH_MARGIN_STEPS_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHSTARTMARGIN\
    numeric varid = SETUP_DATA.PegGen3PresetSearchStartMargin,\
      prompt   = STRING_TOKEN(STR_SEARCH_START_MARGIN_PROMPT),\
	  help     = STRING_TOKEN(STR_SEARCH_START_MARGIN_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 4,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 15,\
      option text = STRING_TOKEN (STR_SEARCH_START_MARGIN_PROMPT), value = 15, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHVOLTAGEMARGINSTEPS\
    numeric varid = SETUP_DATA.PegGen3PresetSearchVoltageMarginSteps,\
      prompt   = STRING_TOKEN(STR_VOLTAGE_SEARCH_MARGIN_STEPS_PROMPT),\
	  help     = STRING_TOKEN(STR_VOLTAGE_SEARCH_MARGIN_STEPS_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_VOLTAGE_SEARCH_MARGIN_STEPS_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHVOLTAGESTARTMARGIN\
    numeric varid = SETUP_DATA.PegGen3PresetSearchVoltageStartMargin,\
      prompt   = STRING_TOKEN(STR_VOLTAGE_SEARCH_START_MARGIN_PROMPT),\
	  help     = STRING_TOKEN(STR_VOLTAGE_SEARCH_START_MARGIN_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 4,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 20,\
      option text = STRING_TOKEN (STR_VOLTAGE_SEARCH_START_MARGIN_PROMPT), value = 20, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHFAVORTIMING\
      oneof varid =  SETUP_DATA.PegGen3PresetSearchFavorTiming,\
        prompt   = STRING_TOKEN(STR_FAVOR_TIMING_MARGIN_PROMPT),\
        help     = STRING_TOKEN(STR_FAVOR_TIMING_MARGIN_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_PEGGEN3PRESETSEARCHERRORTARGET\
    numeric varid = SETUP_DATA.PegGen3PresetSearchErrorTarget,\
      prompt   = STRING_TOKEN(STR_ERROR_TARGET_MARGIN_PROMPT),\
	  help     = STRING_TOKEN(STR_ERROR_TARGET_MARGIN_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 65535,\
	  step        = 1,\
	  default     = 1,\
      option text = STRING_TOKEN (STR_ERROR_TARGET_MARGIN_PROMPT), value = 1, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET00\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_0],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE00_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE00_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE00_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET00\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_0],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE00_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE00_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE00_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT00\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_0],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE00_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE00_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE00_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET01\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_1],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE01_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE01_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE01_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET01\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_1],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE01_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE01_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE01_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT01\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_1],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE01_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE01_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE01_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET02\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_2],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE02_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE02_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE02_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET02\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_2],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE02_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE02_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE02_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT02\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_2],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE02_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE02_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE02_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET03\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_3],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE03_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE03_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE03_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET03\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_3],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE03_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE03_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE03_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT03\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_3],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE03_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE03_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE03_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET04\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_4],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE04_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE04_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE04_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET04\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_4],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE04_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE04_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE04_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT04\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_4],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE04_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE04_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE04_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET05\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_5],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE05_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE05_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE05_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET05\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_5],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE05_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE05_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE05_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT05\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_5],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE05_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE05_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE05_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET06\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_6],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE06_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE06_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE06_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET06\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_6],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE06_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE06_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE06_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT06\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_6],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE06_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE06_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE06_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET07\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_7],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE07_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE07_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE07_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET07\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_7],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE07_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE07_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE07_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT07\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_7],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE07_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE07_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE07_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET08\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_8],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE08_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE08_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE08_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET08\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_8],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE08_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE08_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE08_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT08\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_8],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE08_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE08_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE08_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET09\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_9],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE09_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE09_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE09_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET09\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_9],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE09_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE09_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE09_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT09\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_9],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE09_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE09_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE09_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET10\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_10],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE10_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE10_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE10_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET10\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_10],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE10_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE10_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE10_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT10\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_10],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE10_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE10_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE10_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET11\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_11],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE11_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE11_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE11_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET11\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_11],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE11_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE11_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE11_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT11\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_11],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE11_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE11_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE11_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET12\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_12],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE12_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE12_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE12_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET12\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_12],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE12_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE12_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE12_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT12\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_12],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE12_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE12_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE12_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET13\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_13],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE13_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE13_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE13_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET13\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_13],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE13_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE13_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE13_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT13\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_13],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE13_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE13_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE13_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET14\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_14],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE14_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE14_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE14_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET14\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_14],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE14_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE14_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE14_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT14\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_14],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE14_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE14_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE14_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ROOTPORTPRESET15\
    numeric varid = SETUP_DATA.Gen3RootPortPreset[OFFSET_15],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE15_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE15_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 1,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ROOT_PORT_PRESET_LANE15_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTPRESET15\
    numeric varid = SETUP_DATA.Gen3EndPointPreset[OFFSET_15],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE15_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_PRESET_LANE15_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 7,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_PRESET_LANE15_PROMPT), value = 7, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3ENDPOINTHINT15\
    numeric varid = SETUP_DATA.Gen3EndPointHint[OFFSET_15],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE15_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_ENDPOINT_HINT_LANE15_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 11,\
	  step        = 1,\
	  default     = 2,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_ENDPOINT_HINT_LANE15_PROMPT), value = 2, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP00\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_0],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE00_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE00_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE00_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP01\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_1],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE01_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE01_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE01_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP02\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_2],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE02_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE02_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE02_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP03\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_3],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE03_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE03_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE03_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP04\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_4],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE04_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE04_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE04_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP05\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_5],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE05_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE05_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE05_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP06\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_6],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE06_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE06_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE06_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_GEN3RXCTLEP07\
    numeric varid = SETUP_DATA.Gen3RxCtleP[OFFSET_7],\
      prompt   = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE07_PROMPT),\
	  help     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE07_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 8,\
      option text = STRING_TOKEN (STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE07_PROMPT), value = 8, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_INITPCIEASPMAFTEROPROM\
      oneof varid    = SETUP_DATA.InitPcieAspmAfterOprom,\
        prompt   = STRING_TOKEN(STR_INT_PCIE_ASPM_AFTER_OPROM_PROMPT),\
        help     = STRING_TOKEN(STR_INT_PCIE_ASPM_AFTER_OPROM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_ALLOWPERSTGPIOUSAGE\
      oneof varid    = SETUP_DATA.AllowPerstGpioUsage,\
        prompt   = STRING_TOKEN(STR_ALL_PERST_GPIO_USAGE_PROMPT),\
        help     = STRING_TOKEN(STR_ALL_PERST_GPIO_USAGE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_PEGRXCEMLOOPBACK\
      oneof varid =  SETUP_DATA.RxCEMLoopback,\
        prompt   = STRING_TOKEN(STR_PEG_RXCEM_LOOPBACK_MODE_PROMPT),\
        help     = STRING_TOKEN(STR_PEG_RXCEM_LOOPBACK_MODE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_PEGRXCEMLOOPBACKLANE\
    numeric varid = SETUP_DATA.RxCEMLoopbackLane,\
      prompt   = STRING_TOKEN(STR_PEG_LANE_NO_TEST_PROMPT),\
	  help     = STRING_TOKEN(STR_PEG_LANE_NO_TEST_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 15,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_PEG_LANE_NO_TEST_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_SPDPROFILESELECTED\
      oneof varid = SETUP_DATA.SpdProfileSelected,\
        prompt  = STRING_TOKEN(STR_XMP_PROFILE_PROMPT),\
        help    = STRING_TOKEN(STR_XMP_PROFILE_PROMPT_HELP),\
        option text = STRING_TOKEN (STR_DEFAULT_SPD_PROFILE), value = 0, flags = DEFAULT | INTERACTIVE | MANUFACTURING | RESET_REQUIRED, key = AUTO_ID(Default_SPD);\
        option text = STRING_TOKEN (STR_CUSTOM_PROFILE), value = 1, flags = INTERACTIVE | RESET_REQUIRED, key = AUTO_ID(Custom_SPD);\
        option text = STRING_TOKEN (STR_XMP_PROFILE_1),  value = 2, flags = INTERACTIVE | RESET_REQUIRED, key = AUTO_ID(XMP_SPD1);\
        option text = STRING_TOKEN (STR_XMP_PROFILE_2),  value = 3, flags = INTERACTIVE | RESET_REQUIRED, key = AUTO_ID(XMP_SPD2);\
      endoneof;

#define NB_ONEOF_DDRLVOPTION\
      oneof varid = SETUP_DATA.DDRLVOption,\
        prompt  = STRING_TOKEN(STR_DDR_LV_OPTION_PROMPT),\
        help    = STRING_TOKEN(STR_DDR_LV_OPTION_PROMPT_HELP),\
        option text = STRING_TOKEN(STR_DDR3_STRING),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3L_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),  value = 2, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_DDRVOLTAGEWAITTIME\
        numeric varid = SETUP_DATA.DDRVoltageWaitTime,\
          prompt   = STRING_TOKEN(STR_DDR_VOLTAGE_WAIT_TIME_PROMPT),\
	  help     = STRING_TOKEN(STR_DDR_VOLTAGE_WAIT_TIME_PROMPT_HELP),\
	  flags    = RESET_REQUIRED,\
          minimum     = 0,\
          maximum     = 3000000,\
          step        = 1,\
          default     = 0,/* default CRB time*/ \
          option text = STRING_TOKEN (STR_DDR_VOLTAGE_WAIT_TIME_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_DDRFREQLIMIT\
      oneof varid = SETUP_DATA.DdrFreqLimit,\
        prompt  = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT),\
        help    = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_AUTO),           value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1067_STRING), value = 3, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1333_STRING), value = 5, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1600_STRING), value = 7, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1867_STRING), value = 9, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_2133_STRING), value = 11, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_2400_STRING), value = 13, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_2667_STRING), value = 15, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_OC_DDRFREQLIMIT\
      oneof varid = SETUP_DATA.OcDdrFreqLimit,\
        prompt  = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT),\
        help    = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT_HELP),\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1067_STRING), value = 1067, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1333_STRING), value = 1333, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1600_STRING), value = 1600, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_1867_STRING), value = 1867, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_2133_STRING), value = 2133, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_2400_STRING), value = 2400, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DDR3_FREQ_2667_STRING), value = 2677, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_ECCSUPPORT\
      oneof varid  = SETUP_DATA.EccSupport,\
        prompt   = STRING_TOKEN (STR_ECC_SUPPORT_PROMPT),\
        help     = STRING_TOKEN (STR_ECC_SUPPORT_HELP),\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_MAXTOLUD\
      oneof varid    = SETUP_DATA.MaxTolud,\
        prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT),\
        help     = STRING_TOKEN(STR_MAX_TOLUD_HELP),\
        option text = STRING_TOKEN(STR_MAX_TOLUD_DYNAMIC_STRING), value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_1G_STRING),      value = 3,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_25G_STRING),   value = 4,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_5G_STRING),    value = 5,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_75G_STRING),   value = 6,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING),      value = 7,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING),   value = 8,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING),    value = 9,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_75G_STRING),   value = 10,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_3G_STRING),      value = 11,  flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_25G_STRING),   value = 12, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_NMODESUPPORT\
      oneof varid  = SETUP_DATA.NModeSupport,\
        prompt   = STRING_TOKEN (STR_NMODE_SUPPORT_PROMPT),\
        help     = STRING_TOKEN (STR_NMODE_SUPPORT_HELP),\
        option text = STRING_TOKEN (STR_COMMON_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_1N_MODE),     value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_2N_MODE),     value = 2, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_SCRAMBLERSUPPORT\
      oneof varid  = SETUP_DATA.ScramblerSupport,\
        prompt   = STRING_TOKEN (STR_MEMORY_SCRAMBLER_PROMPT),\
        help     = STRING_TOKEN (STR_MEMORY_SCRAMBLER_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#if MRC_DEBUG_PRINT_SUPPORT

#define NB_ONEOF_RMTCROSSERENABLE\
      oneof varid  = SETUP_DATA.RmtCrosserEnable,\
        prompt   = STRING_TOKEN (STR_RMT_CROSSER_ENABLE_PROMPT),\
        help     = STRING_TOKEN (STR_RMT_CROSSER_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_MRCFASTBOOT\
      oneof varid  = SETUP_DATA.MrcFastBoot,\
        prompt   = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_PROMPT),\
        help     = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_BDATACPITABLESUPPORT\
      oneof varid    = SETUP_DATA.BdatAcpiTableSupport,\
        prompt   = STRING_TOKEN(STR_ENABLE_NB_BDAT_PROMPT),\
        help     = STRING_TOKEN(STR_ENABLE_NB_BDAT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#else // #if MRC_DEBUG_PRINT_SUPPORT

#define NB_ONEOF_RMTCROSSERENABLE\
      oneof varid  = SETUP_DATA.RmtCrosserEnable,\
        prompt   = STRING_TOKEN (STR_RMT_CROSSER_ENABLE_PROMPT),\
        help     = STRING_TOKEN (STR_RMT_CROSSER_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_MRCFASTBOOT\
      oneof varid  = SETUP_DATA.MrcFastBoot,\
        prompt   = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_PROMPT),\
        help     = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_BDATACPITABLESUPPORT\
      oneof varid    = SETUP_DATA.BdatAcpiTableSupport,\
        prompt   = STRING_TOKEN(STR_ENABLE_NB_BDAT_PROMPT),\
        help     = STRING_TOKEN(STR_ENABLE_NB_BDAT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#endif // #if MRC_DEBUG_PRINT_SUPPORT

#define NB_ONEOF_FORCECOLDRESET\
      oneof varid  = SETUP_DATA.ForceColdReset,\
        prompt   = STRING_TOKEN (STR_FORCE_COLD_RESET_ENABLE_PROMPT),\
        help     = STRING_TOKEN (STR_FORCE_COLD_RESET_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_REMAPENABLE\
      oneof varid  = SETUP_DATA.RemapEnable,\
        prompt   = STRING_TOKEN (STR_MEMORY_REMAP_ENABLE_PROMPT),\
        help     = STRING_TOKEN (STR_MEMORY_REMAP_ENABLE_HELP),\
        option text = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DISABLEDIMMCHANNEL0\
      oneof varid  = SETUP_DATA.DisableDimmChannel0,\
        prompt   = STRING_TOKEN (STR_CHANNEL_A_DIMM_CONTROL_PROMPT),\
        help     = STRING_TOKEN (STR_CHANNEL_A_DIMM_CONTROL_HELP),\
        option text = STRING_TOKEN (STR_ENABLE_BOTH_DIMMS_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_DISABLE_DIMM0_STRING),       value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_DISABLE_DIMM1_STRING),       value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_DISABLE_BOTH_DIMMS_STRING),  value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DISABLEDIMMCHANNEL1\
      oneof varid  = SETUP_DATA.DisableDimmChannel1,\
        prompt   = STRING_TOKEN (STR_CHANNEL_B_DIMM_CONTROL_PROMPT),\
        help     = STRING_TOKEN (STR_CHANNEL_B_DIMM_CONTROL_HELP),\
        option text = STRING_TOKEN (STR_ENABLE_BOTH_DIMMS_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_DISABLE_DIMM0_STRING),       value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_DISABLE_DIMM1_STRING),       value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN (STR_DISABLE_BOTH_DIMMS_STRING),  value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_EXITMODE\
      oneof varid   = SETUP_DATA.ExitMode,\
        prompt   = STRING_TOKEN (STR_EXIT_MODE_PROMPT),\
        help     = STRING_TOKEN (STR_EXIT_MODE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_AUTO),  value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_SLOW_STRING),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_FAST_STRING),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;


#define NB_ONEOF_POWERDOWNMODE0\
      oneof varid    = SETUP_DATA.PowerDownMode0,\
        prompt   = STRING_TOKEN(STR_POWER_DOWN_MODE_PROMPT),\
        help     = STRING_TOKEN(STR_POWER_DOWN_MODE_HELP),\
        option text = STRING_TOKEN(STR_NO_PD_STRING),      value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_APD_STRING),        value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PPD_STRING),        value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PPD_DLLOFF_STRING), value = 6, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_AUTO),       value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_POWERDOWNMODE1\
      oneof varid    = SETUP_DATA.PowerDownMode1,\
        prompt   = STRING_TOKEN(STR_POWER_DOWN_MODE_PROMPT),\
        help     = STRING_TOKEN(STR_POWER_DOWN_MODE_HELP),\
        option text = STRING_TOKEN(STR_NO_PD_STRING),      value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_APD_STRING),        value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PPD_STRING),        value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_APD_PPD_STRING),    value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PWDWNIDLECOUNTER\
      oneof varid    = SETUP_DATA.PwdwnIdleCounter,\
        prompt   = STRING_TOKEN(STR_PWDWN_DOWN_IDLE_COUNTER_PROMPT),\
        help     = STRING_TOKEN(STR_PWDWN_DOWN_IDLE_COUNTER_HELP),\
        option text = STRING_TOKEN(STR_BIOS_STRING),       value = 0x80, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCODE_STRING),      value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_ENHANCEDINTERLEAVE\
      oneof varid    = SETUP_DATA.EnhancedInterleave,\
        prompt      = STRING_TOKEN(STR_ENHANCED_INTERLEAVE_PROMPT),\
        help        = STRING_TOKEN(STR_ENHANCED_INTERLEAVE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_RANKINTERLEAVE\
      oneof varid    = SETUP_DATA.RankInterleave,\
        prompt      = STRING_TOKEN(STR_RANK_INTERLEAVE_PROMPT),\
        help        = STRING_TOKEN(STR_RANK_INTERLEAVE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_WEAKLOCKEN\
      oneof varid    = SETUP_DATA.WeaklockEn,\
        prompt      = STRING_TOKEN(STR_WEAK_LOCK_ENABLE_PROMPT),\
        help        = STRING_TOKEN(STR_WEAK_LOCK_ENABLE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_MCLOCK\
      oneof varid    = SETUP_DATA.McLock,\
        prompt      = STRING_TOKEN(STR_MC_LOCK_PROMPT),\
        help        = STRING_TOKEN(STR_MC_LOCK_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_MEMORYTHERMALMANAGEMENT\
      oneof varid    = SETUP_DATA.MemoryThermalManagement,\
        prompt      = STRING_TOKEN(STR_MEMORY_THERMAL_MANAGEMENT_PROMPT),\
        help        = STRING_TOKEN(STR_MEMORY_THERMAL_MANAGEMENT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_PECIINJECTEDTEMP\
      oneof varid    = SETUP_DATA.PeciInjectedTemp,\
        prompt      = STRING_TOKEN(STR_PECI_INJECTED_TEMPERATURE_PROMPT),\
        help        = STRING_TOKEN(STR_PECI_INJECTED_TEMPERATURE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_EXTTSVIATSONBOARD\
      oneof varid    = SETUP_DATA.ExttsViaTsOnBoard,\
        prompt      = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_BOARD_PROMPT),\
        help        = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_BOARD_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_EXTTSVIATSONDIMM\
      oneof varid    = SETUP_DATA.ExttsViaTsOnDimm,\
        prompt      = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_DIMM_PROMPT),\
        help        = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_DIMM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_VIRTUALTEMPSENSOR\
      oneof varid    = SETUP_DATA.VirtualTempSensor,\
        prompt      = STRING_TOKEN(STR_VIRTUAL_TEMP_SENSOR_PROMPT),\
        help        = STRING_TOKEN(STR_VIRTUAL_TEMP_SENSOR_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_CHHASHENABLE\
      oneof varid    = SETUP_DATA.ChHashEnable,\
        prompt      = STRING_TOKEN(STR_CH_HASH_SUPPORT_PROMPT),\
        help        = STRING_TOKEN(STR_CH_HASH_SUPPORT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_CHHASHMASK\
      numeric varid = SETUP_DATA.ChHashMask,\
        prompt  = STRING_TOKEN (STR_CH_HASH_MASK_PROMPT),\
        help    = STRING_TOKEN (STR_CH_HASH_MASK_HELP),\
        flags   = RESET_REQUIRED,\
        minimum = 1,\
        maximum = 0x3FFF,\
        step    = 1,\
        default = 0x30CE,\
        option text = STRING_TOKEN (STR_TCL_VALUE), value = 0x30CE, flags = MANUFACTURING; \
      endnumeric;

#define NB_ONEOF_CHHASHINTERLEAVEBIT\
      oneof varid    = SETUP_DATA.ChHashInterleaveBit,\
        prompt      = STRING_TOKEN(STR_CH_HASH_INTERLEAVED_BIT_PROMPT),\
        help        = STRING_TOKEN(STR_CH_HASH_INTERLEAVED_BIT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_BIT06),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_BIT07),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_BIT08),  value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_BIT09),  value = 3, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_USERPOWERWEIGHTSEN\
      oneof varid    = SETUP_DATA.UserPowerWeightsEn,\
        prompt      = STRING_TOKEN(STR_USER_POWER_WEIGHTS_ENABLE_PROMPT),\
        help        = STRING_TOKEN(STR_USER_POWER_WEIGHTS_ENABLE_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_ENERGYSCALEFACT\
    numeric varid = SETUP_DATA.EnergyScaleFact,\
      prompt   = STRING_TOKEN(STR_ENERGY_SCALE_FACT_PROMPT),\
	  help     = STRING_TOKEN(STR_ENERGY_SCALE_FACT_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 7,\
	  step        = 1,\
	  default     = 4,\
      option text = STRING_TOKEN (STR_ENERGY_SCALE_FACT_PROMPT), value = 4, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_IDLEENERGYCH0DIMM0\
    numeric varid = SETUP_DATA.IdleEnergyCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_IDLE_ENERGY_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_IDLE_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 10,\
      option text = STRING_TOKEN (STR_IDLE_ENERGY_CH0DIMM0_PROMPT), value = 10, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_IDLEENERGYCH0DIMM1\
    numeric varid = SETUP_DATA.IdleEnergyCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_IDLE_ENERGY_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_IDLE_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 10,\
      option text = STRING_TOKEN (STR_IDLE_ENERGY_CH0DIMM1_PROMPT), value = 10, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PDENERGYCH0DIMM0\
    numeric varid = SETUP_DATA.PdEnergyCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_PD_ENERGY_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_PD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 6,\
      option text = STRING_TOKEN (STR_PD_ENERGY_CH0DIMM0_PROMPT), value = 6, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PDENERGYCH0DIMM1\
    numeric varid = SETUP_DATA.PdEnergyCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_PD_ENERGY_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_PD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 6,\
      option text = STRING_TOKEN (STR_PD_ENERGY_CH0DIMM1_PROMPT), value = 6, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_ACTENERGYCH0DIMM0\
    numeric varid = SETUP_DATA.ActEnergyCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_ACT_ENERGY_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_ACT_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 172,\
      option text = STRING_TOKEN (STR_ACT_ENERGY_CH0DIMM0_PROMPT), value = 172, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_ACTENERGYCH0DIMM1\
    numeric varid = SETUP_DATA.ActEnergyCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_ACT_ENERGY_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_ACT_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 172,\
      option text = STRING_TOKEN (STR_ACT_ENERGY_CH0DIMM1_PROMPT), value = 172, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RDENERGYCH0DIMM0\
    numeric varid = SETUP_DATA.RdEnergyCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_RD_ENERGY_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_RD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 212,\
      option text = STRING_TOKEN (STR_RD_ENERGY_CH0DIMM0_PROMPT), value = 212, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RDENERGYCH0DIMM1\
    numeric varid = SETUP_DATA.RdEnergyCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_RD_ENERGY_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_RD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 212,\
      option text = STRING_TOKEN (STR_RD_ENERGY_CH0DIMM1_PROMPT), value = 212, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WRENERGYCH0DIMM0\
    numeric varid = SETUP_DATA.WrEnergyCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_WR_ENERGY_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_WR_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 221,\
      option text = STRING_TOKEN (STR_WR_ENERGY_CH0DIMM0_PROMPT), value = 221, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WRENERGYCH0DIMM1\
    numeric varid = SETUP_DATA.WrEnergyCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_WR_ENERGY_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_WR_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 221,\
      option text = STRING_TOKEN (STR_WR_ENERGY_CH0DIMM1_PROMPT), value = 221, flags = MANUFACTURING; \
	endnumeric;




#define NB_NUMERIC_IDLEENERGYCH1DIMM0\
    numeric varid = SETUP_DATA.IdleEnergyCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_IDLE_ENERGY_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_IDLE_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 10,\
      option text = STRING_TOKEN (STR_IDLE_ENERGY_CH1DIMM0_PROMPT), value = 10, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_IDLEENERGYCH1DIMM1\
    numeric varid = SETUP_DATA.IdleEnergyCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_IDLE_ENERGY_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_IDLE_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 10,\
      option text = STRING_TOKEN (STR_IDLE_ENERGY_CH1DIMM1_PROMPT), value = 10, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PDENERGYCH1DIMM0\
    numeric varid = SETUP_DATA.PdEnergyCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_PD_ENERGY_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_PD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 6,\
      option text = STRING_TOKEN (STR_PD_ENERGY_CH1DIMM0_PROMPT), value = 6, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_PDENERGYCH1DIMM1\
    numeric varid = SETUP_DATA.PdEnergyCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_PD_ENERGY_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_PD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 63,\
	  step        = 1,\
	  default     = 6,\
      option text = STRING_TOKEN (STR_PD_ENERGY_CH1DIMM1_PROMPT), value = 6, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_ACTENERGYCH1DIMM0\
    numeric varid = SETUP_DATA.ActEnergyCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_ACT_ENERGY_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_ACT_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 172,\
      option text = STRING_TOKEN (STR_ACT_ENERGY_CH1DIMM0_PROMPT), value = 172, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_ACTENERGYCH1DIMM1\
    numeric varid = SETUP_DATA.ActEnergyCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_ACT_ENERGY_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_ACT_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 172,\
      option text = STRING_TOKEN (STR_ACT_ENERGY_CH1DIMM1_PROMPT), value = 172, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RDENERGYCH1DIMM0\
    numeric varid = SETUP_DATA.RdEnergyCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_RD_ENERGY_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_RD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 212,\
      option text = STRING_TOKEN (STR_RD_ENERGY_CH1DIMM0_PROMPT), value = 212, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RDENERGYCH1DIMM1\
    numeric varid = SETUP_DATA.RdEnergyCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_RD_ENERGY_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_RD_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 212,\
      option text = STRING_TOKEN (STR_RD_ENERGY_CH1DIMM1_PROMPT), value = 212, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WRENERGYCH1DIMM0\
    numeric varid = SETUP_DATA.WrEnergyCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_WR_ENERGY_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_WR_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 221,\
      option text = STRING_TOKEN (STR_WR_ENERGY_CH1DIMM0_PROMPT), value = 221, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WRENERGYCH1DIMM1\
    numeric varid = SETUP_DATA.WrEnergyCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_WR_ENERGY_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_WR_ENERGY_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 221,\
      option text = STRING_TOKEN (STR_WR_ENERGY_CH1DIMM1_PROMPT), value = 221, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_LOCKPTMREGS\
      oneof varid    = SETUP_DATA.LockPTMregs,\
        prompt      = STRING_TOKEN(STR_LOCK_PTM_REG_PROMPT),\
        help        = STRING_TOKEN(STR_LOCK_PTM_REG_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

//#define NB_ONEOF_REFRESH2X\
//      oneof varid   = SETUP_DATA.Refresh2X,\
//        prompt      = STRING_TOKEN(STR_REFRESH_2X_PROMPT),\
//        help        = STRING_TOKEN(STR_REFRESH_2X_HELP),\
//        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
//        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
//      endoneof;
#define NB_ONEOF_REFRESH2X\
      oneof varid   = SETUP_DATA.Refresh2X,\
        prompt      = STRING_TOKEN(STR_REFRESH_2X_PROMPT),\
        help        = STRING_TOKEN(STR_REFRESH_2X_HELP),\
        default     = DEFAULT_REFRESH_2X_POLICY,\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_REFRESH2XMODE\
      suppressif ideqval SETUP_DATA.Refresh2X == 0;\
      oneof varid   = SETUP_DATA.Refresh2XMode,\
        prompt      = STRING_TOKEN(STR_REFRESH_2X_MODE_PROMPT),\
        help        = STRING_TOKEN(STR_REFRESH_2X_MODE_HELP),\
        option text = STRING_TOKEN(STR_REFRESH_2X_ALWAYS),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_REFRESH_2X_HOT),     value = 2, flags = RESET_REQUIRED, key = 0;\
      endoneof;\
      endif;

#define NB_ONEOF_LPDDRTHERMALSENSOR\
      oneof varid    = SETUP_DATA.LpddrThermalSensor,\
        prompt      = STRING_TOKEN(STR_LPDDR_THERMAL_SENSOR_PROMPT),\
        help        = STRING_TOKEN(STR_LPDDR_THERMAL_SENSOR_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_SREFCFGENA\
      oneof varid    = SETUP_DATA.SrefCfgEna,\
        prompt      = STRING_TOKEN(STR_SREF_CFG_ENA_PROMPT),\
        help        = STRING_TOKEN(STR_SREF_CFG_ENA_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_SREFCFGIDLETMR\
    numeric varid = SETUP_DATA.SrefCfgIdleTmr,\
      prompt   = STRING_TOKEN(STR_SREF_CFG_IDLE_TMR_PROMPT),\
	  help     = STRING_TOKEN(STR_SREF_CFG_IDLE_TMR_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 512,\
	  maximum     = 65535,\
	  step        = 1,\
	  default     = 512,\
      option text = STRING_TOKEN (STR_SREF_CFG_IDLE_TMR_PROMPT), value = 512, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_THRTCKEMINDEFEAT\
      oneof varid    = SETUP_DATA.ThrtCkeMinDefeat,\
        prompt      = STRING_TOKEN(STR_THRT_CKE_MIN_DEFEAT_PROMPT),\
        help        = STRING_TOKEN(STR_THRT_CKE_MIN_DEFEAT_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_THRTCKEMINTMR\
    numeric varid = SETUP_DATA.ThrtCkeMinTmr,\
      prompt   = STRING_TOKEN(STR_THROTTLER_CKEMIN_TIMER_PROMPT),\
	  help     = STRING_TOKEN(STR_SREF_CFG_IDLE_TMR_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 48,\
      option text = STRING_TOKEN (STR_THROTTLER_CKEMIN_TIMER_PROMPT), value = 48, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_ENABLEPWRDNLPDDR\
      oneof varid    = SETUP_DATA.EnablePwrDnLpddr,\
        prompt   = STRING_TOKEN(STR_ENABLE_POWER_DOWN_LPDDR_PROMPT),\
        help     = STRING_TOKEN(STR_ENABLE_POWER_DOWN_LPDDR_HELP),\
        option text = STRING_TOKEN(STR_BIOS_STRING),       value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_PCODE_STRING),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_THRTCKEMINDEFEATLPDDR\
      oneof varid    = SETUP_DATA.ThrtCkeMinDefeatLpddr,\
        prompt      = STRING_TOKEN(STR_THRT_CKE_MIN_DEFEAT_LPDDR_PROMPT),\
        help        = STRING_TOKEN(STR_THRT_CKE_MIN_DEFEAT_LPDDR_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_THRTCKEMINTMRLPDDR\
    numeric varid = SETUP_DATA.ThrtCkeMinTmrLpddr,\
      prompt   = STRING_TOKEN(STR_THROTTLER_CKEMIN_TIMER_LPDDR_PROMPT),\
	  help     = STRING_TOKEN(STR_THROTTLER_CKEMIN_TIMER_LPDDR_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 64,\
      option text = STRING_TOKEN (STR_THROTTLER_CKEMIN_TIMER_LPDDR_PROMPT), value = 64, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RAPLPWRFLCH0\
    numeric varid = SETUP_DATA.RaplPwrFlCh0,\
      prompt   = STRING_TOKEN(STR_RAPL_POWER_FLOOR_CH0_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_POWER_FLOOR_CHX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_RAPL_POWER_FLOOR_CH0_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RAPLPWRFLCH1\
    numeric varid = SETUP_DATA.RaplPwrFlCh1,\
      prompt   = STRING_TOKEN(STR_RAPL_POWER_FLOOR_CH1_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_POWER_FLOOR_CHX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_RAPL_POWER_FLOOR_CH1_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_RAPLLIM2LOCK\
      oneof varid    = SETUP_DATA.RaplLim2Lock,\
        prompt      = STRING_TOKEN(STR_RAPL_LIM2_LOCK_PROMPT),\
        help        = STRING_TOKEN(STR_RAPL_LIM2_LOCK_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_RAPLLIM1ENA\
      oneof varid    = SETUP_DATA.RaplLim1Ena,\
        prompt      = STRING_TOKEN(STR_RAPL_LIM1_ENA_PROMPT),\
        help        = STRING_TOKEN(STR_RAPL_LIM1_ENA_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_RAPLLIM1PWR\
    numeric varid = SETUP_DATA.RaplLim1Pwr,\
      prompt   = STRING_TOKEN(STR_RAPL_LIM1_PWR_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_LIM_PWR_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 16383,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_RAPL_LIM1_PWR_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RAPLLIM1WINDX\
    numeric varid = SETUP_DATA.RaplLim1WindX,\
      prompt   = STRING_TOKEN(STR_RAPL_LIM1_WINDOWX_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_LIM1_WINDOWX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 3,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_RAPL_LIM1_WINDOWX_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RAPLLIM1WINDY\
    numeric varid = SETUP_DATA.RaplLim1WindY,\
      prompt   = STRING_TOKEN(STR_RAPL_LIM1_WINDOWY_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_LIM1_WINDOWY_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 31,\
	  step        = 1,\
	  default     = 0,\
      option text = STRING_TOKEN (STR_RAPL_LIM1_WINDOWY_PROMPT), value = 0, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_RAPLLIM2ENA\
      oneof varid    = SETUP_DATA.RaplLim2Ena,\
        prompt      = STRING_TOKEN(STR_RAPL_LIM2_ENA_PROMPT),\
        help        = STRING_TOKEN(STR_RAPL_LIM2_ENA_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_RAPLLIM2PWR\
    numeric varid = SETUP_DATA.RaplLim2Pwr,\
      prompt   = STRING_TOKEN(STR_RAPL_LIM2_PWR_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_LIM_PWR_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 16383,\
	  step        = 1,\
	  default     = 222,\
      option text = STRING_TOKEN (STR_RAPL_LIM2_PWR_PROMPT), value = 222, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RAPLLIM2WINDX\
    numeric varid = SETUP_DATA.RaplLim2WindX,\
      prompt   = STRING_TOKEN(STR_RAPL_LIM2_WINDOWX_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_LIM2_WINDOWX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 3,\
	  step        = 1,\
	  default     = 1,\
      option text = STRING_TOKEN (STR_RAPL_LIM2_WINDOWX_PROMPT), value = 1, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_RAPLLIM2WINDY\
    numeric varid = SETUP_DATA.RaplLim2WindY,\
      prompt   = STRING_TOKEN(STR_RAPL_LIM2_WINDOWY_PROMPT),\
	  help     = STRING_TOKEN(STR_RAPL_LIM2_WINDOWY_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 31,\
	  step        = 1,\
	  default     = 10,\
      option text = STRING_TOKEN (STR_RAPL_LIM2_WINDOWY_PROMPT), value = 10, flags = MANUFACTURING; \
	endnumeric;

#define NB_ONEOF_ENABLEEXTTS\
      oneof varid    = SETUP_DATA.EnableExtts,\
        prompt      = STRING_TOKEN(STR_ENABLE_EXTERN_STATUS_PROMPT),\
        help        = STRING_TOKEN(STR_ENABLE_EXTERN_STATUS_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_ENABLECLTM\
      oneof varid    = SETUP_DATA.EnableCltm,\
        prompt      = STRING_TOKEN(STR_ENABLE_CLTM_PROMPT),\
        help        = STRING_TOKEN(STR_ENABLE_CLTM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_ENABLEOLTM\
      oneof varid    = SETUP_DATA.EnableOltm,\
        prompt      = STRING_TOKEN(STR_ENABLE_OLTM_PROMPT),\
        help        = STRING_TOKEN(STR_ENABLE_OLTM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_NUMERIC_WARMTHRESHOLDCH0DIMM0\
    numeric varid = SETUP_DATA.WarmThresholdCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_WARM_THRESHOLD_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_THRESHOLD_CH0DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMTHRESHOLDCH0DIMM1\
    numeric varid = SETUP_DATA.WarmThresholdCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_WARM_THRESHOLD_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_THRESHOLD_CH0DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTHRESHOLDCH0DIMM0\
    numeric varid = SETUP_DATA.HotThresholdCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_HOT_THRESHOLD_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_THRESHOLD_CH0DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTHRESHOLDCH0DIMM1\
    numeric varid = SETUP_DATA.HotThresholdCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_HOT_THRESHOLD_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_THRESHOLD_CH0DIMM1_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMTHRESHOLDCH1DIMM0\
    numeric varid = SETUP_DATA.WarmThresholdCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_WARM_THRESHOLD_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_THRESHOLD_CH1DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMTHRESHOLDCH1DIMM1\
    numeric varid = SETUP_DATA.WarmThresholdCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_WARM_THRESHOLD_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_THRESHOLD_CH1DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTHRESHOLDCH1DIMM0\
    numeric varid = SETUP_DATA.HotThresholdCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_HOT_THRESHOLD_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_THRESHOLD_CH1DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTHRESHOLDCH1DIMM1\
    numeric varid = SETUP_DATA.HotThresholdCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_HOT_THRESHOLD_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_THRESHOLD_CH1DIMM1_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMBUDGETCH0DIMM0\
    numeric varid = SETUP_DATA.WarmBudgetCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_WARM_BUDGET_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_BUDGET_CH0DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMBUDGETCH0DIMM1\
    numeric varid = SETUP_DATA.WarmBudgetCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_WARM_BUDGET_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_BUDGET_CH0DIMM1_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTBUDGETCH0DIMM0\
    numeric varid = SETUP_DATA.HotBudgetCh0Dimm0,\
      prompt   = STRING_TOKEN(STR_HOT_BUDGET_CH0DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_BUDGET_CH0DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTBUDGETCH0DIMM1\
    numeric varid = SETUP_DATA.HotBudgetCh0Dimm1,\
      prompt   = STRING_TOKEN(STR_HOT_BUDGET_CH0DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_BUDGET_CH0DIMM1_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMBUDGETCH1DIMM0\
    numeric varid = SETUP_DATA.WarmBudgetCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_WARM_BUDGET_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_BUDGET_CH1DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_WARMBUDGETCH1DIMM1\
    numeric varid = SETUP_DATA.WarmBudgetCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_WARM_BUDGET_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_WARM_BUDGET_CH1DIMM1_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTBUDGETCH1DIMM0\
    numeric varid = SETUP_DATA.HotBudgetCh1Dimm0,\
      prompt   = STRING_TOKEN(STR_HOT_BUDGET_CH1DIMM0_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_BUDGET_CH1DIMM0_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_HOTBUDGETCH1DIMM1\
    numeric varid = SETUP_DATA.HotBudgetCh1Dimm1,\
      prompt   = STRING_TOKEN(STR_HOT_BUDGET_CH1DIMM1_PROMPT),\
	  help     = STRING_TOKEN(STR_THRESHOLD_AND_BUDGET_CHXDIMMX_HELP),\
	  flags    = RESET_REQUIRED,\
	  minimum     = 0,\
	  maximum     = 255,\
	  step        = 1,\
	  default     = 255,\
      option text = STRING_TOKEN (STR_HOT_BUDGET_CH1DIMM1_PROMPT), value = 255, flags = MANUFACTURING; \
	endnumeric;

#define NB_NUMERIC_TCL\
      numeric varid = SETUP_DATA.tCL,\
        prompt  = STRING_TOKEN (STR_TCL_VALUE),\
        help    = STRING_TOKEN (STR_TCL_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tCL_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 4,\
        option text = STRING_TOKEN (STR_TCL_VALUE), value = 4, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRCD\
      numeric varid = SETUP_DATA.tRCD,\
        prompt  = STRING_TOKEN (STR_TRCD_VALUE),\
        help    = STRING_TOKEN (STR_TRCD_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRCD_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 3,\
        option text = STRING_TOKEN (STR_TRCD_VALUE), value = 3, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRP\
      numeric varid = SETUP_DATA.tRP,\
        prompt  = STRING_TOKEN (STR_TRP_VALUE),\
        help    = STRING_TOKEN (STR_TRP_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRP_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 3,\
        option text = STRING_TOKEN (STR_TRP_VALUE), value = 3, flags = MANUFACTURING; \
      endnumeric;
                
#define NB_NUMERIC_TRAS\
      numeric varid = SETUP_DATA.tRAS,\
        prompt  = STRING_TOKEN (STR_TRAS_VALUE),\
        help    = STRING_TOKEN (STR_TRAS_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRAS_KEY),\
        minimum = 0,\
        maximum = 65535,\
        step    = 1,\
        default = 9,\
        option text = STRING_TOKEN (STR_TRAS_VALUE), value = 9, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TWR\
      numeric varid = SETUP_DATA.tWR,\
        prompt  = STRING_TOKEN (STR_TWR_VALUE),\
        help    = STRING_TOKEN (STR_TWR_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tWR_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 5,\
        option text = STRING_TOKEN (STR_TWR_VALUE), value = 5, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRFC\
      numeric varid = SETUP_DATA.tRFC,\
        prompt  = STRING_TOKEN (STR_TRFC_VALUE),\
        help    = STRING_TOKEN (STR_TRFC_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRFC_KEY),\
        minimum = 0,\
        maximum = 65535,\
        step    = 1,\
        default = 15,\
        option text = STRING_TOKEN (STR_TRFC_VALUE), value = 15, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRRD\
      numeric varid = SETUP_DATA.tRRD,\
        prompt  = STRING_TOKEN (STR_TRRD_VALUE),\
        help    = STRING_TOKEN (STR_TRRD_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRRD_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 4,\
        option text = STRING_TOKEN (STR_TRRD_VALUE), value = 4, flags = MANUFACTURING; \
      endnumeric;\

#define NB_NUMERIC_TWTR\
      numeric varid = SETUP_DATA.tWTR,\
        prompt  = STRING_TOKEN (STR_TWTR_VALUE),\
        help    = STRING_TOKEN (STR_TWTR_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tWTR_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 3,\
        option text = STRING_TOKEN (STR_TWTR_VALUE), value = 3, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRTP\
      numeric varid = SETUP_DATA.tRTP,\
        prompt  = STRING_TOKEN (STR_TRTP_VALUE),\
        help    = STRING_TOKEN (STR_TRTP_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRTP_KEY),\
        minimum = 0,\
        maximum = 255,\
        step    = 1,\
        default = 4,\
        option text = STRING_TOKEN (STR_TRTP_VALUE), value = 4, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRC\
      numeric varid = SETUP_DATA.tRC,\
        prompt  = STRING_TOKEN (STR_TRC_VALUE),\
        help    = STRING_TOKEN (STR_TRC_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRC_KEY),\
        minimum = 0,\
        maximum = 65535,\
        step    = 1,\
        default = 15,\
        option text = STRING_TOKEN (STR_TRC_VALUE), value = 15, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TFAW\
      numeric varid = SETUP_DATA.tFAW,\
        prompt  = STRING_TOKEN (STR_TFAW_VALUE),\
        help    = STRING_TOKEN (STR_TFAW_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tFAW_KEY),\
        minimum = 0,\
        maximum = 65535,\
        step    = 1,\
        default = 10,\
        option text = STRING_TOKEN (STR_TFAW_VALUE), value = 10, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TCWL\
      numeric varid = SETUP_DATA.tCWL,\
        prompt  = STRING_TOKEN (STR_TCWL_VALUE),\
        help    = STRING_TOKEN (STR_TCWL_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tCWL_KEY),\
        minimum = 0,\
        maximum = 12,\
        step    = 1,\
        default = 5,\
        option text = STRING_TOKEN (STR_TCWL_VALUE), value = 5, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TREFI\
      numeric varid = SETUP_DATA.tREFI,\
        prompt  = STRING_TOKEN (STR_TREFI_VALUE),\
        help    = STRING_TOKEN (STR_TREFI_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tREFI_KEY),\
        minimum = 0,\
        maximum = 65535,\
        step    = 1,\
        default = 1,\
        option text = STRING_TOKEN (STR_TREFI_VALUE), value = 1, flags = MANUFACTURING; \
      endnumeric;

#define NB_NUMERIC_TRPAB\
      numeric varid = SETUP_DATA.tRPab,\
        prompt  = STRING_TOKEN (STR_TRPAB_VALUE),\
        help    = STRING_TOKEN (STR_TRPAB_VALUE_HELP),\
        flags   = INTERACTIVE | RESET_REQUIRED,\
        key     = AUTO_ID(NB_tRPab_KEY),\
        minimum = 0,\
        maximum = 18,\
        step    = 1,\
        default = 4,\
        option text = STRING_TOKEN (STR_TRPAB_VALUE), value = 4, flags = MANUFACTURING; \
      endnumeric;

#define NB_ONEOF_DMIVC1\
      oneof varid    = SETUP_DATA.DmiVc1,\
        prompt   = STRING_TOKEN(STR_DMI_VC1_PROMPT),\
        help     = STRING_TOKEN(STR_DMI_VC1_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DMIVCP\
      oneof varid    = SETUP_DATA.DmiVcp,\
        prompt   = STRING_TOKEN(STR_DMI_VCP_PROMPT),\
        help     = STRING_TOKEN(STR_DMI_VCP_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DMIVCM\
      oneof varid    = SETUP_DATA.DmiVcm,\
        prompt   = STRING_TOKEN(STR_DMI_VCM_PROMPT),\
        help     = STRING_TOKEN(STR_DMI_VCM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_NBDMIASPM\
      oneof varid   = SETUP_DATA.NBDmiAspm,\
        prompt      = STRING_TOKEN(STR_DMI_ASPM_PROMPT),\
        help        = STRING_TOKEN(STR_DMI_ASPM_HELP),\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DMI_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DMI_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_DMI_ASPM_L0SL1_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_NBDMIEXTSYNC\
      oneof varid =  SETUP_DATA.NBDmiExtSync,\
        prompt   = STRING_TOKEN(STR_DMI_EXT_SYNCH_PROMPT),\
        help     = STRING_TOKEN(STR_DMI_EXT_SYNCH_HELP),\
        option text  = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
      endoneof;

#define NB_ONEOF_DMIGEN2\
      oneof varid   = SETUP_DATA.DmiGen2,\
        prompt      = STRING_TOKEN(STR_DMI_GEN2_PROMPT),\
        help        = STRING_TOKEN(STR_DMI_GEN2_HELP),\
        option text = STRING_TOKEN(STR_COMMON_AUTO),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED, key = 0;\
        option text = STRING_TOKEN(STR_COMMON_DISABLED), value = 0, flags = RESET_REQUIRED, key = 0;\
      endoneof;

#define NB_ONEOF_DMIDEEMPHASIS\
      oneof varid =  SETUP_DATA.DmiDeEmphasis,\
        prompt   = STRING_TOKEN(STR_DMI_DE_EMPHASIS_PROMPT),\
        help     = STRING_TOKEN(STR_DMI_DE_EMPHASIS_HELP),\
        option text  = STRING_TOKEN (STR_6DB_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = RESET_REQUIRED;\
      endoneof;

#define NB_ONEOF_DMIIOT\
      oneof varid =  SETUP_DATA.DmiIot,\
        prompt   = STRING_TOKEN(STR_DMI_IOT_PROMPT),\
        help     = STRING_TOKEN(STR_DMI_IOT_HELP),\
        option text  = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
      endoneof;

#define NB_ONEOF_GDXCENABLE\
      oneof varid =  SETUP_DATA.GdxcEnable,\
        prompt   = STRING_TOKEN(STR_GDXCENABLE_PROMPT),\
        help     = STRING_TOKEN(STR_GDXCENABLE_HELP),\
        option text  = STRING_TOKEN (STR_COMMON_ENABLED),  value = 1, flags = RESET_REQUIRED;\
        option text  = STRING_TOKEN (STR_COMMON_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;\
      endoneof;

#endif // CONTROL_DEFINITION
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
#ifdef CONTROLS_WITH_DEFAULTS
NB_ONEOF_ENABLEVTD                         // EnableVtd
NB_ONEOF_IGFXFORCEDISABLE                  // IGfxForceDisable
NB_ONEOF_PRIMARYDISPLAY                    // PrimaryDisplay
#if ( defined(SwitchableGraphics_SUPPORT) && (SwitchableGraphics_SUPPORT == 0) )
NB_ONEOF_PRIMARYDISPLAY1                   // PrimaryDisplay
#endif
NB_ONEOF_PRIMARYDISPLAY2                   // PrimaryDisplay
NB_ONEOF_PRIMARYPEG                        // PrimaryPeg
NB_ONEOF_PRIMARYPCIE                       // PrimaryPcie
NB_ONEOF_DETECTNONCOMPLAINT                // DetectNonComplaint
NB_ONEOF_IGPUPORTCONFIG                    // IGpuPortConfig
NB_ONEOF_DIGITALPORTBMODE                  // DigitalPortBMode
NB_ONEOF_DIGITALPORTCMODE                  // DigitalPortCMode
NB_ONEOF_DIGITALPORTDMODE                  // DigitalPortDMode
NB_ONEOF_SADEVICE7                         // SaDevice7
NB_ONEOF_SADEVICE4                         // SaDevice4
NB_ONEOF_SAAUDIOENABLE                     // SaAudioEnable
//NB_ONEOF_SAHDMICODECPORTB                  // SaHdmiCodecPortB
//NB_ONEOF_SAHDMICODECPORTC                  // SaHdmiCodecPortC
//NB_ONEOF_SAHDMICODECPORTD                  // SaHdmiCodecPortD
NB_ONEOF_ENABLENBCRID                      // EnableNbCrid
NB_ONEOF_BDATACPITABLESUPPORT              // BdatAcpiTableSupport
NB_NUMERIC_GFXTURBOIMON                    // GfxTurboIMON
NB_ONEOF_INTERNALGRAPHICS                  // InternalGraphics
NB_ONEOF_GTTSIZE                           // GTTSize
NB_ONEOF_APERTURESIZE                      // ApertureSize
NB_ONEOF_IGDDVMT50PREALLOC                 // IgdDvmt50PreAlloc
NB_ONEOF_IGDDVMT50TOTALALLOC               // IgdDvmt50TotalAlloc
NB_ONEOF_LOWPOWERMODE                      // LowPowerMode
NB_ONEOF_PANELPOWERE                       // PanelPowerEnable
NB_ONEOF_IGDBOOTTYPE                       // IgdBootType
NB_ONEOF_DISPLAYPIPEB                      // DisplayPipeB
NB_ONEOF_LCDPANELTYPE                      // LcdPanelType
NB_ONEOF_SDVOPANELTYPE                     // SdvoPanelType
NB_ONEOF_LCDPANELSCALING                   // LcdPanelScaling
NB_ONEOF_IGDLCDBLC                         // IgdLcdBlc
NB_ONEOF_IGDLCDIBIA                        // IgdLcdIBia
NB_ONEOF_IGDLCDSSCC                        // IgdLcdSSCC
NB_ONEOF_IGDTV1STANDARD                    // IgdTV1Standard
NB_ONEOF_IGDTV2STANDARD                    // IgdTV2Standard
NB_ONEOF_ALSENABLE                         // AlsEnable
NB_ONEOF_ACTIVELFP                         // ActiveLFP
NB_ONEOF_LFPCOLORDEPTH                     // LfpColorDepth
NB_ONEOF_RENDERSTANDBY                     // RenderStandby
NB_ONEOF_DEEPRENDERSTANDBY                 // DeepRenderStandby
NB_ONEOF_GTOCSUPPORT                       // GtOcSupport
NB_NUMERIC_GTMAXOCTURBORATIO               // GtMaxOcTurboRatio
NB_NUMERIC_GTEXTRATURBOVOLTAGE             // GtExtraTurboVoltage
NB_ONEOF_PEGGENX0                          // PegGenx0
NB_ONEOF_PEGGENX1                          // PegGenx1
NB_ONEOF_PEGGENX2                          // PegGenx2
NB_ONEOF_C7ALLOWED                         // C7Allowed
NB_ONEOF_ALWAYSENABLEPEG                   // AlwaysEnablePeg
NB_ONEOF_PEGASPM0                          // PegAspm[0]
NB_ONEOF_PEGASPML0S0                       // PegAspmL0s[0]
NB_ONEOF_PEGDEEMPHASIS0                    // PegDeEmphasis[0]
NB_ONEOF_PEGASPM1                          // PegAspm[1]
NB_ONEOF_PEGASPML0S1                       // PegAspmL0s[1]
NB_ONEOF_PEGDEEMPHASIS1                    // PegDeEmphasis[1]
NB_ONEOF_PEGASPM2                          // PegAspm[2]
NB_ONEOF_PEGASPML0S2                       // PegAspmL0s[2]
NB_ONEOF_PEGDEEMPHASIS2                    // PegDeEmphasis[2]
NB_ONEOF_PEGSAMPLERCALIBRATE               // PegSamplerCalibrate
NB_ONEOF_SWINGCONTROL                      // SwingControl
NB_ONEOF_PEGGEN3EQUALIZATION               // PegGen3Equalization
NB_ONEOF_PEGGEN3EQUALIZATIONPHASE2         // PegGen3EqualizationPhase2
NB_ONEOF_PEGGEN3PRESETSEARCH               // PegGen3PresetSearch
NB_ONEOF_PEGGEN3FORCEPRESETSEARCH          // PegGen3ForcePresetSearch
NB_NUMERIC_PEGGEN3PRESETSEARCHDWELLTIME    // PegGen3PresetSearchDwellTime
NB_NUMERIC_PEGGEN3PRESETSEARCHMARGINSTEPS  // PegGen3PresetSearchMarginSteps
NB_NUMERIC_PEGGEN3PRESETSEARCHSTARTMARGIN  // PegGen3PresetSearchStartMargin
NB_NUMERIC_PEGGEN3PRESETSEARCHVOLTAGEMARGINSTEPS // PegGen3PresetSearchVoltageMarginSteps
NB_NUMERIC_PEGGEN3PRESETSEARCHVOLTAGESTARTMARGIN // PegGen3PresetSearchVoltageStartMargin
NB_NUMERIC_PEGGEN3PRESETSEARCHFAVORTIMING  // PegGen3PresetSearchFavorTiming
NB_NUMERIC_PEGGEN3PRESETSEARCHERRORTARGET  // PegGen3PresetSearchErrorTarget
NB_NUMERIC_GEN3ROOTPORTPRESET00            // Gen3RootPortPreset[0]
NB_NUMERIC_GEN3ENDPOINTPRESET00            // Gen3EndPointPreset[0]
NB_NUMERIC_GEN3ENDPOINTHINT00              // Gen3EndPointHint[0]
NB_NUMERIC_GEN3ROOTPORTPRESET01            // Gen3RootPortPreset[1]
NB_NUMERIC_GEN3ENDPOINTPRESET01            // Gen3EndPointPreset[1]
NB_NUMERIC_GEN3ENDPOINTHINT01              // Gen3EndPointHint[1]
NB_NUMERIC_GEN3ROOTPORTPRESET02            // Gen3RootPortPreset[2]
NB_NUMERIC_GEN3ENDPOINTPRESET02            // Gen3EndPointPreset[2]
NB_NUMERIC_GEN3ENDPOINTHINT02              // Gen3EndPointHint[2]
NB_NUMERIC_GEN3ROOTPORTPRESET03            // Gen3RootPortPreset[3]
NB_NUMERIC_GEN3ENDPOINTPRESET03            // Gen3EndPointPreset[3]
NB_NUMERIC_GEN3ENDPOINTHINT03              // Gen3EndPointHint[3]
NB_NUMERIC_GEN3ROOTPORTPRESET04            // Gen3RootPortPreset[4]
NB_NUMERIC_GEN3ENDPOINTPRESET04            // Gen3EndPointPreset[4]
NB_NUMERIC_GEN3ENDPOINTHINT04              // Gen3EndPointHint[4]
NB_NUMERIC_GEN3ROOTPORTPRESET05            // Gen3RootPortPreset[5]
NB_NUMERIC_GEN3ENDPOINTPRESET05            // Gen3EndPointPreset[5]
NB_NUMERIC_GEN3ENDPOINTHINT05              // Gen3EndPointHint[5]
NB_NUMERIC_GEN3ROOTPORTPRESET06            // Gen3RootPortPreset[6]
NB_NUMERIC_GEN3ENDPOINTPRESET06            // Gen3EndPointPreset[6]
NB_NUMERIC_GEN3ENDPOINTHINT06              // Gen3EndPointHint[6]
NB_NUMERIC_GEN3ROOTPORTPRESET07            // Gen3RootPortPreset[7]
NB_NUMERIC_GEN3ENDPOINTPRESET07            // Gen3EndPointPreset[7]
NB_NUMERIC_GEN3ENDPOINTHINT07              // Gen3EndPointHint[7]
NB_NUMERIC_GEN3ROOTPORTPRESET08            // Gen3RootPortPreset[8]
NB_NUMERIC_GEN3ENDPOINTPRESET08            // Gen3EndPointPreset[8]
NB_NUMERIC_GEN3ENDPOINTHINT08              // Gen3EndPointHint[8]
NB_NUMERIC_GEN3ROOTPORTPRESET09            // Gen3RootPortPreset[9]
NB_NUMERIC_GEN3ENDPOINTPRESET09            // Gen3EndPointPreset[9]
NB_NUMERIC_GEN3ENDPOINTHINT09              // Gen3EndPointHint[9]
NB_NUMERIC_GEN3ROOTPORTPRESET10            // Gen3RootPortPreset[10]
NB_NUMERIC_GEN3ENDPOINTPRESET10            // Gen3EndPointPreset[10]
NB_NUMERIC_GEN3ENDPOINTHINT10              // Gen3EndPointHint[10]
NB_NUMERIC_GEN3ROOTPORTPRESET11            // Gen3RootPortPreset[11]
NB_NUMERIC_GEN3ENDPOINTPRESET11            // Gen3EndPointPreset[11]
NB_NUMERIC_GEN3ENDPOINTHINT11              // Gen3EndPointHint[11]
NB_NUMERIC_GEN3ROOTPORTPRESET12            // Gen3RootPortPreset[12]
NB_NUMERIC_GEN3ENDPOINTPRESET12            // Gen3EndPointPreset[12]
NB_NUMERIC_GEN3ENDPOINTHINT12              // Gen3EndPointHint[12]
NB_NUMERIC_GEN3ROOTPORTPRESET13            // Gen3RootPortPreset[13]
NB_NUMERIC_GEN3ENDPOINTPRESET13            // Gen3EndPointPreset[13]
NB_NUMERIC_GEN3ENDPOINTHINT13              // Gen3EndPointHint[13]
NB_NUMERIC_GEN3ROOTPORTPRESET14            // Gen3RootPortPreset[14]
NB_NUMERIC_GEN3ENDPOINTPRESET14            // Gen3EndPointPreset[14]
NB_NUMERIC_GEN3ENDPOINTHINT14              // Gen3EndPointHint[14]
NB_NUMERIC_GEN3ROOTPORTPRESET15            // Gen3RootPortPreset[15]
NB_NUMERIC_GEN3ENDPOINTPRESET15            // Gen3EndPointPreset[15]
NB_NUMERIC_GEN3ENDPOINTHINT15              // Gen3EndPointHint[15]
NB_NUMERIC_GEN3RXCTLEP00                   // Gen3RxCtleP[0]
NB_NUMERIC_GEN3RXCTLEP01                   // Gen3RxCtleP[1]
NB_NUMERIC_GEN3RXCTLEP02                   // Gen3RxCtleP[2]
NB_NUMERIC_GEN3RXCTLEP03                   // Gen3RxCtleP[3]
NB_NUMERIC_GEN3RXCTLEP04                   // Gen3RxCtleP[4]
NB_NUMERIC_GEN3RXCTLEP05                   // Gen3RxCtleP[5]
NB_NUMERIC_GEN3RXCTLEP06                   // Gen3RxCtleP[6]
NB_NUMERIC_GEN3RXCTLEP07                   // Gen3RxCtleP[7]
NB_ONEOF_INITPCIEASPMAFTEROPROM            // InitPcieAspmAfterOprom
NB_ONEOF_ALLOWPERSTGPIOUSAGE               // AllowPerstGpioUsage
NB_NUMERIC_PEGRXCEMLOOPBACK                // RxCEMLoopback
NB_NUMERIC_PEGRXCEMLOOPBACKLANE            // RxCEMLoopbackLane
NB_ONEOF_SPDPROFILESELECTED                // SpdProfileSelected
NB_ONEOF_DDRLVOPTION                       // DDRLVOption
NB_NUMERIC_DDRVOLTAGEWAITTIME              // DDRVoltageWaitTime
NB_ONEOF_DDRFREQLIMIT                      // DdrFreqLimit
NB_ONEOF_OC_DDRFREQLIMIT                   // DdrFreqLimit
NB_ONEOF_ECCSUPPORT                        // EccSupport
NB_ONEOF_MAXTOLUD                          // MaxTolud
NB_ONEOF_NMODESUPPORT                      // NModeSupport
NB_ONEOF_SCRAMBLERSUPPORT                  // ScramblerSupport
NB_ONEOF_RMTCROSSERENABLE                  // RmtCrosserEnable
NB_ONEOF_MRCFASTBOOT                       // MrcFastBoot
NB_ONEOF_FORCECOLDRESET                    // ForceColdReset
NB_ONEOF_REMAPENABLE                       // RemapEnable
NB_ONEOF_DISABLEDIMMCHANNEL0               // DisableDimmChannel0
NB_ONEOF_DISABLEDIMMCHANNEL1               // DisableDimmChannel1
NB_ONEOF_EXITMODE                          // ExitMode
NB_ONEOF_POWERDOWNMODE0                    // PowerDownMode0
NB_ONEOF_POWERDOWNMODE1                    // PowerDownMode1
NB_ONEOF_PWDWNIDLECOUNTER                  // PwdwnIdleCounter
NB_ONEOF_ENHANCEDINTERLEAVE                // EnhancedInterleave
NB_ONEOF_RANKINTERLEAVE                    // RankInterleave
NB_ONEOF_WEAKLOCKEN                        // WeaklockEn
NB_ONEOF_MCLOCK                            // McLock 
NB_ONEOF_MEMORYTHERMALMANAGEMENT           // MemoryThermalManagement
NB_ONEOF_PECIINJECTEDTEMP                  // PeciInjectedTemp
NB_ONEOF_EXTTSVIATSONBOARD                 // ExttsViaTsOnBoard
NB_ONEOF_EXTTSVIATSONDIMM                  // ExttsViaTsOnDimm
NB_ONEOF_VIRTUALTEMPSENSOR                 // VirtualTempSensor
NB_ONEOF_CHHASHENABLE                      // ChHashEnable
NB_NUMERIC_CHHASHMASK                      // ChHashMask
NB_ONEOF_CHHASHINTERLEAVEBIT               // ChHashInterleaveBit
NB_ONEOF_USERPOWERWEIGHTSEN                // UserPowerWeightsEn
NB_NUMERIC_ENERGYSCALEFACT                 // EnergyScaleFact
NB_NUMERIC_IDLEENERGYCH0DIMM0              // IdleEnergyCh0Dimm0
NB_NUMERIC_IDLEENERGYCH0DIMM1              // IdleEnergyCh0Dimm1
NB_NUMERIC_PDENERGYCH0DIMM0                // PdEnergyCh0Dimm0
NB_NUMERIC_PDENERGYCH0DIMM1                // PdEnergyCh0Dimm1
NB_NUMERIC_ACTENERGYCH0DIMM0               // ActEnergyCh0Dimm0
NB_NUMERIC_ACTENERGYCH0DIMM1               // ActEnergyCh0Dimm1
NB_NUMERIC_RDENERGYCH0DIMM0                // RdEnergyCh0Dimm0
NB_NUMERIC_RDENERGYCH0DIMM1                // RdEnergyCh0Dimm1
NB_NUMERIC_WRENERGYCH0DIMM0                // WrEnergyCh0Dimm0
NB_NUMERIC_WRENERGYCH0DIMM1                // WrEnergyCh0Dimm1
NB_NUMERIC_IDLEENERGYCH1DIMM0              // IdleEnergyCh1Dimm0
NB_NUMERIC_PDENERGYCH1DIMM0                // PdEnergyCh1Dimm0
NB_NUMERIC_ACTENERGYCH1DIMM0               // ActEnergyCh1Dimm0
NB_NUMERIC_RDENERGYCH1DIMM0                // RdEnergyCh1Dimm0
NB_NUMERIC_WRENERGYCH1DIMM0                // WrEnergyCh1Dimm0
NB_NUMERIC_IDLEENERGYCH1DIMM1              // IdleEnergyCh1Dimm1
NB_NUMERIC_PDENERGYCH1DIMM1                // PdEnergyCh1Dimm1
NB_NUMERIC_ACTENERGYCH1DIMM1               // ActEnergyCh1Dimm1
NB_NUMERIC_RDENERGYCH1DIMM1                // RdEnergyCh1Dimm1
NB_NUMERIC_WRENERGYCH1DIMM1                // WrEnergyCh1Dimm1
NB_ONEOF_LOCKPTMREGS                       // LockPTMregs
NB_ONEOF_REFRESH2X                         // Refresh2X
NB_ONEOF_REFRESH2XMODE                     // Refresh2XMode
NB_ONEOF_LPDDRTHERMALSENSOR                // LpddrThermalSensor 
NB_ONEOF_SREFCFGENA                        // SrefCfgEna
NB_NUMERIC_SREFCFGIDLETMR                  // SrefCfgIdleTmr
NB_ONEOF_THRTCKEMINDEFEAT                  // ThrtCkeMinDefeat
NB_NUMERIC_THRTCKEMINTMR                   // ThrtCkeMinTmr
NB_ONEOF_ENABLEPWRDNLPDDR                  // EnablePwrDnLpddr
NB_ONEOF_THRTCKEMINDEFEATLPDDR             // ThrtCkeMinDefeatLpddr
NB_NUMERIC_THRTCKEMINTMRLPDDR              // ThrtCkeMinTmrLpddr
NB_NUMERIC_RAPLPWRFLCH0                    // RaplPwrFlCh0
NB_NUMERIC_RAPLPWRFLCH1                    // RaplPwrFlCh1
NB_ONEOF_RAPLLIM2LOCK                      // RaplLim2Lock
NB_ONEOF_RAPLLIM1ENA                       // RaplLim1Ena
NB_NUMERIC_RAPLLIM1PWR                     // RaplLim1Pwr
NB_NUMERIC_RAPLLIM1WINDX                   // RaplLim1WindX
NB_NUMERIC_RAPLLIM1WINDY                   // RaplLim1WindY
NB_ONEOF_RAPLLIM2ENA                       // RaplLim2Ena
NB_NUMERIC_RAPLLIM2PWR                     // RaplLim2Pwr
NB_NUMERIC_RAPLLIM2WINDX                   // RaplLim2WindX
NB_NUMERIC_RAPLLIM2WINDY                   // RaplLim2WindY
NB_ONEOF_ENABLEEXTTS                       // EnableExtts
NB_ONEOF_ENABLECLTM                        // EnableCltm
NB_ONEOF_ENABLEOLTM                        // EnableOltm
NB_NUMERIC_WARMTHRESHOLDCH0DIMM0           // WarmThresholdCh0Dimm0
NB_NUMERIC_WARMTHRESHOLDCH0DIMM1           // WarmThresholdCh0Dimm1
NB_NUMERIC_HOTHRESHOLDCH0DIMM0             // HotThresholdCh0Dimm0
NB_NUMERIC_HOTHRESHOLDCH0DIMM1             // HotThresholdCh0Dimm1
NB_NUMERIC_WARMTHRESHOLDCH1DIMM0           // WarmThresholdCh1Dimm0
NB_NUMERIC_WARMTHRESHOLDCH1DIMM1           // WarmThresholdCh1Dimm1
NB_NUMERIC_HOTHRESHOLDCH1DIMM0             // HotThresholdCh1Dimm0
NB_NUMERIC_HOTHRESHOLDCH1DIMM1             // HotThresholdCh1Dimm1
NB_NUMERIC_WARMBUDGETCH0DIMM0              // WarmBudgetCh0Dimm0
NB_NUMERIC_WARMBUDGETCH0DIMM1              // WarmBudgetCh0Dimm1
NB_NUMERIC_HOTBUDGETCH0DIMM0               // HotBudgetCh0Dimm0
NB_NUMERIC_HOTBUDGETCH0DIMM1               // HotBudgetCh0Dimm1
NB_NUMERIC_WARMBUDGETCH1DIMM0              // WarmBudgetCh1Dimm0
NB_NUMERIC_WARMBUDGETCH1DIMM1              // WarmBudgetCh1Dimm1
NB_NUMERIC_HOTBUDGETCH1DIMM0               // HotBudgetCh1Dimm0
NB_NUMERIC_HOTBUDGETCH1DIMM1               // HotBudgetCh1Dimm1
NB_NUMERIC_TCL                             // tCL
NB_NUMERIC_TRCD                            // tRCD
NB_NUMERIC_TRP                             // tRP
NB_NUMERIC_TRAS                            // tRAS
NB_NUMERIC_TWR                             // tWR
NB_NUMERIC_TRFC                            // tRFC
NB_NUMERIC_TRRD                            // tRRD
NB_NUMERIC_TWTR                            // tWTR
NB_NUMERIC_TRTP                            // tRTP
NB_NUMERIC_TRC                             // tRC
NB_NUMERIC_TFAW                            // tFAW
NB_NUMERIC_TCWL                            // tCWL
NB_NUMERIC_TREFI                           // tREFI
//NB_NUMERIC_TRPAB                           // tRPab
NB_ONEOF_DMIVC1                            // DmiVc1
NB_ONEOF_DMIVCP                            // DmiVcp
NB_ONEOF_DMIVCM                            // DmiVcm
NB_ONEOF_NBDMIASPM                         // NBDmiAspm
NB_ONEOF_NBDMIEXTSYNC                      // NBDmiExtSync
NB_ONEOF_DMIGEN2                           // DmiGen2
NB_ONEOF_DMIDEEMPHASIS                     // DmiDeEmphasis
NB_ONEOF_DMIIOT                            // DmiIot
NB_ONEOF_GDXCENABLE                        // GdxcEnable

#endif // CONTROLS_WITH_DEFAULTS
//---------------------------------------------------------------------------

#ifdef CHIPSET_FORM_SET
    #ifndef SUPPRESS_GRAYOUT_ENDIF //old Core
    #define SUPPRESS_GRAYOUT_ENDIF endif;
    #endif

    #ifdef FORM_SET_VARSTORE
       varstore NB_PLATFORM_DATA,
       key   = AUTO_ID(NB_PLATFORM_DATA_ID),
       name  = NBPlatformData,
       guid  = SETUP_GUID;
    #endif

    #ifdef FORM_SET_ITEM
    // Define controls to be added to the main page of the formset
    #endif

    #ifdef FORM_SET_GOTO
    // Define goto commands for the forms defined in this file
        goto NB_FORM_ID, 
        prompt = STRING_TOKEN(STR_NB_FORM),
        help = STRING_TOKEN(STR_NB_FORM_HELP);
    #endif

    #ifdef FORM_SET_FORM
    // Define forms
       form formid = AUTO_ID(NB_FORM_ID),
       title = STRING_TOKEN(STR_NB_FORM);

       text 
          help   = STRING_TOKEN(STR_SA_BRIDGE_HELP),
          text   = STRING_TOKEN(STR_SA_BRIDGE_NAME),
          text   = STRING_TOKEN(STR_SA_BRIDGE_VALUE),
          flags  = 0, key = 0;
   
       text 
          help   = STRING_TOKEN(STR_SA_RC_REV_HELP),
          text   = STRING_TOKEN(STR_SA_RC_REV_NAME),
          text   = STRING_TOKEN(STR_SA_RC_REV_VALUE),
          flags  = 0, key = 0;

       suppressif ideqval SETUP_DATA.EnableVtd == 0;
          text 
             help   = STRING_TOKEN(STR_SA_VTD_HELP),
             text   = STRING_TOKEN(STR_SA_VTD_NAME),
             text   = STRING_TOKEN(STR_SA_VTD_VALUE),
             flags  = 0, key = 0;
       endif;

       SEPARATOR

       suppressif  ideqval NB_PLATFORM_DATA.VTdAvailable == 0;
       grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 

          NB_ONEOF_ENABLEVTD 

       SUPPRESS_GRAYOUT_ENDIF


      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
         NB_ONEOF_SADEVICE7
      endif;
 
      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
         NB_ONEOF_SADEVICE4
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
         NB_ONEOF_SAAUDIOENABLE
      endif;

//      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
//      suppressif ideqval NB_PLATFORM_DATA.IGFXCapability == 0 OR
//                 ideqval SETUP_DATA.SaAudioEnable == 0;
//         NB_ONEOF_SAHDMICODECPORTB
//         NB_ONEOF_SAHDMICODECPORTC
//         NB_ONEOF_SAHDMICODECPORTD
//      SUPPRESS_GRAYOUT_ENDIF

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
         NB_ONEOF_ENABLENBCRID
      endif;

#if defined BdatAccessHandler_SUPPORT && BdatAccessHandler_SUPPORT == 1
      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
         NB_ONEOF_BDATACPITABLESUPPORT
      endif;
#endif // BdatAccessHandler_SUPPORT

#if defined NB_IGFX_FORCE_DISABLE_SUPPORT && NB_IGFX_FORCE_DISABLE_SUPPORT == 1
      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        NB_ONEOF_IGFXFORCEDISABLE
      endif;
#endif // NB_IGFX_FORCE_DISABLE_SUPPORT

      SEPARATOR
      
      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER; 
        goto INTEL_IGFX_ID,
        prompt  = STRING_TOKEN(STR_INTEL_IGFX_FORM),
        help    = STRING_TOKEN(STR_INTEL_IGFX_HELP);
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        goto DMI_CONFIG_ID,
        prompt = STRING_TOKEN(STR_DMI_CONFIGURATION_TITLE),
        help = STRING_TOKEN(STR_DMI_CONFIGURATION_HELP);
      endif;

#if defined(RC_PEG_0) && (RC_PEG_0 == 1)
      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      suppressif ideqval NB_PLATFORM_DATA.PegAvailable == 0; 
        goto PCIE_CONFIG_ID,
        prompt  = STRING_TOKEN(STR_PCIE_CONFIGURATION_FORM),
        help    = STRING_TOKEN(STR_PCIE_CONFIGURATION_HELP);
      SUPPRESS_GRAYOUT_ENDIF
#endif

        // Define goto commands for the forms defined in this file
      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        goto MEMORY_FORM_ID, 
        prompt = STRING_TOKEN(STR_MEMORY_FORM),
        help = STRING_TOKEN(STR_MEMORY_FORM_HELP);
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        goto MEMORY_THERMAL_CONFIG_FORM_ID,
        prompt = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_FORM_TITLE),
        help = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_FORM_HELP);
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
      suppressif ideqval NB_PLATFORM_DATA.IGFXAvailable == 0;
        goto GT_POWER_CONFIG_FORM_ID,
        prompt = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE),
        help = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_HELP);
      SUPPRESS_GRAYOUT_ENDIF 

      endform;

//----------------------------------------------------------------------------
//                    IGFX_CONFIGURATION
//----------------------------------------------------------------------------

      form formid = AUTO_ID(INTEL_IGFX_ID),
      title = STRING_TOKEN(STR_INTEL_IGFX_FORM);
      SUBTITLE(STRING_TOKEN(STR_INTEL_IGFX_FORM))
suppressif TRUE ;
      suppressif ideqval NB_PLATFORM_DATA.IGFXAvailable == 0 OR
                 ideqval SETUP_DATA.InternalGraphics == 0 OR
                 ideqval NB_PLATFORM_DATA.IGFXGopAvailable == 1;
#if (defined(CSM_SUPPORT) && (CSM_SUPPORT != 0))
        text
          help   = STRING_TOKEN(STR_CHIP_IGFX_VBIOS_REV_HELP),
          text   = STRING_TOKEN(STR_CHIP_IGFX_VBIOS_REV_NAME),
          text   = STRING_TOKEN(STR_CHIP_IGFX_VBIOS_REV_VALUE),
          flags  = 0,
          key    = 0;
#endif
        text 
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_IGFX_FREQ_PROMPT),
          text   = STRING_TOKEN(STR_IGFX_FREQ_VALUE),
          flags  = 0, 
          key    = 0;

        NB_NUMERIC_GFXTURBOIMON

      endif;
endif ;
      SEPARATOR

      suppressif ideqval NB_PLATFORM_DATA.PegAvailable == 0 OR
                 ideqval NB_PLATFORM_DATA.IGFXCapability == 0;

         NB_ONEOF_PRIMARYDISPLAY

      endif;

#if ( defined(SwitchableGraphics_SUPPORT) && (SwitchableGraphics_SUPPORT == 0) )

      suppressif NOT ideqval NB_PLATFORM_DATA.IGFXCapability == 0 OR
                 ideqval NB_PLATFORM_DATA.PegAvailable == 0; 
                 
         NB_ONEOF_PRIMARYDISPLAY1

      endif;

#endif

      suppressif NOT ideqval NB_PLATFORM_DATA.PegAvailable == 0;
                 
         NB_ONEOF_PRIMARYDISPLAY2

      endif;

//      suppressif ideqval NB_PLATFORM_DATA.UserBoard == FlavorUpServer OR
//                 ideqval NB_PLATFORM_DATA.IGFXAvailable == 0 OR
//                 ideqval NB_PLATFORM_DATA.IGFXGopAvailable == 0;

//      NB_ONEOF_PRIMARYGOPDISPLAY

//      endif;

      NB_ONEOF_IGDBOOTTYPE

#if defined(RC_PEG_0) && (RC_PEG_0 == 1)
#if ( defined(SwitchableGraphics_SUPPORT) && (SwitchableGraphics_SUPPORT == 1) )
      suppressif NOT ideqval SETUP_DATA.PrimaryDisplay == 4 OR
                 NOT ideqval SETUP_DATA.IGpuPortConfig == 1;

         NB_ONEOF_IGPUPORTCONFIG

      endif; 

      // Digital port options.
      suppressif NOT ideqval SETUP_DATA.IGpuPortConfig == 1 OR
                 NOT ideqval SETUP_DATA.PrimaryDisplay == 4 OR
                 ideqval NB_PLATFORM_DATA.IGFXAvailable == 0;

         NB_ONEOF_DIGITALPORTBMODE

         NB_ONEOF_DIGITALPORTCMODE

         NB_ONEOF_DIGITALPORTDMODE

      endif;   

#endif
#endif

#if defined(RC_PEG_0) && (RC_PEG_0 == 1)
      suppressif ideqval SETUP_DATA.PrimaryDisplay == 0 OR
                 ideqval SETUP_DATA.PrimaryDisplay == 4 OR
                 ideqval SETUP_DATA.AlwaysEnablePeg == 2;

         NB_ONEOF_PRIMARYPEG

      endif; 
#endif
// << (EIP76034)

      suppressif ideqval SETUP_DATA.PrimaryDisplay == 0 OR
                 ideqval SETUP_DATA.PrimaryDisplay == 4;

         NB_ONEOF_PRIMARYPCIE

      endif; 
         
suppressif TRUE ;
      suppressif NOT ideqval NB_PLATFORM_DATA.IGFXCapability == 1;

         NB_ONEOF_INTERNALGRAPHICS

      endif; 
endif ;

      suppressif ideqval NB_PLATFORM_DATA.IGFXAvailable == 0 OR
                 ideqval SETUP_DATA.InternalGraphics == 0;

//         NB_ONEOF_GTTSIZE
      
suppressif TRUE ;
         NB_ONEOF_APERTURESIZE
endif ;

         NB_ONEOF_IGDDVMT50PREALLOC

         NB_ONEOF_IGDDVMT50TOTALALLOC
suppressif TRUE ;
         NB_ONEOF_LOWPOWERMODE

         NB_ONEOF_PANELPOWERE

         goto IGFX_LCD_FORM_ID,
           prompt  = STRING_TOKEN(STR_IGFX_LCD),
           help    = STRING_TOKEN(STR_IGFX_LCD);
endif ;
      endif;

      endform;

//----------------------------------------------------------------------------
//                    IGFX_LCD_CONFIGURATION
//----------------------------------------------------------------------------

      form formid = AUTO_ID(IGFX_LCD_FORM_ID),
      title     = STRING_TOKEN(STR_IGFX_LCD);

      SUBTITLE(STRING_TOKEN(STR_IGFX_LCD))

      SEPARATOR

      NB_ONEOF_IGDBOOTTYPE

      suppressif ideqval SETUP_DATA.IgdBootType == 0x0;

         NB_ONEOF_DISPLAYPIPEB

      endif;

      NB_ONEOF_LCDPANELTYPE

      NB_ONEOF_SDVOPANELTYPE

      NB_ONEOF_LCDPANELSCALING
  
      NB_ONEOF_IGDLCDBLC

      NB_ONEOF_IGDLCDIBIA

      NB_ONEOF_IGDLCDSSCC

      NB_ONEOF_IGDTV1STANDARD

      NB_ONEOF_IGDTV2STANDARD

      NB_ONEOF_ALSENABLE

      NB_ONEOF_ACTIVELFP

      NB_ONEOF_LFPCOLORDEPTH

    endform;

    form formid = AUTO_ID(GT_POWER_CONFIG_FORM_ID),
    title     = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE))

      text 
        help   = STRING_TOKEN(STR_PROCESSOR_GT_HELP),
        text   = STRING_TOKEN(STR_PROCESSOR_GT_STRING),
        text   = STRING_TOKEN(STR_PROCESSOR_GT_VALUE),
        flags  = 0, key = 0;

      SEPARATOR

      NB_ONEOF_RENDERSTANDBY

//-      NB_ONEOF_DEEPRENDERSTANDBY

#if PERF_TUNE_SUPPORT == 0

      NB_ONEOF_GTOCSUPPORT

      suppressif ideqval SETUP_DATA.GtOcSupport == 0;

        NB_NUMERIC_GTMAXOCTURBORATIO

        NB_NUMERIC_GTEXTRATURBOVOLTAGE

      endif;
#endif

    endform; 

//----------------------------------------------------------------------------
//                    PCIE_CONFIGURATION
//----------------------------------------------------------------------------

    form formid = AUTO_ID(PCIE_CONFIG_ID),
    title = STRING_TOKEN(STR_PCIE_CONFIGURATION_FORM);
    SUBTITLE(STRING_TOKEN(STR_PCIE_CONFIGURATION_FORM))


      text
        help   = STRING_TOKEN(STR_PEG0_INFO_HELP),
        text   = STRING_TOKEN(STR_PEG0_INFO_NAME),
        text   = STRING_TOKEN(STR_PEG0_INFO_VALUE),
        flags  = 0,
        key    = 0;

      NB_ONEOF_PEGGENX0 

      text
        help   = STRING_TOKEN(STR_PEG1_INFO_HELP),
        text   = STRING_TOKEN(STR_PEG1_INFO_NAME),
        text   = STRING_TOKEN(STR_PEG1_INFO_VALUE),
        flags  = 0,
        key    = 0;

     NB_ONEOF_PEGGENX1

      text
        help   = STRING_TOKEN(STR_PEG2_INFO_HELP),
        text   = STRING_TOKEN(STR_PEG2_INFO_NAME),
        text   = STRING_TOKEN(STR_PEG2_INFO_VALUE),
        flags  = 0,
        key    = 0;

      NB_ONEOF_PEGGENX2


      SEPARATOR

      NB_ONEOF_C7ALLOWED

#if ( defined(CSM_SUPPORT) && (CSM_SUPPORT != 0) )
      suppressif ideqval SETUP_DATA.PrimaryDisplay == 4;

         NB_ONEOF_ALWAYSENABLEPEG

      endif;
#endif

      NB_ONEOF_DETECTNONCOMPLAINT
      NB_ONEOF_INITPCIEASPMAFTEROPROM
      NB_ONEOF_PEGDEEMPHASIS0
      NB_ONEOF_PEGDEEMPHASIS1
      NB_ONEOF_PEGDEEMPHASIS2
      NB_ONEOF_PEGASPM0

      suppressif ideqval SETUP_DATA.PegAspm[OFFSET_0] == 0x0 
       OR ideqval SETUP_DATA.PegAspm[OFFSET_0] == 2
       OR ideqval SETUP_DATA.PegAspm[OFFSET_0] == 4;

         NB_ONEOF_PEGASPML0S0

      endif;

         NB_ONEOF_PEGASPM1

      suppressif ideqval SETUP_DATA.PegAspm[OFFSET_1] == 0x0 
       OR ideqval SETUP_DATA.PegAspm[OFFSET_1] == 2
       OR ideqval SETUP_DATA.PegAspm[OFFSET_1] == 4;

         NB_ONEOF_PEGASPML0S1

      endif;

         NB_ONEOF_PEGASPM2

      suppressif ideqval SETUP_DATA.PegAspm[OFFSET_2] == 0x0 
       OR ideqval SETUP_DATA.PegAspm[OFFSET_2] == 2
       OR ideqval SETUP_DATA.PegAspm[OFFSET_2] == 4;

         NB_ONEOF_PEGASPML0S2

      endif;

      NB_ONEOF_PEGSAMPLERCALIBRATE

      NB_ONEOF_SWINGCONTROL

      NB_ONEOF_PEGGEN3EQUALIZATION

      suppressif ideqval SETUP_DATA.PegGen3Equalization == 0x0;

         NB_ONEOF_PEGGEN3EQUALIZATIONPHASE2

         goto PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM_ID,
         prompt  = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM),
         help    = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_VALUE_HELP);      

         goto PCIE_GEN3_END_POINT_PRESET_VALUE_FORM_ID,
         prompt  = STRING_TOKEN(STR_PCIE_GEN3_END_POINT_PRESET_VALUE_FORM),
         help    = STRING_TOKEN(STR_PCIE_GEN3_END_POINT_PRESET_VALUE_HELP);  

         goto PCIE_GEN3_END_POINT_HINT_VALUE_FORM_ID,
         prompt  = STRING_TOKEN(STR_PCIE_GEN3_END_POINT_HINT_VALUE_FORM),
         help    = STRING_TOKEN(STR_PCIE_GEN3_END_POINT_HINT_VALUE_HELP);  

      endif;

      NB_ONEOF_PEGGEN3PRESETSEARCH  
  
         suppressif ideqval SETUP_DATA.PegGen3PresetSearch == 0x0;

            NB_ONEOF_PEGGEN3FORCEPRESETSEARCH

            NB_ONEOF_ALLOWPERSTGPIOUSAGE

            NB_NUMERIC_PEGGEN3PRESETSEARCHDWELLTIME

            NB_NUMERIC_PEGGEN3PRESETSEARCHMARGINSTEPS

            NB_NUMERIC_PEGGEN3PRESETSEARCHSTARTMARGIN

            NB_NUMERIC_PEGGEN3PRESETSEARCHVOLTAGEMARGINSTEPS

            NB_NUMERIC_PEGGEN3PRESETSEARCHVOLTAGESTARTMARGIN

            NB_NUMERIC_PEGGEN3PRESETSEARCHFAVORTIMING

            NB_NUMERIC_PEGGEN3PRESETSEARCHERRORTARGET

         endif;

         NB_NUMERIC_PEGRXCEMLOOPBACK

         suppressif ideqval SETUP_DATA.RxCEMLoopback == 0x0;

            NB_NUMERIC_PEGRXCEMLOOPBACKLANE

         endif;

         goto PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM_ID,
         prompt  = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM),
         help    = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_HELP); 

    endform;

//----------------------------------------------------------------------------
      form formid = AUTO_ID(MEMORY_FORM_ID),
      title = STRING_TOKEN(STR_MEMORY_FORM);

        SUBTITLE(STRING_TOKEN(STR_MEMORY_INFO))

        SEPARATOR

        text
          help   = STRING_TOKEN(STR_MRC_REV_HELP),
          text   = STRING_TOKEN(STR_MRC_REV_NAME),
          text   = STRING_TOKEN(STR_MRC_REV_VALUE),
          flags  = 0,
          key    = 0;

        text 
            help   = STRING_TOKEN(STR_MEMORY_SPEED_HELP),
            text   = STRING_TOKEN(STR_MEMORY_SPEED_NAME),
            text   = STRING_TOKEN(STR_MEMORY_SPEED_VALUE),
            flags  = 0,
            key    = 0;

        text 
            help   = STRING_TOKEN(STR_MEMORY_SIZE_HELP),
            text   = STRING_TOKEN(STR_MEMORY_SIZE_NAME),
            text   = STRING_TOKEN(STR_MEMORY_SIZE_VALUE),
            flags  = 0,
            key    = 0;

        text 
            help   = STRING_TOKEN(STR_MEMORY_VOLTAGE_HELP),
            text   = STRING_TOKEN(STR_MEMORY_VOLTAGE_NAME),
            text   = STRING_TOKEN(STR_MEMORY_VOLTAGE_VALUE),
            flags  = 0,
            key    = 0;

        text 
            help   = STRING_TOKEN(STR_MEMORY_DIMM_INFO_HELP),
            text   = STRING_TOKEN(STR_MEMORY_DIMM0_NAME),
            text   = STRING_TOKEN(STR_MEMORY_DIMM0_VALUE),
            flags  = 0,
            key    = 0;

#if ( defined(A1_MEMORY_SOCKETS) && (A1_MEMORY_SOCKETS > 2) )
        text 
            help   = STRING_TOKEN(STR_MEMORY_DIMM_INFO_HELP),
            text   = STRING_TOKEN(STR_MEMORY_DIMM1_NAME),
            text   = STRING_TOKEN(STR_MEMORY_DIMM1_VALUE),
            flags  = 0,
            key    = 0;
#endif

        text 
            help   = STRING_TOKEN(STR_MEMORY_DIMM_INFO_HELP),
            text   = STRING_TOKEN(STR_MEMORY_DIMM2_NAME),
            text   = STRING_TOKEN(STR_MEMORY_DIMM2_VALUE),
            flags  = 0,
            key    = 0;

#if ( defined(A1_MEMORY_SOCKETS) && (A1_MEMORY_SOCKETS > 2) )                                            
        text 
            help   = STRING_TOKEN(STR_MEMORY_DIMM_INFO_HELP),
            text   = STRING_TOKEN(STR_MEMORY_DIMM3_NAME),
            text   = STRING_TOKEN(STR_MEMORY_DIMM3_VALUE),
            flags  = 0,
            key    = 0;
#endif

      text
        help   = STRING_TOKEN(STR_MEMORY_CL_HELP),
        text   = STRING_TOKEN(STR_MEMORY_CL_NAME),
        text   = STRING_TOKEN(STR_MEMORY_CL_VALUE),
        flags  = 0,
        key    = 0;

      SUBTITLE(STRING_TOKEN(STR_MEMORY_DELAY_TIME))

      text
        help   = STRING_TOKEN(STR_MEMORY_TRCD_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TRCD_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRCD_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRP_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TRP_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRP_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRAS_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TRAS_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRAS_VALUE),
        flags  = 0,
        key    = 0;

#if ( defined(PERF_TUNE_SUPPORT) && (PERF_TUNE_SUPPORT == 0) ) 
      text 
        help   = STRING_TOKEN(STR_XMP_PROFILE_1),
        text   = STRING_TOKEN(STR_XMP_PROFILE_1),
        text   = STRING_TOKEN(STR_XMP_PROFILE_1_VALUE),
        flags  = 0,
        key    = 0;

      text 
        help   = STRING_TOKEN(STR_XMP_PROFILE_2),
        text   = STRING_TOKEN(STR_XMP_PROFILE_2),
        text   = STRING_TOKEN(STR_XMP_PROFILE_2_VALUE),
        flags  = 0,
        key    = 0;
#endif

        SEPARATOR

#if ( defined(PERF_TUNE_SUPPORT) && (PERF_TUNE_SUPPORT == 0) ) 

      NB_ONEOF_SPDPROFILESELECTED

      suppressif NOT ideqval SETUP_DATA.SpdProfileSelected == 1;
          goto MEMORY_OC_FORM_ID,
          prompt  = STRING_TOKEN(STR_MEMORY_OC_FORM),
          help    = STRING_TOKEN(STR_MEMORY_OC_FORM_HELP);      
      endif; 


      suppressif NOT ideqval SETUP_DATA.SpdProfileSelected == 0;

         NB_ONEOF_DDRFREQLIMIT

      endif;

#ifndef MRC_DDR3L_NOT_SUPPORT_FLAG
      suppressif NOT ideqval NB_PLATFORM_DATA.UserBoard == FlavorMobile;

//-         NB_ONEOF_DDRLVOPTION

         NB_NUMERIC_DDRVOLTAGEWAITTIME

      endif;
#endif

#endif

      suppressif NOT ideqval NB_PLATFORM_DATA.UserBoard == FlavorDesktop AND
                 NOT ideqval NB_PLATFORM_DATA.UserBoard == FlavorMobile;

         NB_ONEOF_ECCSUPPORT

      endif;
      
      //
      // Max TOLUD setup option
      //
      NB_ONEOF_MAXTOLUD

      NB_ONEOF_ENHANCEDINTERLEAVE 

      NB_ONEOF_RANKINTERLEAVE

      NB_ONEOF_WEAKLOCKEN

      NB_ONEOF_MCLOCK

      NB_ONEOF_CHHASHENABLE

      NB_NUMERIC_CHHASHMASK

      NB_ONEOF_CHHASHINTERLEAVEBIT

      NB_ONEOF_NMODESUPPORT

      NB_ONEOF_SCRAMBLERSUPPORT

      NB_ONEOF_RMTCROSSERENABLE

      NB_ONEOF_MRCFASTBOOT

//Refcode no function-      NB_ONEOF_FORCECOLDRESET

      NB_ONEOF_EXITMODE

      suppressif ideqval SETUP_DATA.ExitMode == 1 OR ideqval SETUP_DATA.ExitMode == 0xFF;

         NB_ONEOF_POWERDOWNMODE0
      
      endif;

      suppressif ideqval SETUP_DATA.ExitMode == 0 OR ideqval SETUP_DATA.ExitMode == 0xFF;

         NB_ONEOF_POWERDOWNMODE1

      endif;

      NB_ONEOF_REMAPENABLE

      NB_ONEOF_DISABLEDIMMCHANNEL0

      NB_ONEOF_DISABLEDIMMCHANNEL1

      NB_ONEOF_GDXCENABLE

      endform;

//----------------------------------------------------------------------------
//                    PCIE_GEN3_ROOT_PORT_PRESET_CONFIGURATION
//----------------------------------------------------------------------------
    #ifndef PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM_SETUP
    #define PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM_SETUP   
 
      form formid = AUTO_ID(PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM_ID),
      title     = STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM);

         SUBTITLE(STRING_TOKEN(STR_PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM))

         SEPARATOR

         NB_NUMERIC_GEN3ROOTPORTPRESET00

         NB_NUMERIC_GEN3ROOTPORTPRESET01

         NB_NUMERIC_GEN3ROOTPORTPRESET02

         NB_NUMERIC_GEN3ROOTPORTPRESET03

         NB_NUMERIC_GEN3ROOTPORTPRESET04

         NB_NUMERIC_GEN3ROOTPORTPRESET05

         NB_NUMERIC_GEN3ROOTPORTPRESET06

         NB_NUMERIC_GEN3ROOTPORTPRESET07

         NB_NUMERIC_GEN3ROOTPORTPRESET08

         NB_NUMERIC_GEN3ROOTPORTPRESET09

         NB_NUMERIC_GEN3ROOTPORTPRESET10

         NB_NUMERIC_GEN3ROOTPORTPRESET11

         NB_NUMERIC_GEN3ROOTPORTPRESET12

         NB_NUMERIC_GEN3ROOTPORTPRESET13

         NB_NUMERIC_GEN3ROOTPORTPRESET14

         NB_NUMERIC_GEN3ROOTPORTPRESET15

      endform;
    #endif // PCIE_GEN3_ROOT_PORT_PRESET_VALUE_FORM_SETUP
//----------------------------------------------------------------------------
//                    PCIE_GEN3_END_POINT_PRESET_CONFIGURATION
//----------------------------------------------------------------------------
    #ifndef PCIE_GEN3_END_POINT_PRESET_VALUE_FORM_SETUP
    #define PCIE_GEN3_END_POINT_PRESET_VALUE_FORM_SETUP

      form formid = AUTO_ID(PCIE_GEN3_END_POINT_PRESET_VALUE_FORM_ID),
      title     = STRING_TOKEN(STR_PCIE_GEN3_END_POINT_PRESET_VALUE_FORM);

         SUBTITLE(STRING_TOKEN(STR_PCIE_GEN3_END_POINT_PRESET_VALUE_FORM))

         SEPARATOR

         NB_NUMERIC_GEN3ENDPOINTPRESET00

         NB_NUMERIC_GEN3ENDPOINTPRESET01

         NB_NUMERIC_GEN3ENDPOINTPRESET02

         NB_NUMERIC_GEN3ENDPOINTPRESET03

         NB_NUMERIC_GEN3ENDPOINTPRESET04

         NB_NUMERIC_GEN3ENDPOINTPRESET05

         NB_NUMERIC_GEN3ENDPOINTPRESET06

         NB_NUMERIC_GEN3ENDPOINTPRESET07

         NB_NUMERIC_GEN3ENDPOINTPRESET08

         NB_NUMERIC_GEN3ENDPOINTPRESET09

         NB_NUMERIC_GEN3ENDPOINTPRESET10

         NB_NUMERIC_GEN3ENDPOINTPRESET11

         NB_NUMERIC_GEN3ENDPOINTPRESET12

         NB_NUMERIC_GEN3ENDPOINTPRESET13

         NB_NUMERIC_GEN3ENDPOINTPRESET14

         NB_NUMERIC_GEN3ENDPOINTPRESET15

      endform;
    #endif // PCIE_GEN3_END_POINT_PRESET_VALUE_FORM_SETUP
//----------------------------------------------------------------------------
//                    PCIE_GEN3_END_POINT_HINT_CONFIGURATION
//----------------------------------------------------------------------------
    #ifndef PCIE_GEN3_END_POINT_HINT_VALUE_FORM_SETUP
    #define PCIE_GEN3_END_POINT_HINT_VALUE_FORM_SETUP

      form formid = AUTO_ID(PCIE_GEN3_END_POINT_HINT_VALUE_FORM_ID),
      title     = STRING_TOKEN(STR_PCIE_GEN3_END_POINT_HINT_VALUE_FORM);

         SUBTITLE(STRING_TOKEN(STR_PCIE_GEN3_END_POINT_HINT_VALUE_FORM))

         SEPARATOR

         NB_NUMERIC_GEN3ENDPOINTHINT00

         NB_NUMERIC_GEN3ENDPOINTHINT01

         NB_NUMERIC_GEN3ENDPOINTHINT02

         NB_NUMERIC_GEN3ENDPOINTHINT03

         NB_NUMERIC_GEN3ENDPOINTHINT04

         NB_NUMERIC_GEN3ENDPOINTHINT05

         NB_NUMERIC_GEN3ENDPOINTHINT06

         NB_NUMERIC_GEN3ENDPOINTHINT07

         NB_NUMERIC_GEN3ENDPOINTHINT08

         NB_NUMERIC_GEN3ENDPOINTHINT09

         NB_NUMERIC_GEN3ENDPOINTHINT10

         NB_NUMERIC_GEN3ENDPOINTHINT11

         NB_NUMERIC_GEN3ENDPOINTHINT12

         NB_NUMERIC_GEN3ENDPOINTHINT13

         NB_NUMERIC_GEN3ENDPOINTHINT14

         NB_NUMERIC_GEN3ENDPOINTHINT15

      endform;
    #endif // PCIE_GEN3_END_POINT_HINT_VALUE_FORM_SETUP
//----------------------------------------------------------------------------
//                    PCIE_GEN3_RXCTLEP_PER_BUNDLE_CONFIGURATION
//----------------------------------------------------------------------------
    #ifndef PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM_SETUP
    #define PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM_SETUP

      form formid = AUTO_ID(PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM_ID),
      title     = STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM);

         SUBTITLE(STRING_TOKEN(STR_PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM))

         SEPARATOR

         NB_NUMERIC_GEN3RXCTLEP00

         NB_NUMERIC_GEN3RXCTLEP01

         NB_NUMERIC_GEN3RXCTLEP02

         NB_NUMERIC_GEN3RXCTLEP03

         NB_NUMERIC_GEN3RXCTLEP04

         NB_NUMERIC_GEN3RXCTLEP05

         NB_NUMERIC_GEN3RXCTLEP06

         NB_NUMERIC_GEN3RXCTLEP07

      endform;
    #endif //PCIE_GEN3_RXCTLEP_PER_BUNDLE_VALUE_FORM_SETUP
//----------------------------------------------------------------------------
//                    MEMORY_OC_CONFIGURATION
//----------------------------------------------------------------------------
#if ( defined(PERF_TUNE_SUPPORT) && (PERF_TUNE_SUPPORT == 0) ) 
      form formid = AUTO_ID(MEMORY_OC_FORM_ID),
      title     = STRING_TOKEN(STR_MEMORY_OC_FORM);

      SUBTITLE(STRING_TOKEN(STR_MEMORY_OC_TITLE))

      text 
        help   = STRING_TOKEN(STR_MEMORY_SPEED_HELP),
        text   = STRING_TOKEN(STR_MEMORY_SPEED_NAME),
        text   = STRING_TOKEN(STR_MEMORY_SPEED_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_CL_HELP),
        text   = STRING_TOKEN(STR_MEMORY_CL_NAME),
        text   = STRING_TOKEN(STR_MEMORY_CL_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRCD_HELP),
        text   = STRING_TOKEN(STR_MEMORY_OC_TRCD_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRCD_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRP_HELP),
        text   = STRING_TOKEN(STR_MEMORY_OC_TRP_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRP_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRAS_HELP),
        text   = STRING_TOKEN(STR_MEMORY_OC_TRAS_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRAS_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TWR_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TWR_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TWR_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRFC_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TRFC_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRFC_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRRD_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TRRD_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRRD_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TWTR_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TWTR_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TWTR_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TRTP_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TRTP_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TRTP_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TFAW_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TFAW_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TFAW_VALUE),
        flags  = 0,
        key    = 0;

      SEPARATOR

      SUBTITLE(STRING_TOKEN(STR_MEMORY_TIMING_SUBTITLE))

      NB_ONEOF_OC_DDRFREQLIMIT

      NB_NUMERIC_TCL
                    
      NB_NUMERIC_TRCD

      NB_NUMERIC_TRP

      NB_NUMERIC_TRAS

      NB_NUMERIC_TWR

      NB_NUMERIC_TRFC

      NB_NUMERIC_TRRD

      NB_NUMERIC_TWTR

      NB_NUMERIC_TRTP

      NB_NUMERIC_TRC

      NB_NUMERIC_TFAW

      NB_NUMERIC_TCWL                         

      NB_NUMERIC_TREFI                        

//      NB_NUMERIC_TRPAB    
                    
      endform;

#endif
//----------------------------------------------------------------------------
//                    MEMORY_THERMAL_CONFIGURATION
//----------------------------------------------------------------------------
    form formid = AUTO_ID(MEMORY_THERMAL_CONFIG_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIGURATION);

      SUBTITLE(STRING_TOKEN(STR_MEMORY_THERMAL_CONFIGURATION))
      SEPARATOR


      goto MEMORY_POWER_AND_THERMAL_THROTTLING_FORM_ID,
      prompt = STRING_TOKEN(STR_MEMORY_POWER_AND_THERMAL_THROTTLING_FORM_TITLE),
      help = STRING_TOKEN(STR_MEMORY_POWER_AND_THERMAL_THROTTLING_FORM_HELP);

      NB_ONEOF_MEMORYTHERMALMANAGEMENT
         
      suppressif ideqval SETUP_DATA.MemoryThermalManagement == 0x0 
              OR NOT ideqval NB_PLATFORM_DATA.UserBoard == FlavorMobile;

         NB_ONEOF_PECIINJECTEDTEMP
      
         NB_ONEOF_EXTTSVIATSONBOARD
        
         NB_ONEOF_EXTTSVIATSONDIMM
        
         NB_ONEOF_VIRTUALTEMPSENSOR

      endif;
      
    endform;

//----------------------------------------------------------------------------
//                    MEMORY_POWER_AND_THERMAL_THROTTLING
//----------------------------------------------------------------------------
    form formid = AUTO_ID(MEMORY_POWER_AND_THERMAL_THROTTLING_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_POWER_AND_THERMAL_THROTTLING_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_MEMORY_POWER_AND_THERMAL_THROTTLING_FORM_TITLE))
      SEPARATOR

      NB_ONEOF_PWDWNIDLECOUNTER

      NB_ONEOF_REFRESH2X

      NB_ONEOF_REFRESH2XMODE

      NB_ONEOF_LPDDRTHERMALSENSOR                // LpddrThermalSensor 

      NB_ONEOF_SREFCFGENA                        // SrefCfgEna

      NB_NUMERIC_SREFCFGIDLETMR                  // SrefCfgIdleTmr

      NB_ONEOF_THRTCKEMINDEFEAT                  // ThrtCkeMinDefeat

      NB_NUMERIC_THRTCKEMINTMR                   // ThrtCkeMinTmr

      suppressif NOT ideqval NB_PLATFORM_DATA.DDR3Type == 0x02;
         SEPARATOR

         NB_ONEOF_ENABLEPWRDNLPDDR                  // EnablePwrDnLpddr
 
         NB_ONEOF_THRTCKEMINDEFEATLPDDR             // ThrtCkeMinDefeatLpddr

         NB_NUMERIC_THRTCKEMINTMRLPDDR              // ThrtCkeMinTmrLpddr

         SEPARATOR
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        goto DRAM_POWER_METER_FORM_FORM_ID,
        prompt = STRING_TOKEN(STR_DRAM_POWER_METER_FORM_TITLE),
        help = STRING_TOKEN(STR_DRAM_POWER_METER_FORM_HELP);
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        goto MEMORY_THERMAL_REPORTING_FORM_FORM_ID,
        prompt = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_FORM_TITLE),
        help = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_FORM_HELP);
      endif;

      grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
        goto MEMORY_RAPL_FORM_FORM_ID,
        prompt = STRING_TOKEN(STR_MEMORY_RAPL_FORM_TITLE),
        help = STRING_TOKEN(STR_MEMORY_RAPL_FORM_HELP);
      endif;

    endform;
//----------------------------------------------------------------------------
//                   Dram Power Meter
//----------------------------------------------------------------------------
    form formid = AUTO_ID(DRAM_POWER_METER_FORM_FORM_ID),
    title = STRING_TOKEN(STR_DRAM_POWER_METER_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_DRAM_POWER_METER_FORM_TITLE))
      SEPARATOR

      SUBTITLE(STRING_TOKEN(STR_USER_POWER_WEIGHTS_ENABLE_TITLE))
      SUBTITLE(STRING_TOKEN(STR_USER_POWER_WEIGHTS_ENABLE_TITLE1))
      NB_ONEOF_USERPOWERWEIGHTSEN                // UserPowerWeightsEn

      SEPARATOR

      grayoutif ideqval SETUP_DATA.UserPowerWeightsEn == 0;

         NB_NUMERIC_ENERGYSCALEFACT                 // EnergyScaleFact

         SEPARATOR

         NB_NUMERIC_IDLEENERGYCH0DIMM0              // IdleEnergyCh0Dimm0
         NB_NUMERIC_PDENERGYCH0DIMM0                // PdEnergyCh0Dimm0
         NB_NUMERIC_ACTENERGYCH0DIMM0               // ActEnergyCh0Dimm0
         NB_NUMERIC_RDENERGYCH0DIMM0                // RdEnergyCh0Dimm0
         NB_NUMERIC_WRENERGYCH0DIMM0                // WrEnergyCh0Dimm0

         SEPARATOR

         NB_NUMERIC_IDLEENERGYCH0DIMM1              // IdleEnergyCh0Dimm1
         NB_NUMERIC_PDENERGYCH0DIMM1                // PdEnergyCh0Dimm1
         NB_NUMERIC_ACTENERGYCH0DIMM1               // ActEnergyCh0Dimm1
         NB_NUMERIC_RDENERGYCH0DIMM1                // RdEnergyCh0Dimm1
         NB_NUMERIC_WRENERGYCH0DIMM1                // WrEnergyCh0Dimm1

         SEPARATOR

         NB_NUMERIC_IDLEENERGYCH1DIMM0              // IdleEnergyCh1Dimm0
         NB_NUMERIC_PDENERGYCH1DIMM0                // PdEnergyCh1Dimm0
         NB_NUMERIC_ACTENERGYCH1DIMM0               // ActEnergyCh1Dimm0
         NB_NUMERIC_RDENERGYCH1DIMM0                // RdEnergyCh1Dimm0
         NB_NUMERIC_WRENERGYCH1DIMM0                // WrEnergyCh1Dimm0

         SEPARATOR

         NB_NUMERIC_IDLEENERGYCH1DIMM1              // IdleEnergyCh1Dimm1
         NB_NUMERIC_PDENERGYCH1DIMM1                // PdEnergyCh1Dimm1
         NB_NUMERIC_ACTENERGYCH1DIMM1               // ActEnergyCh1Dimm1
         NB_NUMERIC_RDENERGYCH1DIMM1                // RdEnergyCh1Dimm1
         NB_NUMERIC_WRENERGYCH1DIMM1                // WrEnergyCh1Dimm1

      endif;
    endform;
//----------------------------------------------------------------------------
//                   Memory Thermal Reporting
//----------------------------------------------------------------------------
    form formid = AUTO_ID(MEMORY_THERMAL_REPORTING_FORM_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_FORM_TITLE);

      NB_ONEOF_LOCKPTMREGS                       // LockPTMregs

      SEPARATOR
      SUBTITLE(STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_FORM_TITLE))
      SEPARATOR

      NB_ONEOF_ENABLEEXTTS                       // EnableExtts
      
      NB_ONEOF_ENABLECLTM                        // EnableCltm

      NB_ONEOF_ENABLEOLTM                        // EnableOltm

      SEPARATOR
      SUBTITLE(STRING_TOKEN(STR_THERMAL_THRESHOLD_SETTINGS_FORM_TITLE))
      SEPARATOR

      NB_NUMERIC_WARMTHRESHOLDCH0DIMM0           // WarmThresholdCh0Dimm0

      NB_NUMERIC_WARMTHRESHOLDCH0DIMM1           // WarmThresholdCh0Dimm1

      NB_NUMERIC_HOTHRESHOLDCH0DIMM0             // HotThresholdCh0Dimm0

      NB_NUMERIC_HOTHRESHOLDCH0DIMM1             // HotThresholdCh0Dimm1

      NB_NUMERIC_WARMTHRESHOLDCH1DIMM0           // WarmThresholdCh1Dimm0

      NB_NUMERIC_WARMTHRESHOLDCH1DIMM1           // WarmThresholdCh1Dimm1

      NB_NUMERIC_HOTHRESHOLDCH1DIMM0             // HotThresholdCh1Dimm0

      NB_NUMERIC_HOTHRESHOLDCH1DIMM1             // HotThresholdCh1Dimm1

      SEPARATOR
      SUBTITLE(STRING_TOKEN(STR_THERMAL_THROTTLE_BUDGET_SETTINGS_FORM_TITLE))
      SEPARATOR

      NB_NUMERIC_WARMBUDGETCH0DIMM0              // WarmBudgetCh0Dimm0

      NB_NUMERIC_WARMBUDGETCH0DIMM1              // WarmBudgetCh0Dimm1

      NB_NUMERIC_HOTBUDGETCH0DIMM0               // HotBudgetCh0Dimm0

      NB_NUMERIC_HOTBUDGETCH0DIMM1               // HotBudgetCh0Dimm1

      NB_NUMERIC_WARMBUDGETCH1DIMM0              // WarmBudgetCh1Dimm0

      NB_NUMERIC_WARMBUDGETCH1DIMM1              // WarmBudgetCh1Dimm1

      NB_NUMERIC_HOTBUDGETCH1DIMM0               // HotBudgetCh1Dimm0

      NB_NUMERIC_HOTBUDGETCH1DIMM1               // HotBudgetCh1Dimm1

    endform;
//----------------------------------------------------------------------------
//                    MEMORY RAPL
//----------------------------------------------------------------------------
    form formid = AUTO_ID(MEMORY_RAPL_FORM_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_RAPL_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_MEMORY_RAPL_FORM_TITLE))

      SEPARATOR

      grayoutif ideqval SETUP_DATA.UserPowerWeightsEn == 0;

         NB_NUMERIC_RAPLPWRFLCH0                    // RaplPwrFlCh0

         NB_NUMERIC_RAPLPWRFLCH1                    // RaplPwrFlCh1

      endif;

      SEPARATOR

      NB_ONEOF_RAPLLIM2LOCK                      // RaplLim2Lock

      NB_ONEOF_RAPLLIM1ENA                       // RaplLim1Ena

      NB_NUMERIC_RAPLLIM1PWR                     // RaplLim1Pwr

      NB_NUMERIC_RAPLLIM1WINDX                   // RaplLim1WindX

      NB_NUMERIC_RAPLLIM1WINDY                   // RaplLim1WindY

      SEPARATOR

      NB_ONEOF_RAPLLIM2ENA                       // RaplLim2Ena

      NB_NUMERIC_RAPLLIM2PWR                     // RaplLim2Pwr

      NB_NUMERIC_RAPLLIM2WINDX                   // RaplLim2WindX

      NB_NUMERIC_RAPLLIM2WINDY                   // RaplLim2WindY

    endform;
//----------------------------------------------------------------------------
//                    DMI_CONFIGURATION
//----------------------------------------------------------------------------

    form formid = AUTO_ID(DMI_CONFIG_ID),
    title     = STRING_TOKEN(STR_DMI_CONFIGURATION_TITLE);

      SUBTITLE(STRING_TOKEN(STR_DMI_CONFIGURATION_TITLE))
      SEPARATOR
      text
        help   = STRING_TOKEN(STR_DMI_INFO_HELP),
        text   = STRING_TOKEN(STR_DMI_INFO_NAME),
        text   = STRING_TOKEN(STR_DMI_INFO_VALUE),
        flags  = 0,
        key    = 0;
      SEPARATOR

      NB_ONEOF_DMIVC1

      NB_ONEOF_DMIVCP

      NB_ONEOF_DMIVCM

      NB_ONEOF_NBDMIASPM

      NB_ONEOF_NBDMIEXTSYNC

      NB_ONEOF_DMIGEN2

      NB_ONEOF_DMIDEEMPHASIS

      NB_ONEOF_DMIIOT

    endform;
    #endif // end FORM_SET_FORM
#endif // end CHIPSET_SET_FORM

//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2011, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************
